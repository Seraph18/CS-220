Script started on 2021-10-11 15:48:24-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$ exit

Script done on 2021-10-11 15:48:43-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2021-10-11 15:48:50-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$ ls
changes.LOG  int-set.h	int-set-strings.c  int-set-strings.h  main.c  makefile	README	tests.c  tests.make
josh@machine:~/Documents/CS220/prj2-sol$ make
make: Nothing to be done for 'Makefile'.
josh@machine:~/Documents/CS220/prj2-sol$ make c[Kall
gcc -g -Wall -std=c18 int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSet[m[Kâ€™:
[01m[Kint-set.c:24:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   24 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:82:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   82 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:95:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   95 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x24): undefined reference to `main'
collect2: error: ld returned 1 exit status
make: *** [makefile:14: int-set.o] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ makwe

Command 'makwe' not found, did you mean:

  command 'make' from deb make (4.2.1-1.2)
  command 'make' from deb make-guile (4.2.1-1.2)

Try: sudo apt install <deb name>

josh@machine:~/Documents/CS220/prj2-sol$ make
make: Nothing to be done for 'Makefile'.
josh@machine:~/Documents/CS220/prj2-sol$ make all
gcc -g -Wall -std=c18   -c -o main.o main.c
gcc -g -Wall -std=c18 int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSet[m[Kâ€™:
[01m[Kint-set.c:26:12:[m[K [01;35m[Kwarning: [m[Kfunction returns address of local variable [[01;35m[K-Wreturn-local-addr[m[K]
   26 |     return [01;35m[K&head[m[K;
      |            [01;35m[K^~~~~[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:86:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   86 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:99:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   99 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x24): undefined reference to `main'
collect2: error: ld returned 1 exit status
make: *** [makefile:16: int-set.o] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make
make: Nothing to be done for 'Makefile'.
josh@machine:~/Documents/CS220/prj2-sol$ make
make: Nothing to be done for 'Makefile'.
josh@machine:~/Documents/CS220/prj2-sol$ make
gcc -g -Wall -std=c18 int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSet[m[Kâ€™:
[01m[Kint-set.c:26:12:[m[K [01;35m[Kwarning: [m[Kfunction returns address of local variable [[01;35m[K-Wreturn-local-addr[m[K]
   26 |     return [01;35m[K&head[m[K;
      |            [01;35m[K^~~~~[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:86:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   86 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:99:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
   99 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/../Script started on 2021-10-11 18:55:06-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$ exit

Script done on 2021-10-11 18:55:23-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2021-10-11 18:55:36-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$ exit

Script done on 2021-10-11 18:55:39-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2021-10-11 18:55:41-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$     $ make -f tests.make CK_SUITE=newIntSet[1P[1P[1P[1P[1P[1P
cc -g -Wall -std=c18   -c -o tests.o tests.c
[01m[Ktests.c:4:10:[m[K [01;31m[Kfatal error: [m[Kcheck.h: No such file or directory
    4 | #include [01;31m[K<check.h>[m[K
      |          [01;31m[K^~~~~~~~~[m[K
compilation terminated.
make: *** [<builtin>: tests.o] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ aw[K[Kexit

Script done on 2021-10-11 19:52:32-04:00 [COMMAND_EXIT_CODE="2"]
Script started on 2021-10-11 20:15:50-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ apt install [K[K[K[K[K[K[K[K[K[K[K[Ksudo apt install check
[sudo] password for josh: *****     ***********           
Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 0%Reading package lists... 3%Reading package lists... 3%Reading package lists... 6%Reading package lists... 6%Reading package lists... 7%Reading package lists... 7%Reading package lists... 8%Reading package lists... 8%Reading package lists... 8%Reading package lists... 8%Reading package lists... 8%Reading package lists... 8%Reading package lists... 37%Reading package lists... 37%Reading package lists... 52%Reading package lists... 52%Reading package lists... 67%Reading package lists... 67%Reading package lists... 68%Reading package lists... 68%Reading package lists... 68%Reading package lists... 68%Reading package lists... 68%Reading package lists... 68%Reading package lists... 72%Reading package lists... 72%Reading package lists... 72%Reading package lists... 74%Reading package lists... 74%Reading package lists... 76%Reading package lists... 76%Reading package lists... 78%Reading package lists... 78%Reading package lists... 78%Reading package lists... 78%Reading package lists... 79%Reading package lists... 79%Reading package lists... 82%Reading package lists... 82%Reading package lists... 84%Reading package lists... 84%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 85%Reading package lists... 88%Reading package lists... 88%Reading package lists... 88%Reading package lists... 88%Reading package lists... 90%Reading package lists... 90%Reading package lists... 92%Reading package lists... 92%Reading package lists... 92%Reading package lists... 92%Reading package lists... 93%Reading package lists... 93%Reading package lists... 95%Reading package lists... 95%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
The following packages were automatically installed and are no longer required:
  libllvm11 mint-backgrounds-ulyssa
Use 'sudo apt autoremove' to remove them.
The following additional packages will be installed:
  libsubunit-dev libsubunit0
The following NEW packages will be installed:
  check libsubunit-dev libsubunit0
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 178 kB of archives.
After this operation, 488 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
[33m0% [Working][0m            Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 libsubunit0 amd64 1.4.0-0ubuntu1 [6,408 B]
[33m2% [1 libsubunit0 4,004 B/6,408 B 62%][0m[33m                                      10% [Working][0m             Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 libsubunit-dev amd64 1.4.0-0ubuntu1 [6,048 B]
[33m12% [2 libsubunit-dev 6,048 B/6,048 B 100%][0m[33m                                           19% [Working][0m             Get:3 http://archive.ubuntu.com/ubuntu focal/universe amd64 check amd64 0.10.0-3build2 [166 kB]
[33m21% [3 check 4,096 B/166 kB 2%][0m[33m                               100% [Working][0m              Fetched 178 kB in 1s (150 kB/s)
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend requires a screen at least 13 lines tall and 31 columns wide.)
debconf: falling back to frontend: Readline

7[0;10r8[1ASelecting previously unselected package libsubunit0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 384489 files and directories currently installed.)
Preparing to unpack .../libsubunit0_1.4.0-0ubuntu1_amd64.deb ...
7[11;0f[42m[30mProgress: [  0%][49m[39m [.............................................................................................................] 87[11;0f[42m[30mProgress: [  8%][49m[39m [########.....................................................................................................] 8Unpacking libsubunit0:amd64 (1.4.0-0ubuntu1) ...
7[11;0f[42m[30mProgress: [ 15%][49m[39m [################.............................................................................................] 8Selecting previously unselected package libsubunit-dev:amd64.
Preparing to unpack .../libsubunit-dev_1.4.0-0ubuntu1_amd64.deb ...
7[11;0f[42m[30mProgress: [ 23%][49m[39m [#########################....................................................................................] 8Unpacking libsubunit-dev:amd64 (1.4.0-0ubuntu1) ...
7[11;0f[42m[30mProgress: [ 31%][49m[39m [#################################............................................................................] 8Selecting previously unselected package check:amd64.
Preparing to unpack .../check_0.10.0-3build2_amd64.deb ...
7[11;0f[42m[30mProgress: [ 38%][49m[39m [#########################################....................................................................] 8Unpacking check:amd64 (0.10.0-3build2) ...
7[11;0f[42m[30mProgress: [ 46%][49m[39m [##################################################...........................................................] 8Setting up libsubunit0:amd64 (1.4.0-0ubuntu1) ...
7[11;0f[42m[30mProgress: [ 54%][49m[39m [##########################################################...................................................] 87[11;0f[42m[30mProgress: [ 62%][49m[39m [###################################################################..........................................] 8Setting up libsubunit-dev:amd64 (1.4.0-0ubuntu1) ...
7[11;0f[42m[30mProgress: [ 69%][49m[39m [###########################################################################..................................] 87[11;0f[42m[30mProgress: [ 77%][49m[39m [###################################################################################..........................] 8Setting up check:amd64 (0.10.0-3build2) ...
7[11;0f[42m[30mProgress: [ 85%][49m[39m [############################################################################################.................] 87[11;0f[42m[30mProgress: [ 92%][49m[39m [####################################################################################################.........] 8Processing triggers for libc-bin (2.31-0ubuntu9.2) ...
Processing triggers for man-db (2.9.1-1) ...
Processing triggers for install-info (6.7.0.dfsg.2-5) ...

7[0;11r8[1A[Jjosh@machine:~/Documents/CS220/prj2-sol$ sudo apt install checkclear[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Ka[Kclean[1Ptestvalgrind --leak-check=full ./test.exe[2Ptest.exemake test[Kclean[Kvalgrind --leak-check=full test.exemake test[Kscript -a changes.LOG[12Pmake testvalgrind --leak-check=full test.exemake[K clean[1Ptestvalgrind --leak-check=full test.exe./test.exemake test[Kclean[1Ptestvalgrind --leak-check=full ./test.exe[2Ptest.exemake test[Kclean[Kvalgrind --leak-check=full test.exemake test[Kscript -a changes.LOGclear[Kmake testall [K all[K all[K all test[4Pclearmake testall [K all[Kwee all[K[2Plsscript -a changes.LOGmake -f tests.make CK_SUITE=newIntSetvalgrind --leak-check=full ./test.exemake test[Kcleanvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake clean[K[1Ptestvalgrind --leak-check=full ./test.exemake test[Kcleanvalgrind --leak-check=full ./test.exemake test[Kcleangdb ./test.exe[23@valgrind --leak-check=full[C[C[C[C[C[C[C[C[C[C[C[23Pgdb[C[C[C[C[C[C[C[C[C[C[C[23@valgrind --leak-check=full[C[C[C[C[C[C[C[C[C[C[Cmake test[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestclean[1Ptestclean[1Ptestvalgrind --leak-check=full ./test.exemake test[Kcleanvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full -v ./test.exe[3P./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Kgt[1Ptcleanvalgrind --leak-check=full ./test.exemake test[Kcleanvalgrind --leak-check=full ./test.execlear[Kvalgrind --leak-check=full ./test.exemake test[Kcleanvalgrind --leak-check=full ./test.exemake test[Kcleanmn[2Ptestclean[1Ptestcleanvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestclean[1Ptestclean[1Ptest./test.exece[1Pmake testcleanvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Kcleanvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestvalgrind --leak-check=full ./test.exemake test[Kclean[K testvalgrind --leak-check=full ./test.exemake test[Kclean[K clean[2Pall[Kclear[1Pmake test[Kvalgrind --leak-check=full ./test.exemake test[K[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Ksvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestclean[1Ptest[K testvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestvalgrind --leak-check=full ./test.exeman valgrind[Kvalgrind --leak-check=true ./test.exemake test[Kssh jgordo39@remote.cs.binghamton.educp ~/Documents/CS240/CP2_Gordon_jgordo39.tar.gz jgordo39@remote.cs.binghamton.edu:~/cs240/.[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[CDocuments/CS240/CP2_Gordon_jgordo39.tar.gz jgordo39@remote.cs.binghamton.edu:~/cs240/.[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cscp ~Documents/CS240/CP2_Gordon_jgordo39.tar.gz jgordo39@remote.cs.binghamton.edu:~/cs240/.[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C/Documents/CS240/CP2_Gordon_jgordo39.tar.gz jgordo39@remote.cs.binghamton.edu:~/cs240/.[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[53Psh jgordo39@remote.cs.binghamton.edu
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake test[Kvalgrind --leak-check=true ./test.exeman valgrind[Kvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestvalgrind --leak-check=full ./test.exemake test[K[K testclean[1Ptestclean[1Ptestvalgrind --leak-check=full ./test.exemake tests[K[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake tes[Ktvalgrind --leak-check=full ./test.exemake[K test[Kclear[1Pmake allclean[K clean[1Ptestvalgrind --leak-check=full ./test.exemake test[K[K clean[1Ptestvalgrind --leak-check=full ./test.exemake clean[K[1Ptestvalgrind --leak-check=full ./test.exemake clean[K[1Ptest./test.ecexe[1Pmake testclean[1Ptestclean[1Ptestclean[1Ptestvalgrind --leak-check=full ./test.exemake clean[K[1Ptestclean[1Ptestcleamn[1Pn[1Ptestvalgrind --leak-check=full ./test.exemake clean[K[1Ptestvalgrind --leak-check=full ./test.execlear[Kvalgrind --leak-check=full ./test.exemake clean[K[1Ptestvalgrind --leak-check=full ./test.exemake clean[K[1Ptestgt[1Ptvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exe-v ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake clean[K[1Ptestvalgrind --leak-check=full ./test.exemake test[Kclean[1Ptestclean[1Ptestclean[1Ptestvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.exe[23Pgdb[C[C[C[C[C[C[C[C[C[C[C[4Pmake clean[1Ptestvalgrind --leak-check=full ./test.exemake clean[K[1Ptestvalgrind --leak-check=full ./test.exemake -f tests.make CK_SUITE=newIntSet[16Pscript -a changes.LOGls[Kmake all[3Pwe[1Pe all[K all test[4Pclearscript -a changes.LOG[12Pmake testvalgrind --leak-check=full test.exemake[K clean[1Ptestvalgrind --leak-check=full test.exe./test.exemake test[Kclean[1Ptesta[Kvalgrind --leak-check=full ./test.exemake test[Kvalgrind --leak-check=full ./test.execlear[Ksudo apt install check[Kamek [K[K[K[K[Kmake 0f[K[K-f tests.make CK_SUITE-[K=newIN[KntSet
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:129:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  129 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:144:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  144 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:72:19:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KnewNode[m[Kâ€™ may be used uninitialized in this function [[01;35m[K-Wmaybe-uninitialized[m[K]
   72 |     [01;35m[KnewNode->data = element[m[K;
      |     [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
josh@machine:~/Documents/CS220/prj2-sol$ cler

Command 'cler' not found, did you mean:

  command 'cver' from deb gplcver (2.12a-1.1build1)
  command 'clear' from deb ncurses-bin (6.2-0ubuntu2)
  command 'cleo' from deb cleo (0.004-2)
  command 'clex' from deb clex (4.6.patch8-1)

Try: sudo apt install <deb name>

josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clear[1Prmake -f tests.make CK_SUITE=newIntSet
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=newIntSetclear[K[1Prarmake -f tests.make CK_SUITE=newIntSetclear[K[Kclearmake -f tests.make CK_SUITE=newIntSet[K[K[K[K[K[K[K[K[KaddINt[K[KntSet
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=newIntSet valgrind [K-tests
==58955== Memcheck, a memory error detector
==58955== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==58955== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==58955== Command: ./tests
==58955== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==58955== 
==58955== HEAP SUMMARY:
==58955==     in use at exit: 16 bytes in 1 blocks
==58955==   total heap usage: 222 allocs, 221 frees, 19,469 bytes allocated
==58955== 
==58955== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==58955==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==58955==    by 0x10D4C0: newIntSet (int-set.c:24)
==58955==    by 0x10A559: newIntSetAndFree (tests.c:13)
==58955==    by 0x10FCEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==58955==    by 0x1100D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==58955==    by 0x10D482: main (tests.c:567)
==58955== 
==58955== LEAK SUMMARY:
==58955==    definitely lost: 16 bytes in 1 blocks
==58955==    indirectly lost: 0 bytes in 0 blocks
==58955==      possibly lost: 0 bytes in 0 blocks
==58955==    still reachable: 0 bytes in 0 blocks
==58955==         suppressed: 0 bytes in 0 blocks
==58955== 
==58955== For lists of detected and suppressed errors, rerun with: -s
==58955== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet valgrind-tests[15PaddIntSetclear[Kmake -f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:129:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  129 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:144:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  144 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:72:19:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KnewNode[m[Kâ€™ may be used uninitialized in this function [[01;35m[K-Wmaybe-uninitialized[m[K]
   72 |     [01;35m[KnewNode->data = element[m[K;
      |     [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetnewIntSet valgrind-tests[15PaddIntSet
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetnewIntSet valgrind-tests[15PaddIntSetclear[Kmake -f tests.make CK_SUITE=newIntSet
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSetaddIntSetnewIntSetaddIntSet
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetnewIntSetaddIntSetnewIntSet
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSetaddIntSetnewIntSetaddIntSetnewIntSet valgrind-tests
==59507== Memcheck, a memory error detector
==59507== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==59507== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==59507== Command: ./tests
==59507== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==59507== 
==59507== HEAP SUMMARY:
==59507==     in use at exit: 0 bytes in 0 blocks
==59507==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==59507== 
==59507== All heap blocks were freed -- no leaks are possible
==59507== 
==59507== For lists of detected and suppressed errors, rerun with: -s
==59507== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet valgrind-tests[KaddIntSet
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet[Kmake -f tests.make CK_SUITE=addIntSet[Kmake -f tests.make CK_SUITE=addIntSet[Kmake -f tests.make CK_SUITE=addIntSet[Kmake -f tests.make CK_SUITE=addIntSetnewIntSet valgrind-tests[15PaddIntSet
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetnewIntSet valgrind-tests[15PaddIntSetnewIntSet valgrind-tests[1P[1P[1P[1@a[1@d[1@d
==59860== Memcheck, a memory error detector
==59860== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==59860== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==59860== Command: ./tests
==59860== 
Running suite(s): addIntSet
==59860== Invalid read of size 8
==59860==    at 0x10D51A: isInIntSet (int-set.c:41)
==59860==    by 0x10D563: addIntSet (int-set.c:67)
==59860==    by 0x10A6A8: addElement (tests.c:35)
==59860==    by 0x10FCFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==59860==    by 0x1100E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==59860==    by 0x10D482: main (tests.c:567)
==59860==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==59860== 
==59860== 
==59860== Process terminating with default action of signal 11 (SIGSEGV)
==59860==  Access not within mapped region at address 0x8
==59860==    at 0x10D51A: isInIntSet (int-set.c:41)
==59860==    by 0x10D563: addIntSet (int-set.c:67)
==59860==    by 0x10A6A8: addElement (tests.c:35)
==59860==    by 0x10FCFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==59860==    by 0x1100E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==59860==    by 0x10D482: main (tests.c:567)
==59860==  If you believe this happened as a result of a stack
==59860==  overflow in your program's main thread (unlikely but
==59860==  possible), you can try to increase the size of the
==59860==  main thread stack using the --main-stacksize= flag.
==59860==  The main thread stack size used in this run was 8388608.
==59860== 
==59860== HEAP SUMMARY:
==59860==     in use at exit: 4,820 bytes in 186 blocks
==59860==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==59860== 
==59860== LEAK SUMMARY:
==59860==    definitely lost: 0 bytes in 0 blocks
==59860==    indirectly lost: 0 bytes in 0 blocks
==59860==      possibly lost: 0 bytes in 0 blocks
==59860==    still reachable: 4,820 bytes in 186 blocks
==59860==         suppressed: 0 bytes in 0 blocks
==59860== Reachable blocks (those to which a pointer was found) are not shown.
==59860== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==59860== 
==59860== For lists of detected and suppressed errors, rerun with: -s
==59860== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[KnewIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:129:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  129 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:144:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  144 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==60053== Memcheck, a memory error detector
==60053== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==60053== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==60053== Command: ./tests
==60053== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==60053== 
==60053== HEAP SUMMARY:
==60053==     in use at exit: 0 bytes in 0 blocks
==60053==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==60053== 
==60053== All heap blocks were freed -- no leaks are possible
==60053== 
==60053== For lists of detected and suppressed errors, rerun with: -s
==60053== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet valgrind-testsadd[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==60113== Memcheck, a memory error detector
==60113== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==60113== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==60113== Command: ./tests
==60113== 
Running suite(s): addIntSet
==60113== Invalid read of size 8
==60113==    at 0x10D51A: isInIntSet (int-set.c:41)
==60113==    by 0x10D572: addIntSet (int-set.c:67)
==60113==    by 0x10A6A8: addElement (tests.c:35)
==60113==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==60113==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==60113==    by 0x10D482: main (tests.c:567)
==60113==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==60113== 
==60113== 
==60113== Process terminating with default action of signal 11 (SIGSEGV)
==60113==  Access not within mapped region at address 0x8
==60113==    at 0x10D51A: isInIntSet (int-set.c:41)
==60113==    by 0x10D572: addIntSet (int-set.c:67)
==60113==    by 0x10A6A8: addElement (tests.c:35)
==60113==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==60113==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==60113==    by 0x10D482: main (tests.c:567)
==60113==  If you believe this happened as a result of a stack
==60113==  overflow in your program's main thread (unlikely but
==60113==  possible), you can try to increase the size of the
==60113==  main thread stack using the --main-stacksize= flag.
==60113==  The main thread stack size used in this run was 8388608.
==60113== 
==60113== HEAP SUMMARY:
==60113==     in use at exit: 4,820 bytes in 186 blocks
==60113==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==60113== 
==60113== LEAK SUMMARY:
==60113==    definitely lost: 0 bytes in 0 blocks
==60113==    indirectly lost: 0 bytes in 0 blocks
==60113==      possibly lost: 0 bytes in 0 blocks
==60113==    still reachable: 4,820 bytes in 186 blocks
==60113==         suppressed: 0 bytes in 0 blocks
==60113== Reachable blocks (those to which a pointer was found) are not shown.
==60113== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==60113== 
==60113== For lists of detected and suppressed errors, rerun with: -s
==60113== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet valgrind-testsnew[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cadd[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KnewIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:129:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  129 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:144:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  144 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSet[Kmake clae[K[Kean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:145:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  145 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSet[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kclean
make: *** No rule to make target 'clean'.  Stop.
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make cleanCK_SUITE=addIntSet
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clea

Command 'clea' not found, did you mean:

  command 'clex' from deb clex (4.6.patch8-1)
  command 'clear' from deb ncurses-bin (6.2-0ubuntu2)
  command 'cleo' from deb cleo (0.004-2)

Try: sudo apt install <deb name>

josh@machine:~/Documents/CS220/prj2-sol$ cleae[K[Kar
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kclear[Kmake clean-f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:145:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  145 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSetclear[K[Kclearmake -f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:142:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  142 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSet[Kmake -f tests.make CK_SUITE=addIntSetclear[K
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ black[K[K[K[K[Kclearmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:147:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  147 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:147:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  147 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:147:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  147 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSetclear[K[Kmake clean-f tests.make CK_SUITE=addIntSetclean[KCK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSetclean[KCK_SUITE=addIntSetclean[K[6Pclearmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSetclear[Kmake -f tests.make CK_SUITE=addIntSet - [K[Kvalgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:147:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  147 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==61723== Memcheck, a memory error detector
==61723== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==61723== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==61723== Command: ./tests
==61723== 
Running suite(s): addIntSet
==61723== Invalid read of size 8
==61723==    at 0x10D51A: isInIntSet (int-set.c:41)
==61723==    by 0x10D572: addIntSet (int-set.c:67)
==61723==    by 0x10A6A8: addElement (tests.c:35)
==61723==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==61723==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==61723==    by 0x10D482: main (tests.c:567)
==61723==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==61723== 
==61723== 
==61723== Process terminating with default action of signal 11 (SIGSEGV)
==61723==  Access not within mapped region at address 0x8
==61723==    at 0x10D51A: isInIntSet (int-set.c:41)
==61723==    by 0x10D572: addIntSet (int-set.c:67)
==61723==    by 0x10A6A8: addElement (tests.c:35)
==61723==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==61723==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==61723==    by 0x10D482: main (tests.c:567)
==61723==  If you believe this happened as a result of a stack
==61723==  overflow in your program's main thread (unlikely but
==61723==  possible), you can try to increase the size of the
==61723==  main thread stack using the --main-stacksize= flag.
==61723==  The main thread stack size used in this run was 8388608.
==61723== 
==61723== HEAP SUMMARY:
==61723==     in use at exit: 4,820 bytes in 186 blocks
==61723==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==61723== 
==61723== LEAK SUMMARY:
==61723==    definitely lost: 0 bytes in 0 blocks
==61723==    indirectly lost: 0 bytes in 0 blocks
==61723==      possibly lost: 0 bytes in 0 blocks
==61723==    still reachable: 4,820 bytes in 186 blocks
==61723==         suppressed: 0 bytes in 0 blocks
==61723== Reachable blocks (those to which a pointer was found) are not shown.
==61723== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==61723== 
==61723== For lists of detected and suppressed errors, rerun with: -s
==61723== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kmake clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:151:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  151 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==61924== Memcheck, a memory error detector
==61924== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==61924== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==61924== Command: ./tests
==61924== 
Running suite(s): addIntSet
==61924== Invalid read of size 8
==61924==    at 0x10D52A: isInIntSet (int-set.c:41)
==61924==    by 0x10D58E: addIntSet (int-set.c:71)
==61924==    by 0x10A6A8: addElement (tests.c:35)
==61924==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==61924==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==61924==    by 0x10D482: main (tests.c:567)
==61924==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==61924== 
==61924== 
==61924== Process terminating with default action of signal 11 (SIGSEGV)
==61924==  Access not within mapped region at address 0x8
==61924==    at 0x10D52A: isInIntSet (int-set.c:41)
==61924==    by 0x10D58E: addIntSet (int-set.c:71)
==61924==    by 0x10A6A8: addElement (tests.c:35)
==61924==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==61924==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==61924==    by 0x10D482: main (tests.c:567)
==61924==  If you believe this happened as a result of a stack
==61924==  overflow in your program's main thread (unlikely but
==61924==  possible), you can try to increase the size of the
==61924==  main thread stack using the --main-stacksize= flag.
==61924==  The main thread stack size used in this run was 8388608.
==61924== 
==61924== HEAP SUMMARY:
==61924==     in use at exit: 4,820 bytes in 186 blocks
==61924==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==61924== 
==61924== LEAK SUMMARY:
==61924==    definitely lost: 0 bytes in 0 blocks
==61924==    indirectly lost: 0 bytes in 0 blocks
==61924==      possibly lost: 0 bytes in 0 blocks
==61924==    still reachable: 4,820 bytes in 186 blocks
==61924==         suppressed: 0 bytes in 0 blocks
==61924== Reachable blocks (those to which a pointer was found) are not shown.
==61924== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==61924== 
==61924== For lists of detected and suppressed errors, rerun with: -s
==61924== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:152:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  152 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==62078== Memcheck, a memory error detector
==62078== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==62078== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==62078== Command: ./tests
==62078== 
Running suite(s): addIntSet
==62078== Invalid read of size 8
==62078==    at 0x10D536: isInIntSet (int-set.c:41)
==62078==    by 0x10D5A6: addIntSet (int-set.c:72)
==62078==    by 0x10A6A8: addElement (tests.c:35)
==62078==    by 0x10FD4A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62078==    by 0x110136: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62078==    by 0x10D482: main (tests.c:567)
==62078==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==62078== 
==62078== 
==62078== Process terminating with default action of signal 11 (SIGSEGV)
==62078==  Access not within mapped region at address 0x8
==62078==    at 0x10D536: isInIntSet (int-set.c:41)
==62078==    by 0x10D5A6: addIntSet (int-set.c:72)
==62078==    by 0x10A6A8: addElement (tests.c:35)
==62078==    by 0x10FD4A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62078==    by 0x110136: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62078==    by 0x10D482: main (tests.c:567)
==62078==  If you believe this happened as a result of a stack
==62078==  overflow in your program's main thread (unlikely but
==62078==  possible), you can try to increase the size of the
==62078==  main thread stack using the --main-stacksize= flag.
==62078==  The main thread stack size used in this run was 8388608.
==62078== 
==62078== HEAP SUMMARY:
==62078==     in use at exit: 4,820 bytes in 186 blocks
==62078==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==62078== 
==62078== LEAK SUMMARY:
==62078==    definitely lost: 0 bytes in 0 blocks
==62078==    indirectly lost: 0 bytes in 0 blocks
==62078==      possibly lost: 0 bytes in 0 blocks
==62078==    still reachable: 4,820 bytes in 186 blocks
==62078==         suppressed: 0 bytes in 0 blocks
==62078== Reachable blocks (those to which a pointer was found) are not shown.
==62078== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==62078== 
==62078== For lists of detected and suppressed errors, rerun with: -s
==62078== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet valgrind-tests
==62134== Memcheck, a memory error detector
==62134== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==62134== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==62134== Command: ./tests
==62134== 
Running suite(s): addIntSet
==62134== Invalid read of size 8
==62134==    at 0x10D536: isInIntSet (int-set.c:41)
==62134==    by 0x10D5A6: addIntSet (int-set.c:72)
==62134==    by 0x10A6A8: addElement (tests.c:35)
==62134==    by 0x10FD4A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62134==    by 0x110136: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62134==    by 0x10D482: main (tests.c:567)
==62134==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==62134== 
==62134== 
==62134== Process terminating with default action of signal 11 (SIGSEGV)
==62134==  Access not within mapped region at address 0x8
==62134==    at 0x10D536: isInIntSet (int-set.c:41)
==62134==    by 0x10D5A6: addIntSet (int-set.c:72)
==62134==    by 0x10A6A8: addElement (tests.c:35)
==62134==    by 0x10FD4A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62134==    by 0x110136: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62134==    by 0x10D482: main (tests.c:567)
==62134==  If you believe this happened as a result of a stack
==62134==  overflow in your program's main thread (unlikely but
==62134==  possible), you can try to increase the size of the
==62134==  main thread stack using the --main-stacksize= flag.
==62134==  The main thread stack size used in this run was 8388608.
==62134== 
==62134== HEAP SUMMARY:
==62134==     in use at exit: 4,820 bytes in 186 blocks
==62134==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==62134== 
==62134== LEAK SUMMARY:
==62134==    definitely lost: 0 bytes in 0 blocks
==62134==    indirectly lost: 0 bytes in 0 blocks
==62134==      possibly lost: 0 bytes in 0 blocks
==62134==    still reachable: 4,820 bytes in 186 blocks
==62134==         suppressed: 0 bytes in 0 blocks
==62134== Reachable blocks (those to which a pointer was found) are not shown.
==62134== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==62134== 
==62134== For lists of detected and suppressed errors, rerun with: -s
==62134== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:147:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  147 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==62228== Memcheck, a memory error detector
==62228== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==62228== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==62228== Command: ./tests
==62228== 
Running suite(s): addIntSet
==62228== Invalid read of size 8
==62228==    at 0x10D51A: isInIntSet (int-set.c:41)
==62228==    by 0x10D572: addIntSet (int-set.c:67)
==62228==    by 0x10A6A8: addElement (tests.c:35)
==62228==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62228==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62228==    by 0x10D482: main (tests.c:567)
==62228==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==62228== 
==62228== 
==62228== Process terminating with default action of signal 11 (SIGSEGV)
==62228==  Access not within mapped region at address 0x8
==62228==    at 0x10D51A: isInIntSet (int-set.c:41)
==62228==    by 0x10D572: addIntSet (int-set.c:67)
==62228==    by 0x10A6A8: addElement (tests.c:35)
==62228==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62228==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62228==    by 0x10D482: main (tests.c:567)
==62228==  If you believe this happened as a result of a stack
==62228==  overflow in your program's main thread (unlikely but
==62228==  possible), you can try to increase the size of the
==62228==  main thread stack using the --main-stacksize= flag.
==62228==  The main thread stack size used in this run was 8388608.
==62228== 
==62228== HEAP SUMMARY:
==62228==     in use at exit: 4,820 bytes in 186 blocks
==62228==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==62228== 
==62228== LEAK SUMMARY:
==62228==    definitely lost: 0 bytes in 0 blocks
==62228==    indirectly lost: 0 bytes in 0 blocks
==62228==      possibly lost: 0 bytes in 0 blocks
==62228==    still reachable: 4,820 bytes in 186 blocks
==62228==         suppressed: 0 bytes in 0 blocks
==62228== Reachable blocks (those to which a pointer was found) are not shown.
==62228== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==62228== 
==62228== For lists of detected and suppressed errors, rerun with: -s
==62228== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make tes[K[K[Kclean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:148:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  148 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==62362== Memcheck, a memory error detector
==62362== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==62362== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==62362== Command: ./tests
==62362== 
Running suite(s): addIntSet
==62362== Invalid read of size 8
==62362==    at 0x10D526: isInIntSet (int-set.c:41)
==62362==    by 0x10D57E: addIntSet (int-set.c:68)
==62362==    by 0x10A6A8: addElement (tests.c:35)
==62362==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62362==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62362==    by 0x10D482: main (tests.c:567)
==62362==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==62362== 
==62362== 
==62362== Process terminating with default action of signal 11 (SIGSEGV)
==62362==  Access not within mapped region at address 0x8
==62362==    at 0x10D526: isInIntSet (int-set.c:41)
==62362==    by 0x10D57E: addIntSet (int-set.c:68)
==62362==    by 0x10A6A8: addElement (tests.c:35)
==62362==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62362==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62362==    by 0x10D482: main (tests.c:567)
==62362==  If you believe this happened as a result of a stack
==62362==  overflow in your program's main thread (unlikely but
==62362==  possible), you can try to increase the size of the
==62362==  main thread stack using the --main-stacksize= flag.
==62362==  The main thread stack size used in this run was 8388608.
==62362== 
==62362== HEAP SUMMARY:
==62362==     in use at exit: 4,820 bytes in 186 blocks
==62362==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==62362== 
==62362== LEAK SUMMARY:
==62362==    definitely lost: 0 bytes in 0 blocks
==62362==    indirectly lost: 0 bytes in 0 blocks
==62362==      possibly lost: 0 bytes in 0 blocks
==62362==    still reachable: 4,820 bytes in 186 blocks
==62362==         suppressed: 0 bytes in 0 blocks
==62362== Reachable blocks (those to which a pointer was found) are not shown.
==62362== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==62362== 
==62362== For lists of detected and suppressed errors, rerun with: -s
==62362== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kt
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:148:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  148 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSetclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests
==62526== Memcheck, a memory error detector
==62526== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==62526== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==62526== Command: ./tests
==62526== 
Running suite(s): addIntSet
==62526== Invalid read of size 8
==62526==    at 0x10D526: isInIntSet (int-set.c:41)
==62526==    by 0x10D57E: addIntSet (int-set.c:68)
==62526==    by 0x10A6A8: addElement (tests.c:35)
==62526==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62526==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62526==    by 0x10D482: main (tests.c:567)
==62526==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==62526== 
==62526== 
==62526== Process terminating with default action of signal 11 (SIGSEGV)
==62526==  Access not within mapped region at address 0x8
==62526==    at 0x10D526: isInIntSet (int-set.c:41)
==62526==    by 0x10D57E: addIntSet (int-set.c:68)
==62526==    by 0x10A6A8: addElement (tests.c:35)
==62526==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==62526==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==62526==    by 0x10D482: main (tests.c:567)
==62526==  If you believe this happened as a result of a stack
==62526==  overflow in your program's main thread (unlikely but
==62526==  possible), you can try to increase the size of the
==62526==  main thread stack using the --main-stacksize= flag.
==62526==  The main thread stack size used in this run was 8388608.
==62526== 
==62526== HEAP SUMMARY:
==62526==     in use at exit: 4,820 bytes in 186 blocks
==62526==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==62526== 
==62526== LEAK SUMMARY:
==62526==    definitely lost: 0 bytes in 0 blocks
==62526==    indirectly lost: 0 bytes in 0 blocks
==62526==      possibly lost: 0 bytes in 0 blocks
==62526==    still reachable: 4,820 bytes in 186 blocks
==62526==         suppressed: 0 bytes in 0 blocks
==62526== Reachable blocks (those to which a pointer was found) are not shown.
==62526== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==62526== 
==62526== For lists of detected and suppressed errors, rerun with: -s
==62526== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KstepIntSetIterator[m[Kâ€™:
[01m[Kint-set.c:148:1:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  148 | [01;35m[K}[m[K
      | [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==63010== Memcheck, a memory error detector
==63010== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63010== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63010== Command: ./tests
==63010== 
Running suite(s): addIntSet
==63010== Invalid read of size 8
==63010==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63010==    by 0x10D582: addIntSet (int-set.c:68)
==63010==    by 0x10A6A8: addElement (tests.c:35)
==63010==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63010==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63010==    by 0x10D482: main (tests.c:567)
==63010==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63010== 
==63010== 
==63010== Process terminating with default action of signal 11 (SIGSEGV)
==63010==  Access not within mapped region at address 0x8
==63010==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63010==    by 0x10D582: addIntSet (int-set.c:68)
==63010==    by 0x10A6A8: addElement (tests.c:35)
==63010==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63010==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63010==    by 0x10D482: main (tests.c:567)
==63010==  If you believe this happened as a result of a stack
==63010==  overflow in your program's main thread (unlikely but
==63010==  possible), you can try to increase the size of the
==63010==  main thread stack using the --main-stacksize= flag.
==63010==  The main thread stack size used in this run was 8388608.
==63010== 
==63010== HEAP SUMMARY:
==63010==     in use at exit: 4,820 bytes in 186 blocks
==63010==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63010== 
==63010== LEAK SUMMARY:
==63010==    definitely lost: 0 bytes in 0 blocks
==63010==    indirectly lost: 0 bytes in 0 blocks
==63010==      possibly lost: 0 bytes in 0 blocks
==63010==    still reachable: 4,820 bytes in 186 blocks
==63010==         suppressed: 0 bytes in 0 blocks
==63010== Reachable blocks (those to which a pointer was found) are not shown.
==63010== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63010== 
==63010== For lists of detected and suppressed errors, rerun with: -s
==63010== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==63104== Memcheck, a memory error detector
==63104== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63104== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63104== Command: ./tests
==63104== 
Running suite(s): addIntSet
==63104== Invalid read of size 8
==63104==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63104==    by 0x10D582: addIntSet (int-set.c:68)
==63104==    by 0x10A6A8: addElement (tests.c:35)
==63104==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63104==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63104==    by 0x10D482: main (tests.c:567)
==63104==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63104== 
==63104== 
==63104== Process terminating with default action of signal 11 (SIGSEGV)
==63104==  Access not within mapped region at address 0x8
==63104==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63104==    by 0x10D582: addIntSet (int-set.c:68)
==63104==    by 0x10A6A8: addElement (tests.c:35)
==63104==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63104==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63104==    by 0x10D482: main (tests.c:567)
==63104==  If you believe this happened as a result of a stack
==63104==  overflow in your program's main thread (unlikely but
==63104==  possible), you can try to increase the size of the
==63104==  main thread stack using the --main-stacksize= flag.
==63104==  The main thread stack size used in this run was 8388608.
==63104== 
==63104== HEAP SUMMARY:
==63104==     in use at exit: 4,820 bytes in 186 blocks
==63104==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63104== 
==63104== LEAK SUMMARY:
==63104==    definitely lost: 0 bytes in 0 blocks
==63104==    indirectly lost: 0 bytes in 0 blocks
==63104==      possibly lost: 0 bytes in 0 blocks
==63104==    still reachable: 4,820 bytes in 186 blocks
==63104==         suppressed: 0 bytes in 0 blocks
==63104== Reachable blocks (those to which a pointer was found) are not shown.
==63104== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63104== 
==63104== For lists of detected and suppressed errors, rerun with: -s
==63104== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean[5Pclearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==63178== Memcheck, a memory error detector
==63178== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63178== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63178== Command: ./tests
==63178== 
Running suite(s): addIntSet
==63178== Invalid read of size 8
==63178==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63178==    by 0x10D582: addIntSet (int-set.c:68)
==63178==    by 0x10A6A8: addElement (tests.c:35)
==63178==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63178==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63178==    by 0x10D482: main (tests.c:567)
==63178==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63178== 
==63178== 
==63178== Process terminating with default action of signal 11 (SIGSEGV)
==63178==  Access not within mapped region at address 0x8
==63178==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63178==    by 0x10D582: addIntSet (int-set.c:68)
==63178==    by 0x10A6A8: addElement (tests.c:35)
==63178==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63178==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63178==    by 0x10D482: main (tests.c:567)
==63178==  If you believe this happened as a result of a stack
==63178==  overflow in your program's main thread (unlikely but
==63178==  possible), you can try to increase the size of the
==63178==  main thread stack using the --main-stacksize= flag.
==63178==  The main thread stack size used in this run was 8388608.
==63178== 
==63178== HEAP SUMMARY:
==63178==     in use at exit: 4,820 bytes in 186 blocks
==63178==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63178== 
==63178== LEAK SUMMARY:
==63178==    definitely lost: 0 bytes in 0 blocks
==63178==    indirectly lost: 0 bytes in 0 blocks
==63178==      possibly lost: 0 bytes in 0 blocks
==63178==    still reachable: 4,820 bytes in 186 blocks
==63178==         suppressed: 0 bytes in 0 blocks
==63178== Reachable blocks (those to which a pointer was found) are not shown.
==63178== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63178== 
==63178== For lists of detected and suppressed errors, rerun with: -s
==63178== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==63289== Memcheck, a memory error detector
==63289== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63289== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63289== Command: ./tests
==63289== 
Running suite(s): addIntSet
==63289== Invalid read of size 8
==63289==    at 0x10D502: isInIntSet (int-set.c:39)
==63289==    by 0x10D592: addIntSet (int-set.c:69)
==63289==    by 0x10A6A8: addElement (tests.c:35)
==63289==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63289==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63289==    by 0x10D482: main (tests.c:567)
==63289==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63289== 
==63289== 
==63289== Process terminating with default action of signal 11 (SIGSEGV)
==63289==  Access not within mapped region at address 0x8
==63289==    at 0x10D502: isInIntSet (int-set.c:39)
==63289==    by 0x10D592: addIntSet (int-set.c:69)
==63289==    by 0x10A6A8: addElement (tests.c:35)
==63289==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63289==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63289==    by 0x10D482: main (tests.c:567)
==63289==  If you believe this happened as a result of a stack
==63289==  overflow in your program's main thread (unlikely but
==63289==  possible), you can try to increase the size of the
==63289==  main thread stack using the --main-stacksize= flag.
==63289==  The main thread stack size used in this run was 8388608.
==63289== 
==63289== HEAP SUMMARY:
==63289==     in use at exit: 4,820 bytes in 186 blocks
==63289==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63289== 
==63289== LEAK SUMMARY:
==63289==    definitely lost: 0 bytes in 0 blocks
==63289==    indirectly lost: 0 bytes in 0 blocks
==63289==      possibly lost: 0 bytes in 0 blocks
==63289==    still reachable: 4,820 bytes in 186 blocks
==63289==         suppressed: 0 bytes in 0 blocks
==63289== Reachable blocks (those to which a pointer was found) are not shown.
==63289== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63289== 
==63289== For lists of detected and suppressed errors, rerun with: -s
==63289== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet valgrind-tests
==63342== Memcheck, a memory error detector
==63342== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63342== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63342== Command: ./tests
==63342== 
Running suite(s): addIntSet
==63342== Invalid read of size 8
==63342==    at 0x10D502: isInIntSet (int-set.c:39)
==63342==    by 0x10D592: addIntSet (int-set.c:69)
==63342==    by 0x10A6A8: addElement (tests.c:35)
==63342==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63342==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63342==    by 0x10D482: main (tests.c:567)
==63342==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63342== 
==63342== 
==63342== Process terminating with default action of signal 11 (SIGSEGV)
==63342==  Access not within mapped region at address 0x8
==63342==    at 0x10D502: isInIntSet (int-set.c:39)
==63342==    by 0x10D592: addIntSet (int-set.c:69)
==63342==    by 0x10A6A8: addElement (tests.c:35)
==63342==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63342==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63342==    by 0x10D482: main (tests.c:567)
==63342==  If you believe this happened as a result of a stack
==63342==  overflow in your program's main thread (unlikely but
==63342==  possible), you can try to increase the size of the
==63342==  main thread stack using the --main-stacksize= flag.
==63342==  The main thread stack size used in this run was 8388608.
==63342== 
==63342== HEAP SUMMARY:
==63342==     in use at exit: 4,820 bytes in 186 blocks
==63342==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63342== 
==63342== LEAK SUMMARY:
==63342==    definitely lost: 0 bytes in 0 blocks
==63342==    indirectly lost: 0 bytes in 0 blocks
==63342==      possibly lost: 0 bytes in 0 blocks
==63342==    still reachable: 4,820 bytes in 186 blocks
==63342==         suppressed: 0 bytes in 0 blocks
==63342== Reachable blocks (those to which a pointer was found) are not shown.
==63342== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63342== 
==63342== For lists of detected and suppressed errors, rerun with: -s
==63342== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make c[K[K[K[K[K[Kclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean[5Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:39:54:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before â€˜[01m[K;[m[Kâ€™ token
   39 |     Node *currNode = malloc(tempHead->dummyNode->next[01;31m[K;[m[K
      |                                                      [01;31m[K^[m[K
      |                                                      [32m[K)[m[K
[01m[Kint-set.c:39:48:[m[K [01;35m[Kwarning: [m[Kpassing argument 1 of â€˜[01m[Kmalloc[m[Kâ€™ makes integer from pointer without a cast [[01;35m[K-Wint-conversion[m[K]
   39 |     Node *currNode = malloc([01;35m[KtempHead->dummyNode->next[m[K;
      |                             [01;35m[K~~~~~~~~~~~~~~~~~~~^~~~~~[m[K
      |                                                [01;35m[K|[m[K
      |                                                [01;35m[Kstruct NodeStruct *[m[K
In file included from [01m[Kint-set.h:4[m[K,
                 from [01m[Kint-set.c:1[m[K:
[01m[K/usr/include/stdlib.h:539:14:[m[K [01;36m[Knote: [m[Kexpected â€˜[01m[Ksize_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} but argument is of type â€˜[01m[Kstruct NodeStruct *[m[Kâ€™
  539 | extern void *[01;36m[Kmalloc[m[K (size_t __size) __THROW __attribute_malloc__
      |              [01;36m[K^~~~~~[m[K
[01m[Kint-set.c:56:1:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K,[m[Kâ€™ or â€˜[01m[K;[m[Kâ€™ before â€˜[01m[K}[m[Kâ€™ token
   56 | [01;31m[K}[m[K
      | [01;31m[K^[m[K
[01m[Kint-set.c:153:1:[m[K [01;31m[Kerror: [m[Kexpected declaration or statement at end of input
  153 | [01;31m[K}[m[K
      | [01;31m[K^[m[K
[01m[Kint-set.c:39:11:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[KcurrNode[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
   39 |     Node *[01;35m[KcurrNode[m[K = malloc(tempHead->dummyNode->next;
      |           [01;35m[K^~~~~~~~[m[K
[01m[Kint-set.c:153:[m[K [01;35m[Kwarning: [m[Kcontrol reaches end of non-void function [[01;35m[K-Wreturn-type[m[K]
  153 | }
      | 
At top level:
[01m[Kint-set.c:149:13:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KstepIntSetIterator[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
  149 | const void *[01;35m[KstepIntSetIterator[m[K(const void *intSetIterator)
      |             [01;35m[K^~~~~~~~~~~~~~~~~~[m[K
[01m[Kint-set.c:140:5:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KintSetIteratorElement[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
  140 | int [01;35m[KintSetIteratorElement[m[K(const void *intSetIterator)
      |     [01;35m[K^~~~~~~~~~~~~~~~~~~~~[m[K
[01m[Kint-set.c:133:13:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KnewIntSetIterator[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
  133 | const void *[01;35m[KnewIntSetIterator[m[K(const void *intSet)
      |             [01;35m[K^~~~~~~~~~~~~~~~~[m[K
[01m[Kint-set.c:125:6:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KfreeIntSet[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
  125 | void [01;35m[KfreeIntSet[m[K(void *intSet)
      |      [01;35m[K^~~~~~~~~~[m[K
[01m[Kint-set.c:118:5:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KintersectionIntSet[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
  118 | int [01;35m[KintersectionIntSet[m[K(void *intSetA, void *intSetB)
      |     [01;35m[K^~~~~~~~~~~~~~~~~~[m[K
[01m[Kint-set.c:109:5:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KunionIntSet[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
  109 | int [01;35m[KunionIntSet[m[K(void *intSetA, void *intSetB)
      |     [01;35m[K^~~~~~~~~~~[m[K
[01m[Kint-set.c:91:5:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KaddMultipleIntSet[m[Kâ€™ defined but not used [[01;35m[K-Wunused-function[m[K]
   91 | int [01;35m[KaddMultipleIntSet[m[K(void *intSet, const int elements[], int nElements)
      |     [01;35m[K^~~~~~~~~~~~~~~~~[m[K
make: *** [<builtin>: int-set.o] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kc;e[K[Klear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:39:48:[m[K [01;35m[Kwarning: [m[Kpassing argument 1 of â€˜[01m[Kmalloc[m[Kâ€™ makes integer from pointer without a cast [[01;35m[K-Wint-conversion[m[K]
   39 |     Node *currNode = malloc([01;35m[KtempHead->dummyNode->next[m[K);
      |                             [01;35m[K~~~~~~~~~~~~~~~~~~~^~~~~~[m[K
      |                                                [01;35m[K|[m[K
      |                                                [01;35m[Kstruct NodeStruct *[m[K
In file included from [01m[Kint-set.h:4[m[K,
                 from [01m[Kint-set.c:1[m[K:
[01m[K/usr/include/stdlib.h:539:14:[m[K [01;36m[Knote: [m[Kexpected â€˜[01m[Ksize_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} but argument is of type â€˜[01m[Kstruct NodeStruct *[m[Kâ€™
  539 | extern void *[01;36m[Kmalloc[m[K (size_t __size) __THROW __attribute_malloc__
      |              [01;36m[K^~~~~~[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==63606== Memcheck, a memory error detector
==63606== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63606== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63606== Command: ./tests
==63606== 
Running suite(s): addIntSet
==63606== Invalid read of size 8
==63606==    at 0x10D502: isInIntSet (int-set.c:39)
==63606==    by 0x10D5BE: addIntSet (int-set.c:72)
==63606==    by 0x10A6A8: addElement (tests.c:35)
==63606==    by 0x10FD6A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63606==    by 0x110156: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63606==    by 0x10D482: main (tests.c:567)
==63606==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63606== 
==63606== 
==63606== Process terminating with default action of signal 11 (SIGSEGV)
==63606==  Access not within mapped region at address 0x8
==63606==    at 0x10D502: isInIntSet (int-set.c:39)
==63606==    by 0x10D5BE: addIntSet (int-set.c:72)
==63606==    by 0x10A6A8: addElement (tests.c:35)
==63606==    by 0x10FD6A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63606==    by 0x110156: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63606==    by 0x10D482: main (tests.c:567)
==63606==  If you believe this happened as a result of a stack
==63606==  overflow in your program's main thread (unlikely but
==63606==  possible), you can try to increase the size of the
==63606==  main thread stack using the --main-stacksize= flag.
==63606==  The main thread stack size used in this run was 8388608.
==63606== 
==63606== HEAP SUMMARY:
==63606==     in use at exit: 4,820 bytes in 186 blocks
==63606==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63606== 
==63606== LEAK SUMMARY:
==63606==    definitely lost: 0 bytes in 0 blocks
==63606==    indirectly lost: 0 bytes in 0 blocks
==63606==      possibly lost: 0 bytes in 0 blocks
==63606==    still reachable: 4,820 bytes in 186 blocks
==63606==         suppressed: 0 bytes in 0 blocks
==63606== Reachable blocks (those to which a pointer was found) are not shown.
==63606== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63606== 
==63606== For lists of detected and suppressed errors, rerun with: -s
==63606== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make [K[K[K[K[Kclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==63761== Memcheck, a memory error detector
==63761== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==63761== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==63761== Command: ./tests
==63761== 
Running suite(s): addIntSet
==63761== Invalid read of size 8
==63761==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63761==    by 0x10D582: addIntSet (int-set.c:68)
==63761==    by 0x10A6A8: addElement (tests.c:35)
==63761==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63761==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63761==    by 0x10D482: main (tests.c:567)
==63761==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==63761== 
==63761== 
==63761== Process terminating with default action of signal 11 (SIGSEGV)
==63761==  Access not within mapped region at address 0x8
==63761==    at 0x10D4FE: isInIntSet (int-set.c:39)
==63761==    by 0x10D582: addIntSet (int-set.c:68)
==63761==    by 0x10A6A8: addElement (tests.c:35)
==63761==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==63761==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==63761==    by 0x10D482: main (tests.c:567)
==63761==  If you believe this happened as a result of a stack
==63761==  overflow in your program's main thread (unlikely but
==63761==  possible), you can try to increase the size of the
==63761==  main thread stack using the --main-stacksize= flag.
==63761==  The main thread stack size used in this run was 8388608.
==63761== 
==63761== HEAP SUMMARY:
==63761==     in use at exit: 4,820 bytes in 186 blocks
==63761==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==63761== 
==63761== LEAK SUMMARY:
==63761==    definitely lost: 0 bytes in 0 blocks
==63761==    indirectly lost: 0 bytes in 0 blocks
==63761==      possibly lost: 0 bytes in 0 blocks
==63761==    still reachable: 4,820 bytes in 186 blocks
==63761==         suppressed: 0 bytes in 0 blocks
==63761== Reachable blocks (those to which a pointer was found) are not shown.
==63761== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==63761== 
==63761== For lists of detected and suppressed errors, rerun with: -s
==63761== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ gdb make -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb [Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb [Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb [Ktests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32mtests[m...
(gdb) b isInIntSet()
Function "isInIntSet()" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) b int-set.c: 35
Breakpoint 1 at [34m0x54df[m: file [32mint-set.c[m, line 36.
(gdb) ls
Undefined command: "ls".  Try "help".
(gdb) fg[K[Kr
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x1ca20, [36melement[m=0) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:39
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) p currNode
$1 = (Node *) [34m0x7ffff7e27b80[m <[33mmain_arena[m>
(gdb) p currNode*currNode(currNodeNcurrNodeocurrNodedcurrNodeecurrNode currNode*currNode)currNode
$2 = {data = 0, next = [34m0x0[m}
(gdb) n\[K

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x1ca20, [36melement[m=0) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:39
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) 

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) g[Kr
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x1ca20, [36melement[m=0) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) p tempHead
$3 = (Header *) [34m0x10[m
(gdb) p currn[KNode
$4 = (Node *) [34m0x7ffff7e27b80[m <[33mmain_arena[m>
(gdb) n
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) np currNodetempHead
$5 = (Header *) [34m0x5555555665b0[m
(gdb) p tempHead[C[C[C[C[C[Cn[Kp currNode
$6 = (Node *) [34m0x7ffff7e27b80[m <[33mmain_arena[m>
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
[33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:39
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) p temo[KpHead->dummyNode
$7 = (Node *) [34m0x0[m
(gdb) p intSet
$8 = (void *) [34m0x5555555665b0[m
(gdb) p ([K*(Header)[K *)tempHead
$9 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) p *(Header *)tempHead[K[K[K[K[K[K[K[KintSet
$10 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) n

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) n[Kb [K[Kd
Delete all breakpoints? (y or n) y
(gdb) b int-Set[K[K[Kset.c: 58
Breakpoint 2 at [34m0x55555555953a[m: file [32mint-set.c[m, line 59.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 2, [33maddIntSet[m ([36mintSet[m=0x7ffff7cdad15 <__libc_calloc+133>, [36melement[m=21845) at [32mint-set.c[m:59
59	{
(gdb) n
61	    if (intSet == NULL)
(gdb) 
65	    Header *tempHead = (Header *)intSet;
(gdb) 
68	    if (isInIntSet(tempHead, element) == 1)
(gdb) p (Header *) [Kins[KtSet
$11 = (Header *) [34m0x5555555665b0[m
(gdb) i b
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   [34m0x000055555555953a[m in [33maddIntSet[m at [32mint-set.c[m:59
	breakpoint already hit 1 time
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
[33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:39
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) 

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) n
The program is not being run.
(gdb) b[Ki b
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   [34m0x000055555555953a[m in [33maddIntSet[m at [32mint-set.c[m:59
	breakpoint already hit 1 time
(gdb) d
Delete all breakpoints? (y or n) y
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Program received signal SIGSEGV, Segmentation fault.
[33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:39
39	    Node *currNode = tempHead->dummyNode->next;
(gdb) w[Ki b
No breakpoints or watchpoints.
(gdb) make[K[K[K[Kq
A debugging session is active.

	Inferior 1 [process 65968] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ gdb testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb tests[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[K
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ cleargdb testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==66276== Memcheck, a memory error detector
==66276== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==66276== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==66276== Command: ./tests
==66276== 
Running suite(s): addIntSet
==66276== Invalid read of size 8
==66276==    at 0x10D526: isInIntSet (int-set.c:41)
==66276==    by 0x10D57E: addIntSet (int-set.c:68)
==66276==    by 0x10A6A8: addElement (tests.c:35)
==66276==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66276==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66276==    by 0x10D482: main (tests.c:567)
==66276==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==66276== 
==66276== 
==66276== Process terminating with default action of signal 11 (SIGSEGV)
==66276==  Access not within mapped region at address 0x8
==66276==    at 0x10D526: isInIntSet (int-set.c:41)
==66276==    by 0x10D57E: addIntSet (int-set.c:68)
==66276==    by 0x10A6A8: addElement (tests.c:35)
==66276==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66276==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66276==    by 0x10D482: main (tests.c:567)
==66276==  If you believe this happened as a result of a stack
==66276==  overflow in your program's main thread (unlikely but
==66276==  possible), you can try to increase the size of the
==66276==  main thread stack using the --main-stacksize= flag.
==66276==  The main thread stack size used in this run was 8388608.
==66276== 
==66276== HEAP SUMMARY:
==66276==     in use at exit: 4,820 bytes in 186 blocks
==66276==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==66276== 
==66276== LEAK SUMMARY:
==66276==    definitely lost: 0 bytes in 0 blocks
==66276==    indirectly lost: 0 bytes in 0 blocks
==66276==      possibly lost: 0 bytes in 0 blocks
==66276==    still reachable: 4,820 bytes in 186 blocks
==66276==         suppressed: 0 bytes in 0 blocks
==66276== Reachable blocks (those to which a pointer was found) are not shown.
==66276== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==66276== 
==66276== For lists of detected and suppressed errors, rerun with: -s
==66276== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==66365== Memcheck, a memory error detector
==66365== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==66365== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==66365== Command: ./tests
==66365== 
Running suite(s): addIntSet
==66365== Invalid read of size 8
==66365==    at 0x10D526: isInIntSet (int-set.c:41)
==66365==    by 0x10D57E: addIntSet (int-set.c:68)
==66365==    by 0x10A6A8: addElement (tests.c:35)
==66365==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66365==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66365==    by 0x10D482: main (tests.c:567)
==66365==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==66365== 
==66365== 
==66365== Process terminating with default action of signal 11 (SIGSEGV)
==66365==  Access not within mapped region at address 0x8
==66365==    at 0x10D526: isInIntSet (int-set.c:41)
==66365==    by 0x10D57E: addIntSet (int-set.c:68)
==66365==    by 0x10A6A8: addElement (tests.c:35)
==66365==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66365==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66365==    by 0x10D482: main (tests.c:567)
==66365==  If you believe this happened as a result of a stack
==66365==  overflow in your program's main thread (unlikely but
==66365==  possible), you can try to increase the size of the
==66365==  main thread stack using the --main-stacksize= flag.
==66365==  The main thread stack size used in this run was 8388608.
==66365== 
==66365== HEAP SUMMARY:
==66365==     in use at exit: 4,820 bytes in 186 blocks
==66365==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==66365== 
==66365== LEAK SUMMARY:
==66365==    definitely lost: 0 bytes in 0 blocks
==66365==    indirectly lost: 0 bytes in 0 blocks
==66365==      possibly lost: 0 bytes in 0 blocks
==66365==    still reachable: 4,820 bytes in 186 blocks
==66365==         suppressed: 0 bytes in 0 blocks
==66365== Reachable blocks (those to which a pointer was found) are not shown.
==66365== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==66365== 
==66365== For lists of detected and suppressed errors, rerun with: -s
==66365== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ ./tests
Running suite(s): IntSet Tests
 newIntSet
 addIntSet
Segmentation fault (core dumped)
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clear./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C./tests[K[2Pclear[Kclear[K[K[K[K[Kmake clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean[5Pclear./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:76:35:[m[K [01;35m[Kwarning: [m[Kassignment to â€˜[01m[Kstruct NodeStruct *[m[Kâ€™ from incompatible pointer type â€˜[01m[KNode **[m[Kâ€™ {aka â€˜[01m[Kstruct NodeStruct **[m[Kâ€™} [[01;35m[K-Wincompatible-pointer-types[m[K]
   76 |         tempHead->dummyNode->next [01;35m[K=[m[K &newNode;
      |                                   [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==66619== Memcheck, a memory error detector
==66619== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==66619== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==66619== Command: ./tests
==66619== 
Running suite(s): addIntSet
==66619== Invalid read of size 8
==66619==    at 0x10D526: isInIntSet (int-set.c:41)
==66619==    by 0x10D57E: addIntSet (int-set.c:68)
==66619==    by 0x10A6A8: addElement (tests.c:35)
==66619==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66619==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66619==    by 0x10D482: main (tests.c:567)
==66619==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==66619== 
==66619== 
==66619== Process terminating with default action of signal 11 (SIGSEGV)
==66619==  Access not within mapped region at address 0x8
==66619==    at 0x10D526: isInIntSet (int-set.c:41)
==66619==    by 0x10D57E: addIntSet (int-set.c:68)
==66619==    by 0x10A6A8: addElement (tests.c:35)
==66619==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66619==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66619==    by 0x10D482: main (tests.c:567)
==66619==  If you believe this happened as a result of a stack
==66619==  overflow in your program's main thread (unlikely but
==66619==  possible), you can try to increase the size of the
==66619==  main thread stack using the --main-stacksize= flag.
==66619==  The main thread stack size used in this run was 8388608.
==66619== 
==66619== HEAP SUMMARY:
==66619==     in use at exit: 4,820 bytes in 186 blocks
==66619==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==66619== 
==66619== LEAK SUMMARY:
==66619==    definitely lost: 0 bytes in 0 blocks
==66619==    indirectly lost: 0 bytes in 0 blocks
==66619==      possibly lost: 0 bytes in 0 blocks
==66619==    still reachable: 4,820 bytes in 186 blocks
==66619==         suppressed: 0 bytes in 0 blocks
==66619== Reachable blocks (those to which a pointer was found) are not shown.
==66619== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==66619== 
==66619== For lists of detected and suppressed errors, rerun with: -s
==66619== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kmake clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:74:23:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KnewNode[m[Kâ€™ may be used uninitialized in this function [[01;35m[K-Wmaybe-uninitialized[m[K]
   74 |         [01;35m[KnewNode->data = element[m[K;
      |         [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==66741== Memcheck, a memory error detector
==66741== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==66741== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==66741== Command: ./tests
==66741== 
Running suite(s): addIntSet
==66741== Invalid read of size 8
==66741==    at 0x10D526: isInIntSet (int-set.c:41)
==66741==    by 0x10D56F: addIntSet (int-set.c:68)
==66741==    by 0x10A6A8: addElement (tests.c:35)
==66741==    by 0x10FD0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66741==    by 0x1100F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66741==    by 0x10D482: main (tests.c:567)
==66741==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==66741== 
==66741== 
==66741== Process terminating with default action of signal 11 (SIGSEGV)
==66741==  Access not within mapped region at address 0x8
==66741==    at 0x10D526: isInIntSet (int-set.c:41)
==66741==    by 0x10D56F: addIntSet (int-set.c:68)
==66741==    by 0x10A6A8: addElement (tests.c:35)
==66741==    by 0x10FD0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==66741==    by 0x1100F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==66741==    by 0x10D482: main (tests.c:567)
==66741==  If you believe this happened as a result of a stack
==66741==  overflow in your program's main thread (unlikely but
==66741==  possible), you can try to increase the size of the
==66741==  main thread stack using the --main-stacksize= flag.
==66741==  The main thread stack size used in this run was 8388608.
==66741== 
==66741== HEAP SUMMARY:
==66741==     in use at exit: 4,820 bytes in 186 blocks
==66741==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==66741== 
==66741== LEAK SUMMARY:
==66741==    definitely lost: 0 bytes in 0 blocks
==66741==    indirectly lost: 0 bytes in 0 blocks
==66741==      possibly lost: 0 bytes in 0 blocks
==66741==    still reachable: 4,820 bytes in 186 blocks
==66741==         suppressed: 0 bytes in 0 blocks
==66741== Reachable blocks (those to which a pointer was found) are not shown.
==66741== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==66741== 
==66741== For lists of detected and suppressed errors, rerun with: -s
==66741== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pclearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:76:23:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[KnewNode[m[Kâ€™ may be used uninitialized in this function [[01;35m[K-Wmaybe-uninitialized[m[K]
   76 |         [01;35m[KnewNode->data = element[m[K;
      |         [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~[m[K
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==67060== Memcheck, a memory error detector
==67060== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==67060== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==67060== Command: ./tests
==67060== 
Running suite(s): addIntSet
==67060== Invalid read of size 8
==67060==    at 0x10D526: isInIntSet (int-set.c:41)
==67060==    by 0x10D579: addIntSet (int-set.c:69)
==67060==    by 0x10A6A8: addElement (tests.c:35)
==67060==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67060==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67060==    by 0x10D482: main (tests.c:567)
==67060==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==67060== 
==67060== 
==67060== Process terminating with default action of signal 11 (SIGSEGV)
==67060==  Access not within mapped region at address 0x8
==67060==    at 0x10D526: isInIntSet (int-set.c:41)
==67060==    by 0x10D579: addIntSet (int-set.c:69)
==67060==    by 0x10A6A8: addElement (tests.c:35)
==67060==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67060==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67060==    by 0x10D482: main (tests.c:567)
==67060==  If you believe this happened as a result of a stack
==67060==  overflow in your program's main thread (unlikely but
==67060==  possible), you can try to increase the size of the
==67060==  main thread stack using the --main-stacksize= flag.
==67060==  The main thread stack size used in this run was 8388608.
==67060== 
==67060== HEAP SUMMARY:
==67060==     in use at exit: 4,824 bytes in 187 blocks
==67060==   total heap usage: 210 allocs, 23 frees, 10,431 bytes allocated
==67060== 
==67060== 4 bytes in 1 blocks are definitely lost in loss record 1 of 187
==67060==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==67060==    by 0x10D568: addIntSet (int-set.c:67)
==67060==    by 0x10A6A8: addElement (tests.c:35)
==67060==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67060==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67060==    by 0x10D482: main (tests.c:567)
==67060== 
==67060== LEAK SUMMARY:
==67060==    definitely lost: 4 bytes in 1 blocks
==67060==    indirectly lost: 0 bytes in 0 blocks
==67060==      possibly lost: 0 bytes in 0 blocks
==67060==    still reachable: 4,820 bytes in 186 blocks
==67060==         suppressed: 0 bytes in 0 blocks
==67060== Reachable blocks (those to which a pointer was found) are not shown.
==67060== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==67060== 
==67060== For lists of detected and suppressed errors, rerun with: -s
==67060== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make all
gcc -g -Wall -std=c18   -c -o main.o main.c
gcc -g -Wall -std=c18 int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:67:22:[m[K [01;35m[Kwarning: [m[Kimplicit declaration of function â€˜[01m[KsizeOf[m[Kâ€™ [[01;35m[K-Wimplicit-function-declaration[m[K]
   67 |     newNode = malloc([01;35m[KsizeOf[m[K(element));
      |                      [01;35m[K^~~~~~[m[K
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x24): undefined reference to `main'
/usr/bin/ld: /tmp/ccAE3XNB.o: in function `addIntSet':
/home/josh/Documents/CS220/prj2-sol/int-set.c:67: undefined reference to `sizeOf'
collect2: error: ld returned 1 exit status
make: *** [Makefile:12: int-set.o] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make test[K[K[K[K[K[K[K[K[Kclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clear[Kclearmake all-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-testsall[K[3Pclearmake all-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==67384== Memcheck, a memory error detector
==67384== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==67384== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==67384== Command: ./tests
==67384== 
Running suite(s): addIntSet
==67384== Invalid read of size 8
==67384==    at 0x10D526: isInIntSet (int-set.c:41)
==67384==    by 0x10D580: addIntSet (int-set.c:69)
==67384==    by 0x10A6A8: addElement (tests.c:35)
==67384==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67384==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67384==    by 0x10D482: main (tests.c:567)
==67384==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==67384== 
==67384== 
==67384== Process terminating with default action of signal 11 (SIGSEGV)
==67384==  Access not within mapped region at address 0x8
==67384==    at 0x10D526: isInIntSet (int-set.c:41)
==67384==    by 0x10D580: addIntSet (int-set.c:69)
==67384==    by 0x10A6A8: addElement (tests.c:35)
==67384==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67384==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67384==    by 0x10D482: main (tests.c:567)
==67384==  If you believe this happened as a result of a stack
==67384==  overflow in your program's main thread (unlikely but
==67384==  possible), you can try to increase the size of the
==67384==  main thread stack using the --main-stacksize= flag.
==67384==  The main thread stack size used in this run was 8388608.
==67384== 
==67384== HEAP SUMMARY:
==67384==     in use at exit: 4,853 bytes in 187 blocks
==67384==   total heap usage: 210 allocs, 23 frees, 10,460 bytes allocated
==67384== 
==67384== LEAK SUMMARY:
==67384==    definitely lost: 0 bytes in 0 blocks
==67384==    indirectly lost: 0 bytes in 0 blocks
==67384==      possibly lost: 0 bytes in 0 blocks
==67384==    still reachable: 4,853 bytes in 187 blocks
==67384==         suppressed: 0 bytes in 0 blocks
==67384== Reachable blocks (those to which a pointer was found) are not shown.
==67384== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==67384== 
==67384== For lists of detected and suppressed errors, rerun with: -s
==67384== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make all
gcc int-set.o int-set-strings.o -o main
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x24): undefined reference to `main'
collect2: error: ld returned 1 exit status
make: *** [Makefile:9: main] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make [K[K[K[K[K
josh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kcldear

Command 'cldear' not found, did you mean:

  command 'clear' from deb ncurses-bin (6.2-0ubuntu2)

Try: sudo apt install <deb name>

josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ cleardearmake all[3Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake all[3Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests
==67562== Memcheck, a memory error detector
==67562== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==67562== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==67562== Command: ./tests
==67562== 
Running suite(s): addIntSet
==67562== Invalid read of size 8
==67562==    at 0x10D526: isInIntSet (int-set.c:41)
==67562==    by 0x10D580: addIntSet (int-set.c:69)
==67562==    by 0x10A6A8: addElement (tests.c:35)
==67562==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67562==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67562==    by 0x10D482: main (tests.c:567)
==67562==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==67562== 
==67562== 
==67562== Process terminating with default action of signal 11 (SIGSEGV)
==67562==  Access not within mapped region at address 0x8
==67562==    at 0x10D526: isInIntSet (int-set.c:41)
==67562==    by 0x10D580: addIntSet (int-set.c:69)
==67562==    by 0x10A6A8: addElement (tests.c:35)
==67562==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==67562==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==67562==    by 0x10D482: main (tests.c:567)
==67562==  If you believe this happened as a result of a stack
==67562==  overflow in your program's main thread (unlikely but
==67562==  possible), you can try to increase the size of the
==67562==  main thread stack using the --main-stacksize= flag.
==67562==  The main thread stack size used in this run was 8388608.
==67562== 
==67562== HEAP SUMMARY:
==67562==     in use at exit: 4,853 bytes in 187 blocks
==67562==   total heap usage: 210 allocs, 23 frees, 10,460 bytes allocated
==67562== 
==67562== LEAK SUMMARY:
==67562==    definitely lost: 0 bytes in 0 blocks
==67562==    indirectly lost: 0 bytes in 0 blocks
==67562==      possibly lost: 0 bytes in 0 blocks
==67562==    still reachable: 4,853 bytes in 187 blocks
==67562==         suppressed: 0 bytes in 0 blocks
==67562== Reachable blocks (those to which a pointer was found) are not shown.
==67562== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==67562== 
==67562== For lists of detected and suppressed errors, rerun with: -s
==67562== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./test
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
./test: No such file or directory.
(gdb) 
[1]+  Stopped                 gdb ./test
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./test[Kfg
gdb ./test
q
q
josh@machine:~/Documents/CS220/prj2-sol$ fggdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) ad[K[Kb addIntSet():
No source file named addIntSet().
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) b int-set.c: [K58
Breakpoint 1 at [34m0x5536[m: file [32mint-set.c[m, line 59.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:59
warning: Source file is more recent than executable.
59	{
(gdb) ls[K[Kq
A debugging session is active.

	Inferior 1 [process 68197] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./testsfg[Kgdb ./testfg[Kgdb ./tests[Kgdb ./testsfg[Kgdb ./testmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kdearmake all[2Pcldear[1Pearmake -f tests.make CK_SUITE=addIntSet valgrind-tests[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kt
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetgdb ./tests[Kfg[Kgdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:58
Breakpoint 1 at [34m0x5536[m: file [32mint-set.c[m, line 59.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:59
59	{
(gdb) n
61	    if (intSet == NULL)
(gdb) 
65	    Header *tempHead = (Header *)intSet;
(gdb) 
67	    newNode = malloc(element);
(gdb) p tempJea[K[K[KJea[K[K[KHead
$1 = (Header *) [34m0x5555555665b0[m
(gdb) p tempHead[C*tempHead(tempHeadHtempHeadetempHeadatempHeaddtempHeadetempHeadrtempHead tempHead*tempHead)tempHead
$2 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) q
A debugging session is active.

	Inferior 1 [process 68433] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./testsmake -f tests.make CK_SUITE=addIntSetgdb ./tests[Kfg[Kgdb ./testfg[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSetgdb ./tests[Kmake -f tests.make CK_SUITE=addIntSetgdb ./tests[K[Kc[Kclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ cleargdb ./testsmake -f tests.make CK_SUITE=addIntSetgdb ./tests[Kfg[Kgdb ./testmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==68724== Memcheck, a memory error detector
==68724== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==68724== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==68724== Command: ./tests
==68724== 
Running suite(s): addIntSet
==68724== Invalid read of size 8
==68724==    at 0x10D526: isInIntSet (int-set.c:41)
==68724==    by 0x10D580: addIntSet (int-set.c:69)
==68724==    by 0x10A6A8: addElement (tests.c:35)
==68724==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==68724==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==68724==    by 0x10D482: main (tests.c:567)
==68724==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==68724== 
==68724== 
==68724== Process terminating with default action of signal 11 (SIGSEGV)
==68724==  Access not within mapped region at address 0x8
==68724==    at 0x10D526: isInIntSet (int-set.c:41)
==68724==    by 0x10D580: addIntSet (int-set.c:69)
==68724==    by 0x10A6A8: addElement (tests.c:35)
==68724==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==68724==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==68724==    by 0x10D482: main (tests.c:567)
==68724==  If you believe this happened as a result of a stack
==68724==  overflow in your program's main thread (unlikely but
==68724==  possible), you can try to increase the size of the
==68724==  main thread stack using the --main-stacksize= flag.
==68724==  The main thread stack size used in this run was 8388608.
==68724== 
==68724== HEAP SUMMARY:
==68724==     in use at exit: 4,853 bytes in 187 blocks
==68724==   total heap usage: 210 allocs, 23 frees, 10,460 bytes allocated
==68724== 
==68724== LEAK SUMMARY:
==68724==    definitely lost: 0 bytes in 0 blocks
==68724==    indirectly lost: 0 bytes in 0 blocks
==68724==      possibly lost: 0 bytes in 0 blocks
==68724==    still reachable: 4,853 bytes in 187 blocks
==68724==         suppressed: 0 bytes in 0 blocks
==68724== Reachable blocks (those to which a pointer was found) are not shown.
==68724== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==68724== 
==68724== For lists of detected and suppressed errors, rerun with: -s
==68724== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==68818== Memcheck, a memory error detector
==68818== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==68818== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==68818== Command: ./tests
==68818== 
Running suite(s): addIntSet
==68818== Invalid read of size 8
==68818==    at 0x10D526: isInIntSet (int-set.c:41)
==68818==    by 0x10D580: addIntSet (int-set.c:69)
==68818==    by 0x10A6A8: addElement (tests.c:35)
==68818==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==68818==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==68818==    by 0x10D482: main (tests.c:567)
==68818==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==68818== 
==68818== 
==68818== Process terminating with default action of signal 11 (SIGSEGV)
==68818==  Access not within mapped region at address 0x8
==68818==    at 0x10D526: isInIntSet (int-set.c:41)
==68818==    by 0x10D580: addIntSet (int-set.c:69)
==68818==    by 0x10A6A8: addElement (tests.c:35)
==68818==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==68818==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==68818==    by 0x10D482: main (tests.c:567)
==68818==  If you believe this happened as a result of a stack
==68818==  overflow in your program's main thread (unlikely but
==68818==  possible), you can try to increase the size of the
==68818==  main thread stack using the --main-stacksize= flag.
==68818==  The main thread stack size used in this run was 8388608.
==68818== 
==68818== HEAP SUMMARY:
==68818==     in use at exit: 4,853 bytes in 187 blocks
==68818==   total heap usage: 210 allocs, 23 frees, 10,460 bytes allocated
==68818== 
==68818== LEAK SUMMARY:
==68818==    definitely lost: 0 bytes in 0 blocks
==68818==    indirectly lost: 0 bytes in 0 blocks
==68818==      possibly lost: 0 bytes in 0 blocks
==68818==    still reachable: 4,853 bytes in 187 blocks
==68818==         suppressed: 0 bytes in 0 blocks
==68818== Reachable blocks (those to which a pointer was found) are not shown.
==68818== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==68818== 
==68818== For lists of detected and suppressed errors, rerun with: -s
==68818== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==68937== Memcheck, a memory error detector
==68937== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==68937== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==68937== Command: ./tests
==68937== 
Running suite(s): addIntSet
==68937== Invalid read of size 8
==68937==    at 0x10D526: isInIntSet (int-set.c:41)
==68937==    by 0x10D57D: addIntSet (int-set.c:69)
==68937==    by 0x10A6A8: addElement (tests.c:35)
==68937==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==68937==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==68937==    by 0x10D482: main (tests.c:567)
==68937==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==68937== 
==68937== 
==68937== Process terminating with default action of signal 11 (SIGSEGV)
==68937==  Access not within mapped region at address 0x8
==68937==    at 0x10D526: isInIntSet (int-set.c:41)
==68937==    by 0x10D57D: addIntSet (int-set.c:69)
==68937==    by 0x10A6A8: addElement (tests.c:35)
==68937==    by 0x10FD1A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==68937==    by 0x110106: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==68937==    by 0x10D482: main (tests.c:567)
==68937==  If you believe this happened as a result of a stack
==68937==  overflow in your program's main thread (unlikely but
==68937==  possible), you can try to increase the size of the
==68937==  main thread stack using the --main-stacksize= flag.
==68937==  The main thread stack size used in this run was 8388608.
==68937== 
==68937== HEAP SUMMARY:
==68937==     in use at exit: 4,821 bytes in 187 blocks
==68937==   total heap usage: 210 allocs, 23 frees, 10,428 bytes allocated
==68937== 
==68937== LEAK SUMMARY:
==68937==    definitely lost: 0 bytes in 0 blocks
==68937==    indirectly lost: 0 bytes in 0 blocks
==68937==      possibly lost: 0 bytes in 0 blocks
==68937==    still reachable: 4,821 bytes in 187 blocks
==68937==         suppressed: 0 bytes in 0 blocks
==68937== Reachable blocks (those to which a pointer was found) are not shown.
==68937== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==68937== 
==68937== For lists of detected and suppressed errors, rerun with: -s
==68937== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kgdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.cL[K:58
Breakpoint 1 at [34m0x5536[m: file [32mint-set.c[m, line 59.
(gdb) n
The program is not being run.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:59
59	{
(gdb) n
61	    if (intSet == NULL)
(gdb) 
65	    Header *tempHead = (Header *)intSet;
(gdb) 
67	    newNode = malloc(1);
(gdb) 
69	    if (isInIntSet(intSet, element) == 1)
(gdb) p newDo[K[KNode
$1 = (Node *) [34m0x555555567560[m
(gdb) p newNodeNnewNodeonewNodednewNodeenewNode[1PnewNode[1PnewNode[1PnewNode[1PnewNode(newNodeNnewNodeonewNodednewNodeenewNode newNode*newNode)newNode
$2 = (Node *) [34m0x555555567560[m
(gdb) p (Node *)newNode[1@*
$3 = {data = 1431725456, next = [34m0x0[m}
(gdb) q'[K
A debugging session is active.

	Inferior 1 [process 69083] will be killed.

Quit anyway? (y or n) ay
Please answer y or n.
A debugging session is active.

	Inferior 1 [process 69083] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ m[Kclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ cleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==70585== Memcheck, a memory error detector
==70585== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==70585== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==70585== Command: ./tests
==70585== 
Running suite(s): addIntSet
==70585== Invalid read of size 8
==70585==    at 0x10D526: isInIntSet (int-set.c:41)
==70585==    by 0x10D56F: addIntSet (int-set.c:68)
==70585==    by 0x10A6A8: addElement (tests.c:35)
==70585==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==70585==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==70585==    by 0x10D482: main (tests.c:567)
==70585==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==70585== 
==70585== 
==70585== Process terminating with default action of signal 11 (SIGSEGV)
==70585==  Access not within mapped region at address 0x8
==70585==    at 0x10D526: isInIntSet (int-set.c:41)
==70585==    by 0x10D56F: addIntSet (int-set.c:68)
==70585==    by 0x10A6A8: addElement (tests.c:35)
==70585==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==70585==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==70585==    by 0x10D482: main (tests.c:567)
==70585==  If you believe this happened as a result of a stack
==70585==  overflow in your program's main thread (unlikely but
==70585==  possible), you can try to increase the size of the
==70585==  main thread stack using the --main-stacksize= flag.
==70585==  The main thread stack size used in this run was 8388608.
==70585== 
==70585== HEAP SUMMARY:
==70585==     in use at exit: 4,820 bytes in 186 blocks
==70585==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==70585== 
==70585== LEAK SUMMARY:
==70585==    definitely lost: 0 bytes in 0 blocks
==70585==    indirectly lost: 0 bytes in 0 blocks
==70585==      possibly lost: 0 bytes in 0 blocks
==70585==    still reachable: 4,820 bytes in 186 blocks
==70585==         suppressed: 0 bytes in 0 blocks
==70585== Reachable blocks (those to which a pointer was found) are not shown.
==70585== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==70585== 
==70585== For lists of detected and suppressed errors, rerun with: -s
==70585== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K[5Pcleargdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:74
Breakpoint 1 at [34m0x5575[m: file [32mint-set.c[m, line 75.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Program received signal SIGSEGV, Segmentation fault.
[34m0x0000555555559526[m in [33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:41
41	    while (currNode->next != NULL)
(gdb) 
(gdb) 
(gdb) 
(gdb) n

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) d
Delete all breakpoints? (y or n) y
(gdb) b int-set.c:35
Breakpoint 2 at [34m0x5555555594df[m: file [32mint-set.c[m, line 36.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 2, [33misInIntSet[m ([36mintSet[m=0x555555564300, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n[Kn
38	    Header *tempHead = (Header *)intSet;
(gdb) p tempHead
$1 = (Header *) [34m0x7ffff7cdad15[m <[33m__libc_calloc[m+133>
(gdb) n
39	    Node *currNode = tempHead->dummyNode;
(gdb) 
41	    while (currNode->next != NULL)
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[34m0x0000555555559526[m in [33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:41
41	    while (currNode->next != NULL)
(gdb) p currNode->next
Cannot access memory at address 0x8
(gdb) p currNode
$2 = (Node *) [34m0x0[m
(gdb) p currNode(currNodeNcurrNode[1PcurrNode[1PcurrNode*currNode(currNodencurrNode[1PcurrNodeNcurrNodeocurrNodedcurrNodeecurrNode currNode*currNode)currNode
Cannot access memory at address 0x0
(gdb) 
[1]+  Stopped                 gdb ./tests
josh@machine:~/Documents/CS220/prj2-sol$ fg
gdb ./tests
1
1
Undefined command: "1".  Try "help".
(gdb) q
A debugging session is active.

	Inferior 1 [process 70924] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean[5Pclear[3Pfggdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==71480== Memcheck, a memory error detector
==71480== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==71480== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==71480== Command: ./tests
==71480== 
Running suite(s): addIntSet
==71480== Invalid read of size 8
==71480==    at 0x10D538: isInIntSet (int-set.c:42)
==71480==    by 0x10D581: addIntSet (int-set.c:69)
==71480==    by 0x10A6A8: addElement (tests.c:35)
==71480==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71480==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71480==    by 0x10D482: main (tests.c:567)
==71480==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==71480== 
==71480== 
==71480== Process terminating with default action of signal 11 (SIGSEGV)
==71480==  Access not within mapped region at address 0x8
==71480==    at 0x10D538: isInIntSet (int-set.c:42)
==71480==    by 0x10D581: addIntSet (int-set.c:69)
==71480==    by 0x10A6A8: addElement (tests.c:35)
==71480==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71480==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71480==    by 0x10D482: main (tests.c:567)
==71480==  If you believe this happened as a result of a stack
==71480==  overflow in your program's main thread (unlikely but
==71480==  possible), you can try to increase the size of the
==71480==  main thread stack using the --main-stacksize= flag.
==71480==  The main thread stack size used in this run was 8388608.
==71480== 
==71480== HEAP SUMMARY:
==71480==     in use at exit: 4,836 bytes in 187 blocks
==71480==   total heap usage: 210 allocs, 23 frees, 10,443 bytes allocated
==71480== 
==71480== 16 bytes in 1 blocks are definitely lost in loss record 74 of 187
==71480==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==71480==    by 0x10D503: isInIntSet (int-set.c:39)
==71480==    by 0x10D581: addIntSet (int-set.c:69)
==71480==    by 0x10A6A8: addElement (tests.c:35)
==71480==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71480==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71480==    by 0x10D482: main (tests.c:567)
==71480== 
==71480== LEAK SUMMARY:
==71480==    definitely lost: 16 bytes in 1 blocks
==71480==    indirectly lost: 0 bytes in 0 blocks
==71480==      possibly lost: 0 bytes in 0 blocks
==71480==    still reachable: 4,820 bytes in 186 blocks
==71480==         suppressed: 0 bytes in 0 blocks
==71480== Reachable blocks (those to which a pointer was found) are not shown.
==71480== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==71480== 
==71480== For lists of detected and suppressed errors, rerun with: -s
==71480== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ mqk3 [K[K[K[K[Kq[Kmqk [K[K[Kqk3[K[K[K[Ka[Kmake all
gcc -g -Wall -std=c18   -c -o main.o main.c
gcc -g -Wall -std=c18 int-set.c
[01m[Kint-set.c:12:5:[m[K [01;31m[Kerror: [m[Kunknown type name â€˜[01m[KNodeStruct[m[Kâ€™
   12 |     [01;31m[KNodeStruct[m[K *dummyNode;
      |     [01;31m[K^~~~~~~~~~[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:40:35:[m[K [01;31m[Kerror: [m[Krequest for member â€˜[01m[Knext[m[Kâ€™ in something not a structure or union
   40 |     currNode = tempHead->dummyNode[01;31m[K->[m[Knext;
      |                                   [01;31m[K^~[m[K
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:78:44:[m[K [01;31m[Kerror: [m[Krequest for member â€˜[01m[Knext[m[Kâ€™ in something not a structure or union
   78 |         newNode->next = tempHead->dummyNode[01;31m[K->[m[Knext;
      |                                            [01;31m[K^~[m[K
[01m[Kint-set.c:79:28:[m[K [01;31m[Kerror: [m[Krequest for member â€˜[01m[Knext[m[Kâ€™ in something not a structure or union
   79 |         tempHead->dummyNode[01;31m[K->[m[Knext = newNode;
      |                            [01;31m[K^~[m[K
make: *** [Makefile:12: int-set.o] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake allclean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean[5Pclearmake allclean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==71764== Memcheck, a memory error detector
==71764== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==71764== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==71764== Command: ./tests
==71764== 
Running suite(s): addIntSet
==71764== Invalid read of size 8
==71764==    at 0x10D538: isInIntSet (int-set.c:42)
==71764==    by 0x10D581: addIntSet (int-set.c:69)
==71764==    by 0x10A6A8: addElement (tests.c:35)
==71764==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71764==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71764==    by 0x10D482: main (tests.c:567)
==71764==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==71764== 
==71764== 
==71764== Process terminating with default action of signal 11 (SIGSEGV)
==71764==  Access not within mapped region at address 0x8
==71764==    at 0x10D538: isInIntSet (int-set.c:42)
==71764==    by 0x10D581: addIntSet (int-set.c:69)
==71764==    by 0x10A6A8: addElement (tests.c:35)
==71764==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71764==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71764==    by 0x10D482: main (tests.c:567)
==71764==  If you believe this happened as a result of a stack
==71764==  overflow in your program's main thread (unlikely but
==71764==  possible), you can try to increase the size of the
==71764==  main thread stack using the --main-stacksize= flag.
==71764==  The main thread stack size used in this run was 8388608.
==71764== 
==71764== HEAP SUMMARY:
==71764==     in use at exit: 4,836 bytes in 187 blocks
==71764==   total heap usage: 210 allocs, 23 frees, 10,443 bytes allocated
==71764== 
==71764== 16 bytes in 1 blocks are definitely lost in loss record 74 of 187
==71764==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==71764==    by 0x10D503: isInIntSet (int-set.c:39)
==71764==    by 0x10D581: addIntSet (int-set.c:69)
==71764==    by 0x10A6A8: addElement (tests.c:35)
==71764==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71764==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71764==    by 0x10D482: main (tests.c:567)
==71764== 
==71764== LEAK SUMMARY:
==71764==    definitely lost: 16 bytes in 1 blocks
==71764==    indirectly lost: 0 bytes in 0 blocks
==71764==      possibly lost: 0 bytes in 0 blocks
==71764==    still reachable: 4,820 bytes in 186 blocks
==71764==         suppressed: 0 bytes in 0 blocks
==71764== Reachable blocks (those to which a pointer was found) are not shown.
==71764== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==71764== 
==71764== For lists of detected and suppressed errors, rerun with: -s
==71764== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==71861== Memcheck, a memory error detector
==71861== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==71861== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==71861== Command: ./tests
==71861== 
Running suite(s): addIntSet
==71861== Invalid read of size 8
==71861==    at 0x10D526: isInIntSet (int-set.c:41)
==71861==    by 0x10D56F: addIntSet (int-set.c:68)
==71861==    by 0x10A6A8: addElement (tests.c:35)
==71861==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71861==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71861==    by 0x10D482: main (tests.c:567)
==71861==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==71861== 
==71861== 
==71861== Process terminating with default action of signal 11 (SIGSEGV)
==71861==  Access not within mapped region at address 0x8
==71861==    at 0x10D526: isInIntSet (int-set.c:41)
==71861==    by 0x10D56F: addIntSet (int-set.c:68)
==71861==    by 0x10A6A8: addElement (tests.c:35)
==71861==    by 0x10FD2A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==71861==    by 0x110116: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==71861==    by 0x10D482: main (tests.c:567)
==71861==  If you believe this happened as a result of a stack
==71861==  overflow in your program's main thread (unlikely but
==71861==  possible), you can try to increase the size of the
==71861==  main thread stack using the --main-stacksize= flag.
==71861==  The main thread stack size used in this run was 8388608.
==71861== 
==71861== HEAP SUMMARY:
==71861==     in use at exit: 4,820 bytes in 186 blocks
==71861==   total heap usage: 209 allocs, 23 frees, 10,427 bytes allocated
==71861== 
==71861== LEAK SUMMARY:
==71861==    definitely lost: 0 bytes in 0 blocks
==71861==    indirectly lost: 0 bytes in 0 blocks
==71861==      possibly lost: 0 bytes in 0 blocks
==71861==    still reachable: 4,820 bytes in 186 blocks
==71861==         suppressed: 0 bytes in 0 blocks
==71861== Reachable blocks (those to which a pointer was found) are not shown.
==71861== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==71861== 
==71861== For lists of detected and suppressed errors, rerun with: -s
==71861== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ d[Kgdv[Kb ./tests][K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:38
Breakpoint 1 at [34m0x54ee[m: file [32mint-set.c[m, line 38.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:38
38	    Header *tempHead = (Header *)intSet;
(gdb) nn
Undefined command: "nn".  Try "help".
(gdb) n
39	    Node *currNode = tempHead->dummyNode;
(gdb) 
41	    while (currNode->next != NULL)
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[34m0x0000555555559526[m in [33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:41
41	    while (currNode->next != NULL)
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:38
38	    Header *tempHead = (Header *)intSet;
(gdb) n
39	    Node *currNode = tempHead->dummyNode;
(gdb) n
41	    while (currNode->next != NULL)
(gdb) p currNote
No symbol "currNote" in current context.
(gdb) p currNote[C[1Pede
$1 = (Node *) [34m0x0[m
(gdb) p currNode*currNode(currNodeNcurrNodeocurrNodedcurrNodeecurrNode currNode*currNode)currNode
Cannot access memory at address 0x0
(gdb) temp[K[K[K[K [K[ [K[Kp Header[K[K[K[K[K[K*(Header *)tempHead
$2 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) 
$3 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) 
$4 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) 
$5 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) b
Breakpoint 2 at [34m0x555555559502[m: file [32mint-set.c[m, line 41.
(gdb) q
A debugging session is active.

	Inferior 1 [process 72154] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K[Kmake clean
rm -f *~ *.o 
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./tests[1Pmake cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==72674== Memcheck, a memory error detector
==72674== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==72674== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==72674== Command: ./tests
==72674== 
Running suite(s): addIntSet
==72674== Invalid write of size 4
==72674==    at 0x10D5A6: addIntSet (int-set.c:80)
==72674==    by 0x10A6A8: addElement (tests.c:35)
==72674==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==72674==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==72674==    by 0x10D482: main (tests.c:567)
==72674==  Address 0x4be0180 is 0 bytes after a block of size 0 alloc'd
==72674==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==72674==    by 0x10D59A: addIntSet (int-set.c:79)
==72674==    by 0x10A6A8: addElement (tests.c:35)
==72674==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==72674==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==72674==    by 0x10D482: main (tests.c:567)
==72674== 
==72674== Invalid read of size 8
==72674==    at 0x10D5B0: addIntSet (int-set.c:81)
==72674==    by 0x10A6A8: addElement (tests.c:35)
==72674==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==72674==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==72674==    by 0x10D482: main (tests.c:567)
==72674==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==72674== 
==72674== 
==72674== Process terminating with default action of signal 11 (SIGSEGV)
==72674==  Access not within mapped region at address 0x8
==72674==    at 0x10D5B0: addIntSet (int-set.c:81)
==72674==    by 0x10A6A8:Script started on 2021-10-12 18:41:31-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="131" LINES="11"]
josh@machine:~/Documents/CS220/prj2-sol$ set
BASH=/bin/bash
BASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extquote:force_fignore:globasciiranges:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath
BASH_ALIASES=()
BASH_ARGC=([0]="0")
BASH_ARGV=()
BASH_CMDS=()
BASH_LINENO=()
BASH_SOURCE=()
BASH_VERSINFO=([0]="5" [1]="0" [2]="17" [3]="1" [4]="release" [5]="x86_64-pc-linux-gnu")
BASH_VERSION='5.0.17(1)-release'
BREAKPAD_DUMP_LOCATION='/home/josh/.config/Code/exthost Crash Reports'
CHROME_DESKTOP=code-url-handler.desktop
CINNAMON_VERSION=5.0.5
CLUTTER_IM_MODULE=ibus
COLORTERM=truecolor
COLUMNS=131
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
DEFAULTS_PATH=/usr/share/gconf/cinnamon.default.path
DESKTOP_SESSION=cinnamon
DIRSTACK=()
DISPLAY=:0
EUID=1000
GDK_BACKEND=x11
GDMSESSION=cinnamon
GDM_LANG=en_US
GIO_LAUNCHED_DESKTOP_FILE=/usr/share/applications/code.desktop
GIO_LAUNCHED_DESKTOP_FILE_PID=77361
GIT_ASKPASS=/usr/share/code/resources/app/extensions/git/dist/askpass.sh
GJS_DEBUG_OUTPUT=stderr
GJS_DEBUG_TOPICS='JS ERROR;JS LOG'
GNOME_DESKTOP_SESSION_ID=this-is-deprecated
GPG_AGENT_INFO=/run/user/1000/gnupg/S.gpg-agent:0:1
GROUPS=()
GTK3_MODULES=xapp-gtk3-module
GTK_IM_MODULE=ibus
GTK_MODULES=gail:atk-bridge
GTK_OVERLAY_SCROLLING=1
HISTFILE=/home/josh/.bash_history
HISTFILESIZE=500
HISTSIZE=500
HOME=/home/josh
HOSTNAME=machine
HOSTTYPE=x86_64
IFS=$' \t\n'
LANG=en_US.UTF-8
LANGUAGE=en_US
LINES=11
LOGNAME=josh
MACHTYPE=x86_64-pc-linux-gnu
MAILCHECK=60
MANDATORY_PATH=/usr/share/gconf/cinnamon.mandatory.path
OPTERR=1
OPTIND=1
ORIGINAL_XDG_CURRENT_DESKTOP=X-Cinnamon
OSTYPE=linux-gnu
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
PIPESTATUS=([0]="0")
PPID=77777
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
PS2='> '
PS4='+ '
PWD=/home/josh/Documents/CS220/prj2-sol
QT4_IM_MODULE=ibus
QT_ACCESSIBILITY=1
QT_IM_MODULE=ibus
QT_QPA_PLATFORMTHEME=qt5ct
SESSION_MANAGER=local/machine:@/tmp/.ICE-unix/1627,unix/machine:/tmp/.ICE-unix/1627
SHELL=/bin/bash
SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
SHLVL=2
SSH_AGENT_PID=1704
SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
TERM=xterm-256color
TERM_PROGRAM=vscode
TERM_PROGRAM_VERSION=1.61.0
UID=1000
USER=josh
VSCODE_GIT_ASKPASS_MAIN=/usr/share/code/resources/app/extensions/git/dist/askpass-main.js
VSCODE_GIT_ASKPASS_NODE=/usr/share/code/code
VSCODE_GIT_IPC_HANDLE=/run/user/1000/vscode-git-81ccc3b1e7.sock
XAUTHORITY=/home/josh/.Xauthority
XDG_CONFIG_DIRS=/etc/xdg/xdg-cinnamon:/etc/xdg
XDG_CURRENT_DESKTOP=X-Cinnamon
XDG_DATA_DIRS=/usr/share/cinnamon:/usr/share/gnome:/home/josh/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share
XDG_GREETER_DATA_DIR=/var/lib/lightdm-data/josh
XDG_RUNTIME_DIR=/run/user/1000
XDG_SEAT=seat0
XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0
XDG_SESSION_CLASS=user
XDG_SESSION_DESKTOP=cinnamon
XDG_SESSION_ID=c2
XDG_SESSION_PATH=/org/freedesktop/DisplayManager/Session0
XDG_SESSION_TYPE=x11
XDG_VTNR=7
XMODIFIERS=@im=ibus
_=']'
command_not_found_handle () 
{ 
    if [ -x /usr/lib/command-not-found ]; then
        /usr/lib/command-not-found -- "$1";
        return $?;
    else
        if [ -x /usr/share/command-not-found/command-not-found ]; then
            /usr/share/command-not-found/command-not-found -- "$1";
            return $?;
        else
            printf "%s: command not found\n" "$1" 1>&2;
            return 127;
        fi;
    fi
}
josh@machine:~/Documents/CS220/prj2-sol$ s
s: command not found
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ ^V[Kmake -f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:80:23:[m[K [01;35m[Kwarning: [m[Kassignment to â€˜[01m[Kint[m[Kâ€™ from â€˜[01m[Kint *[m[Kâ€™ makes integer from pointer without a cast [[01;35m[K-Wint-conversion[m[K]
   80 |         newNode->data [01;35m[K=[m[K &element;
      |                       [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==77991== Memcheck, a memory error detector
==77991== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==77991== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==77991== Command: ./tests
==77991== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==77991== 
==77991== HEAP SUMMARY:
==77991==     in use at exit: 0 bytes in 0 blocks
==77991==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==77991== 
==77991== All heap blocks were freed -- no leaks are possible
==77991== 
==77991== For lists of detected and suppressed errors, rerun with: -s
==77991== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==78066== Memcheck, a memory error detector
==78066== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==78066== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==78066== Command: ./tests
==78066== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==78066== 
==78066== HEAP SUMMARY:
==78066==     in use at exit: 0 bytes in 0 blocks
==78066==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==78066== 
==78066== All heap blocks were freed -- no leaks are possible
==78066== 
==78066== For lists of detected and suppressed errors, rerun with: -s
==78066== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=newIntSet valgrind-tests[1P[1P[1P[1@a[1@d[1@d
==78126== Memcheck, a memory error detector
==78126== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==78126== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==78126== Command: ./tests
==78126== 
Running suite(s): addIntSet
==78126== Invalid write of size 4
==78126==    at 0x10D5A6: addIntSet (int-set.c:80)
==78126==    by 0x10A6A8: addElement (tests.c:35)
==78126==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x10D482: main (tests.c:567)
==78126==  Address 0x4be0180 is 0 bytes after a block of size 0 alloc'd
==78126==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==78126==    by 0x10D59A: addIntSet (int-set.c:79)
==78126==    by 0x10A6A8: addElement (tests.c:35)
==78126==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x10D482: main (tests.c:567)
==78126== 
==78126== Invalid read of size 8
==78126==    at 0x10D5B0: addIntSet (int-set.c:81)
==78126==    by 0x10A6A8: addElement (tests.c:35)
==78126==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x10D482: main (tests.c:567)
==78126==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==78126== 
==78126== 
==78126== Process terminating with default action of signal 11 (SIGSEGV)
==78126==  Access not within mapped region at address 0x8
==78126==    at 0x10D5B0: addIntSet (int-set.c:81)
==78126==    by 0x10A6A8: addElement (tests.c:35)
==78126==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78126==    by 0x10D482: main (tests.c:567)
==78126==  If you believe this happened as a result of a stack
==78126==  overflow in your program's main thread (unlikely but
==78126==  possible), you can try to increase the size of the
==78126==  main thread stack using the --main-stacksize= flag.
==78126==  The main thread stack size used in this run was 8388608.
==78126== 
==78126== HEAP SUMMARY:
==78126==     in use at exit: 4,820 bytes in 187 blocks
==78126==   total heap usage: 210 allocs, 23 frees, 10,427 bytes allocated
==78126== 
==78126== LEAK SUMMARY:
==78126==    definitely lost: 0 bytes in 0 blocks
==78126==    indirectly lost: 0 bytes in 0 blocks
==78126==      possibly lost: 0 bytes in 0 blocks
==78126==    still reachable: 4,820 bytes in 187 blocks
==78126==         suppressed: 0 bytes in 0 blocks
==78126== Reachable blocks (those to which a pointer was found) are not shown.
==78126== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==78126== 
==78126== For lists of detected and suppressed errors, rerun with: -s
==78126== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ ma[K[Kmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==78233== Memcheck, a memory error detector
==78233== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==78233== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==78233== Command: ./tests
==78233== 
Running suite(s): addIntSet
==78233== Invalid write of size 4
==78233==    at 0x10D5A6: addIntSet (int-set.c:80)
==78233==    by 0x10A6A8: addElement (tests.c:35)
==78233==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x10D482: main (tests.c:567)
==78233==  Address 0x4be0180 is 0 bytes after a block of size 0 alloc'd
==78233==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==78233==    by 0x10D59A: addIntSet (int-set.c:79)
==78233==    by 0x10A6A8: addElement (tests.c:35)
==78233==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x10D482: main (tests.c:567)
==78233== 
==78233== Invalid read of size 8
==78233==    at 0x10D5B0: addIntSet (int-set.c:81)
==78233==    by 0x10A6A8: addElement (tests.c:35)
==78233==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x10D482: main (tests.c:567)
==78233==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==78233== 
==78233== 
==78233== Process terminating with default action of signal 11 (SIGSEGV)
==78233==  Access not within mapped region at address 0x8
==78233==    at 0x10D5B0: addIntSet (int-set.c:81)
==78233==    by 0x10A6A8: addElement (tests.c:35)
==78233==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78233==    by 0x10D482: main (tests.c:567)
==78233==  If you believe this happened as a result of a stack
==78233==  overflow in your program's main thread (unlikely but
==78233==  possible), you can try to increase the size of the
==78233==  main thread stack using the --main-stacksize= flag.
==78233==  The main thread stack size used in this run was 8388608.
==78233== 
==78233== HEAP SUMMARY:
==78233==     in use at exit: 4,820 bytes in 187 blocks
==78233==   total heap usage: 210 allocs, 23 frees, 10,427 bytes allocated
==78233== 
==78233== LEAK SUMMARY:
==78233==    definitely lost: 0 bytes in 0 blocks
==78233==    indirectly lost: 0 bytes in 0 blocks
==78233==      possibly lost: 0 bytes in 0 blocks
==78233==    still reachable: 4,820 bytes in 187 blocks
==78233==         suppressed: 0 bytes in 0 blocks
==78233== Reachable blocks (those to which a pointer was found) are not shown.
==78233== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==78233== 
==78233== For lists of detected and suppressed errors, rerun with: -s
==78233== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:79:35:[m[K [01;35m[Kwarning: [m[Kpassing argument 1 of â€˜[01m[Krealloc[m[Kâ€™ makes pointer from integer without a cast [[01;35m[K-Wint-conversion[m[K]
   79 |         newNode = realloc([01;35m[KtempHead->nElements[m[K, sizeof(Node));
      |                           [01;35m[K~~~~~~~~^~~~~~~~~~~[m[K
      |                                   [01;35m[K|[m[K
      |                                   [01;35m[Kint[m[K
In file included from [01m[Kint-set.h:4[m[K,
                 from [01m[Kint-set.c:1[m[K:
[01m[K/usr/include/stdlib.h:550:14:[m[K [01;36m[Knote: [m[Kexpected â€˜[01m[Kvoid *[m[Kâ€™ but argument is of type â€˜[01m[Kint[m[Kâ€™
  550 | extern void *[01;36m[Krealloc[m[K (void *__ptr, size_t __size)
      |              [01;36m[K^~~~~~~[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==78396== Memcheck, a memory error detector
==78396== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==78396== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==78396== Command: ./tests
==78396== 
Running suite(s): addIntSet
==78396== Invalid read of size 8
==78396==    at 0x10D5B0: addIntSet (int-set.c:81)
==78396==    by 0x10A6A8: addElement (tests.c:35)
==78396==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78396==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78396==    by 0x10D482: main (tests.c:567)
==78396==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==78396== 
==78396== 
==78396== Process terminating with default action of signal 11 (SIGSEGV)
==78396==  Access not within mapped region at address 0x8
==78396==    at 0x10D5B0: addIntSet (int-set.c:81)
==78396==    by 0x10A6A8: addElement (tests.c:35)
==78396==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78396==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78396==    by 0x10D482: main (tests.c:567)
==78396==  If you believe this happened as a result of a stack
==78396==  overflow in your program's main thread (unlikely but
==78396==  possible), you can try to increase the size of the
==78396==  main thread stack using the --main-stacksize= flag.
==78396==  The main thread stack size used in this run was 8388608.
==78396== 
==78396== HEAP SUMMARY:
==78396==     in use at exit: 4,836 bytes in 187 blocks
==78396==   total heap usage: 210 allocs, 23 frees, 10,443 bytes allocated
==78396== 
==78396== LEAK SUMMARY:
==78396==    definitely lost: 0 bytes in 0 blocks
==78396==    indirectly lost: 0 bytes in 0 blocks
==78396==      possibly lost: 0 bytes in 0 blocks
==78396==    still reachable: 4,836 bytes in 187 blocks
==78396==         suppressed: 0 bytes in 0 blocks
==78396== Reachable blocks (those to which a pointer was found) are not shown.
==78396== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==78396== 
==78396== For lists of detected and suppressed errors, rerun with: -s
==78396== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:79:27:[m[K [01;35m[Kwarning: [m[Kcast to pointer from integer of different size [[01;35m[K-Wint-to-pointer-cast[m[K]
   79 |         newNode = realloc([01;35m[K([m[Kvoid *)tempHead->nElements, sizeof(Node));
      |                           [01;35m[K^[m[K
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==78513== Memcheck, a memory error detector
==78513== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==78513== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==78513== Command: ./tests
==78513== 
Running suite(s): addIntSet
==78513== Invalid read of size 8
==78513==    at 0x10D5B0: addIntSet (int-set.c:81)
==78513==    by 0x10A6A8: addElement (tests.c:35)
==78513==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78513==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78513==    by 0x10D482: main (tests.c:567)
==78513==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==78513== 
==78513== 
==78513== Process terminating with default action of signal 11 (SIGSEGV)
==78513==  Access not within mapped region at address 0x8
==78513==    at 0x10D5B0: addIntSet (int-set.c:81)
==78513==    by 0x10A6A8: addElement (tests.c:35)
==78513==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==78513==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==78513==    by 0x10D482: main (tests.c:567)
==78513==  If you believe this happened as a result of a stack
==78513==  overflow in your program's main thread (unlikely but
==78513==  possible), you can try to increase the size of the
==78513==  main thread stack using the --main-stacksize= flag.
==78513==  The main thread stack size used in this run was 8388608.
==78513== 
==78513== HEAP SUMMARY:
==78513==     in use at exit: 4,836 bytes in 187 blocks
==78513==   total heap usage: 210 allocs, 23 frees, 10,443 bytes allocated
==78513== 
==78513== LEAK SUMMARY:
==78513==    definitely lost: 0 bytes in 0 blocks
==78513==    indirectly lost: 0 bytes in 0 blocks
==78513==      possibly lost: 0 bytes in 0 blocks
==78513==    still reachable: 4,836 bytes in 187 blocks
==78513==         suppressed: 0 bytes in 0 blocks
==78513== Reachable blocks (those to which a pointer was found) are not shown.
==78513== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==78513== 
==78513== For lists of detected and suppressed errors, rerun with: -s
==78513== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean[5Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==79553== Memcheck, a memory error detector
==79553== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==79553== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==79553== Command: ./tests
==79553== 
Running suite(s): addIntSet
==79553== Invalid write of size 4
==79553==    at 0x10D5A6: addIntSet (int-set.c:79)
==79553==    by 0x10A6A8: addElement (tests.c:35)
==79553==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x10D482: main (tests.c:567)
==79553==  Address 0x4be0180 is 0 bytes after a block of size 0 alloc'd
==79553==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==79553==    by 0x10D59A: addIntSet (int-set.c:78)
==79553==    by 0x10A6A8: addElement (tests.c:35)
==79553==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x10D482: main (tests.c:567)
==79553== 
==79553== Invalid read of size 8
==79553==    at 0x10D5B0: addIntSet (int-set.c:80)
==79553==    by 0x10A6A8: addElement (tests.c:35)
==79553==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x10D482: main (tests.c:567)
==79553==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==79553== 
==79553== 
==79553== Process terminating with default action of signal 11 (SIGSEGV)
==79553==  Access not within mapped region at address 0x8
==79553==    at 0x10D5B0: addIntSet (int-set.c:80)
==79553==    by 0x10A6A8: addElement (tests.c:35)
==79553==    by 0x10FD3A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x110126: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==79553==    by 0x10D482: main (tests.c:567)
==79553==  If you believe this happened as a result of a stack
==79553==  overflow in your program's main thread (unlikely but
==79553==  possible), you can try to increase the size of the
==79553==  main thread stack using the --main-stacksize= flag.
==79553==  The main thread stack size used in this run was 8388608.
==79553== 
==79553== HEAP SUMMARY:
==79553==     in use at exit: 4,820 bytes in 187 blocks
==79553==   total heap usage: 210 allocs, 23 frees, 10,427 bytes allocated
==79553== 
==79553== LEAK SUMMARY:
==79553==    definitely lost: 0 bytes in 0 blocks
==79553==    indirectly lost: 0 bytes in 0 blocks
==79553==      possibly lost: 0 bytes in 0 blocks
==79553==    still reachable: 4,820 bytes in 187 blocks
==79553==         suppressed: 0 bytes in 0 blocks
==79553== Reachable blocks (those to which a pointer was found) are not shown.
==79553== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==79553== 
==79553== For lists of detected and suppressed errors, rerun with: -s
==79553== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ gdb t[K./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:78
Breakpoint 1 at [34m0x5586[m: file [32mint-set.c[m, line 78.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:78
78	        Node *newNode = calloc(tempHead->nElements, sizeof(Node));
(gdb) n
79	        newNode->data = element;
(gdb) p newNode
$1 = (Node *) [34m0x5555555665d0[m
(gdb) p newNode(newNodeNnewNodeonewNodednewNodeenewNode newNode*newNode)newNode
$2 = (Node *) [34m0x5555555665d0[m
(gdb) p (Node *)newNode[1@*
$3 = {data = 0, next = [34m0x0[m}
(gdb) n
80	        newNode->next = tempHead->dummyNode->next;
(gdb) np *(Node *)newNode
$4 = {data = 33, next = [34m0x0[m}
(gdb) q
A debugging session is active.

	Inferior 1 [process 79688] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==80808== Memcheck, a memory error detector
==80808== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==80808== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==80808== Command: ./tests
==80808== 
Running suite(s): addIntSet
==80808== Invalid write of size 4
==80808==    at 0x10D5A6: addIntSet (int-set.c:80)
==80808==    by 0x10A6A8: addElement (tests.c:35)
==80808==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x10D482: main (tests.c:567)
==80808==  Address 0x4be0180 is 0 bytes after a block of size 0 alloc'd
==80808==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==80808==    by 0x10D59A: addIntSet (int-set.c:79)
==80808==    by 0x10A6A8: addElement (tests.c:35)
==80808==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x10D482: main (tests.c:567)
==80808== 
==80808== Invalid read of size 8
==80808==    at 0x10D5B0: addIntSet (int-set.c:81)
==80808==    by 0x10A6A8: addElement (tests.c:35)
==80808==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x10D482: main (tests.c:567)
==80808==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==80808== 
==80808== 
==80808== Process terminating with default action of signal 11 (SIGSEGV)
==80808==  Access not within mapped region at address 0x8
==80808==    at 0x10D5B0: addIntSet (int-set.c:81)
==80808==    by 0x10A6A8: addElement (tests.c:35)
==80808==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==80808==    by 0x10D482: main (tests.c:567)
==80808==  If you believe this happened as a result of a stack
==80808==  overflow in your program's main thread (unlikely but
==80808==  possible), you can try to increase the size of the
==80808==  main thread stack using the --main-stacksize= flag.
==80808==  The main thread stack size used in this run was 8388608.
==80808== 
==80808== HEAP SUMMARY:
==80808==     in use at exit: 4,820 bytes in 187 blocks
==80808==   total heap usage: 210 allocs, 23 frees, 10,427 bytes allocated
==80808== 
==80808== LEAK SUMMARY:
==80808==    definitely lost: 0 bytes in 0 blocks
==80808==    indirectly lost: 0 bytes in 0 blocks
==80808==      possibly lost: 0 bytes in 0 blocks
==80808==    still reachable: 4,820 bytes in 187 blocks
==80808==         suppressed: 0 bytes in 0 blocks
==80808== Reachable blocks (those to which a pointer was found) are not shown.
==80808== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==80808== 
==80808== For lists of detected and suppressed errors, rerun with: -s
==80808== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==80962== Memcheck, a memory error detector
==80962== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==80962== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==80962== Command: ./tests
==80962== 
Running suite(s): addIntSet
==80962== Invalid read of size 8
==80962==    at 0x10D5A5: addIntSet (int-set.c:81)
==80962==    by 0x10A6A8: addElement (tests.c:35)
==80962==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==80962==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==80962==    by 0x10D482: main (tests.c:567)
==80962==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==80962== 
==80962== 
==80962== Process terminating with default action of signal 11 (SIGSEGV)
==80962==  Access not within mapped region at address 0x8
==80962==    at 0x10D5A5: addIntSet (int-set.c:81)
==80962==    by 0x10A6A8: addElement (tests.c:35)
==80962==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==80962==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==80962==    by 0x10D482: main (tests.c:567)
==80962==  If you believe this happened as a result of a stack
==80962==  overflow in your program's main thread (unlikely but
==80962==  possible), you can try to increase the size of the
==80962==  main thread stack using the --main-stacksize= flag.
==80962==  The main thread stack size used in this run was 8388608.
==80962== 
==80962== HEAP SUMMARY:
==80962==     in use at exit: 4,836 bytes in 187 blocks
==80962==   total heap usage: 210 allocs, 23 frees, 10,443 bytes allocated
==80962== 
==80962== LEAK SUMMARY:
==80962==    definitely lost: 0 bytes in 0 blocks
==80962==    indirectly lost: 0 bytes in 0 blocks
==80962==      possibly lost: 0 bytes in 0 blocks
==80962==    still reachable: 4,836 bytes in 187 blocks
==80962==         suppressed: 0 bytes in 0 blocks
==80962== Reachable blocks (those to which a pointer was found) are not shown.
==80962== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==80962== 
==80962== For lists of detected and suppressed errors, rerun with: -s
==80962== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make c[Kall[K[K[Kclean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==81087== Memcheck, a memory error detector
==81087== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==81087== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==81087== Command: ./tests
==81087== 
Running suite(s): addIntSet
==81087== Invalid read of size 8
==81087==    at 0x10D5A5: addIntSet (int-set.c:81)
==81087==    by 0x10A6A8: addElement (tests.c:35)
==81087==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81087==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81087==    by 0x10D482: main (tests.c:567)
==81087==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==81087== 
==81087== 
==81087== Process terminating with default action of signal 11 (SIGSEGV)
==81087==  Access not within mapped region at address 0x8
==81087==    at 0x10D5A5: addIntSet (int-set.c:81)
==81087==    by 0x10A6A8: addElement (tests.c:35)
==81087==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81087==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81087==    by 0x10D482: main (tests.c:567)
==81087==  If you believe this happened as a result of a stack
==81087==  overflow in your program's main thread (unlikely but
==81087==  possible), you can try to increase the size of the
==81087==  main thread stack using the --main-stacksize= flag.
==81087==  The main thread stack size used in this run was 8388608.
==81087== 
==81087== HEAP SUMMARY:
==81087==     in use at exit: 4,844 bytes in 187 blocks
==81087==   total heap usage: 210 allocs, 23 frees, 10,451 bytes allocated
==81087== 
==81087== LEAK SUMMARY:
==81087==    definitely lost: 0 bytes in 0 blocks
==81087==    indirectly lost: 0 bytes in 0 blocks
==81087==      possibly lost: 0 bytes in 0 blocks
==81087==    still reachable: 4,844 bytes in 187 blocks
==81087==         suppressed: 0 bytes in 0 blocks
==81087== Reachable blocks (those to which a pointer was found) are not shown.
==81087== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==81087== 
==81087== For lists of detected and suppressed errors, rerun with: -s
==81087== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make cal[K[K[K[K clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==81167== Memcheck, a memory error detector
==81167== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==81167== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==81167== Command: ./tests
==81167== 
Running suite(s): addIntSet
==81167== Invalid read of size 8
==81167==    at 0x10D5A5: addIntSet (int-set.c:81)
==81167==    by 0x10A6A8: addElement (tests.c:35)
==81167==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81167==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81167==    by 0x10D482: main (tests.c:567)
==81167==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==81167== 
==81167== 
==81167== Process terminating with default action of signal 11 (SIGSEGV)
==81167==  Access not within mapped region at address 0x8
==81167==    at 0x10D5A5: addIntSet (int-set.c:81)
==81167==    by 0x10A6A8: addElement (tests.c:35)
==81167==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81167==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81167==    by 0x10D482: main (tests.c:567)
==81167==  If you believe this happened as a result of a stack
==81167==  overflow in your program's main thread (unlikely but
==81167==  possible), you can try to increase the size of the
==81167==  main thread stack using the --main-stacksize= flag.
==81167==  The main thread stack size used in this run was 8388608.
==81167== 
==81167== HEAP SUMMARY:
==81167==     in use at exit: 4,852 bytes in 187 blocks
==81167==   total heap usage: 210 allocs, 23 frees, 10,459 bytes allocated
==81167== 
==81167== LEAK SUMMARY:
==81167==    definitely lost: 0 bytes in 0 blocks
==81167==    indirectly lost: 0 bytes in 0 blocks
==81167==      possibly lost: 0 bytes in 0 blocks
==81167==    still reachable: 4,852 bytes in 187 blocks
==81167==         suppressed: 0 bytes in 0 blocks
==81167== Reachable blocks (those to which a pointer was found) are not shown.
==81167== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==81167== 
==81167== For lists of detected and suppressed errors, rerun with: -s
==81167== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make c[Kclean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==81257== Memcheck, a memory error detector
==81257== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==81257== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==81257== Command: ./tests
==81257== 
Running suite(s): addIntSet
==81257== Invalid read of size 8
==81257==    at 0x10D5A5: addIntSet (int-set.c:81)
==81257==    by 0x10A6A8: addElement (tests.c:35)
==81257==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81257==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81257==    by 0x10D482: main (tests.c:567)
==81257==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==81257== 
==81257== 
==81257== Process terminating with default action of signal 11 (SIGSEGV)
==81257==  Access not within mapped region at address 0x8
==81257==    at 0x10D5A5: addIntSet (int-set.c:81)
==81257==    by 0x10A6A8: addElement (tests.c:35)
==81257==    by 0x10FE8A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81257==    by 0x110276: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81257==    by 0x10D482: main (tests.c:567)
==81257==  If you believe this happened as a result of a stack
==81257==  overflow in your program's main thread (unlikely but
==81257==  possible), you can try to increase the size of the
==81257==  main thread stack using the --main-stacksize= flag.
==81257==  The main thread stack size used in this run was 8388608.
==81257== 
==81257== HEAP SUMMARY:
==81257==     in use at exit: 4,837 bytes in 187 blocks
==81257==   total heap usage: 210 allocs, 23 frees, 10,444 bytes allocated
==81257== 
==81257== LEAK SUMMARY:
==81257==    definitely lost: 0 bytes in 0 blocks
==81257==    indirectly lost: 0 bytes in 0 blocks
==81257==      possibly lost: 0 bytes in 0 blocks
==81257==    still reachable: 4,837 bytes in 187 blocks
==81257==         suppressed: 0 bytes in 0 blocks
==81257== Reachable blocks (those to which a pointer was found) are not shown.
==81257== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==81257== 
==81257== For lists of detected and suppressed errors, rerun with: -s
==81257== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:70
Breakpoint 1 at [34m0x5568[m: file [32mint-set.c[m, line 70.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet

Program received signal SIGSEGV, Segmentation fault.
[33mfreeIntSet[m ([36mintSet[m=0x555555567580) at [32mint-set.c[m:134
134	    Node *currNode = tempHeader->dummyNode->next;
(gdb) n

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) 
The program is not being run.
(gdb) i b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   [34m0x0000555555559568[m in [33maddIntSet[m at [32mint-set.c[m:70
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet

Program received signal SIGSEGV, Segmentation fault.
[33mfreeIntSet[m ([36mintSet[m=0x555555567580) at [32mint-set.c[m:134
134	    Node *currNode = tempHeader->dummyNode->next;
(gdb) n

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) d
Delete all breakpoints? (y or n) y
(gdb) dnri b[2Pnrb int-set.c:70[K[K79
Breakpoint 2 at [34m0x555555559586[m: file [32mint-set.c[m, line 79.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet

Program received signal SIGSEGV, Segmentation fault.
[33mfreeIntSet[m ([36mintSet[m=0x555555567580) at [32mint-set.c[m:134
134	    Node *currNode = tempHeader->dummyNode->next;
(gdb) q
A debugging session is active.

	Inferior 1 [process 81723] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==81895== Memcheck, a memory error detector
==81895== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==81895== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==81895== Command: ./tests
==81895== 
Running suite(s): addIntSet
==81895== Invalid read of size 8
==81895==    at 0x10D5A5: addIntSet (int-set.c:81)
==81895==    by 0x10A6A8: addElement (tests.c:35)
==81895==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81895==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81895==    by 0x10D482: main (tests.c:567)
==81895==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==81895== 
==81895== 
==81895== Process terminating with default action of signal 11 (SIGSEGV)
==81895==  Access not within mapped region at address 0x8
==81895==    at 0x10D5A5: addIntSet (int-set.c:81)
==81895==    by 0x10A6A8: addElement (tests.c:35)
==81895==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==81895==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==81895==    by 0x10D482: main (tests.c:567)
==81895==  If you believe this happened as a result of a stack
==81895==  overflow in your program's main thread (unlikely but
==81895==  possible), you can try to increase the size of the
==81895==  main thread stack using the --main-stacksize= flag.
==81895==  The main thread stack size used in this run was 8388608.
==81895== 
==81895== HEAP SUMMARY:
==81895==     in use at exit: 4,837 bytes in 187 blocks
==81895==   total heap usage: 210 allocs, 23 frees, 10,444 bytes allocated
==81895== 
==81895== LEAK SUMMARY:
==81895==    definitely lost: 0 bytes in 0 blocks
==81895==    indirectly lost: 0 bytes in 0 blocks
==81895==      possibly lost: 0 bytes in 0 blocks
==81895==    still reachable: 4,837 bytes in 187 blocks
==81895==         suppressed: 0 bytes in 0 blocks
==81895== Reachable blocks (those to which a pointer was found) are not shown.
==81895== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==81895== 
==81895== For lists of detected and suppressed errors, rerun with: -s
==81895== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:70
Breakpoint 1 at [34m0x5568[m: file [32mint-set.c[m, line 70.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet

Program received signal SIGSEGV, Segmentation fault.
[33mfreeIntSet[m ([36mintSet[m=0x555555567580) at [32mint-set.c[m:135
135	    currNode = tempHeader->dummyNode->next;
(gdb) rb int-set.c:70[C[C[C[C[C[Cr[K
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet

Program received signal SIGSEGV, Segmentation fault.
[33mfreeIntSet[m ([36mintSet[m=0x555555567580) at [32mint-set.c[m:135
135	    currNode = tempHeader->dummyNode->next;
(gdb) p currNode
$1 = (Node *) [34m0x555555566530[m
(gdb) p currNode*currNode(currNodeNcurrNodeocurrNodedcurrNodeecurrNode currNode*currNode)currNode
$2 = {data = 1431729504, next = [34m0x0[m}
(gdb) q
A debugging session is active.

	Inferior 1 [process 82089] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==82294== Memcheck, a memory error detector
==82294== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==82294== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==82294== Command: ./tests
==82294== 
Running suite(s): addIntSet
==82294== Invalid read of size 8
==82294==    at 0x10D5A5: addIntSet (int-set.c:81)
==82294==    by 0x10A6A8: addElement (tests.c:35)
==82294==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==82294==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==82294==    by 0x10D482: main (tests.c:567)
==82294==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==82294== 
==82294== 
==82294== Process terminating with default action of signal 11 (SIGSEGV)
==82294==  Access not within mapped region at address 0x8
==82294==    at 0x10D5A5: addIntSet (int-set.c:81)
==82294==    by 0x10A6A8: addElement (tests.c:35)
==82294==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==82294==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==82294==    by 0x10D482: main (tests.c:567)
==82294==  If you believe this happened as a result of a stack
==82294==  overflow in your program's main thread (unlikely but
==82294==  possible), you can try to increase the size of the
==82294==  main thread stack using the --main-stacksize= flag.
==82294==  The main thread stack size used in this run was 8388608.
==82294== 
==82294== HEAP SUMMARY:
==82294==     in use at exit: 4,837 bytes in 187 blocks
==82294==   total heap usage: 210 allocs, 23 frees, 10,444 bytes allocated
==82294== 
==82294== LEAK SUMMARY:
==82294==    definitely lost: 0 bytes in 0 blocks
==82294==    indirectly lost: 0 bytes in 0 blocks
==82294==      possibly lost: 0 bytes in 0 blocks
==82294==    still reachable: 4,837 bytes in 187 blocks
==82294==         suppressed: 0 bytes in 0 blocks
==82294== Reachable blocks (those to which a pointer was found) are not shown.
==82294== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==82294== 
==82294== For lists of detected and suppressed errors, rerun with: -s
==82294== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pclearmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:2[Kw[K70
Breakpoint 1 at [34m0x5568[m: file [32mint-set.c[m, line 70.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:70
70	    Header *tempHead = (Header *)intSet;
(gdb) n
73	    if (isInIntSet(intSet, element) == 1)
(gdb) 
79	        Node *newNode = malloc(sizeof(Node)+1);
(gdb) 
80	        newNode->data = element;
(gdb) 
81	        newNode->next = tempHead->dummyNode->next;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:81
81	        newNode->next = tempHead->dummyNode->next;
(gdb) q
A debugging session is active.

	Inferior 1 [process 82461] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ y[Kclear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ ma[K[Kme[Kaek[K[Kke clean
rm -f *~ *.o tests
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clear[Kawdad
awdad: command not found
josh@machine:~/Documents/CS220/prj2-sol$ 
josh@machine:~/Documents/CS220/prj2-sol$ a
da: command not found
josh@machine:~/Documents/CS220/prj2-sol$ d
d: command not found
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleand[Kawdadclearmake clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K[6Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==82828== Memcheck, a memory error detector
==82828== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==82828== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==82828== Command: ./tests
==82828== 
Running suite(s): addIntSet
==82828== Invalid read of size 8
==82828==    at 0x10D5A5: addIntSet (int-set.c:81)
==82828==    by 0x10A6A8: addElement (tests.c:35)
==82828==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==82828==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==82828==    by 0x10D482: main (tests.c:567)
==82828==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==82828== 
==82828== 
==82828== Process terminating with default action of signal 11 (SIGSEGV)
==82828==  Access not within mapped region at address 0x8
==82828==    at 0x10D5A5: addIntSet (int-set.c:81)
==82828==    by 0x10A6A8: addElement (tests.c:35)
==82828==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==82828==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==82828==    by 0x10D482: main (tests.c:567)
==82828==  If you believe this happened as a result of a stack
==82828==  overflow in your program's main thread (unlikely but
==82828==  possible), you can try to increase the size of the
==82828==  main thread stack using the --main-stacksize= flag.
==82828==  The main thread stack size used in this run was 8388608.
==82828== 
==82828== HEAP SUMMARY:
==82828==     in use at exit: 4,836 bytes in 187 blocks
==82828==   total heap usage: 210 allocs, 23 frees, 10,443 bytes allocated
==82828== 
==82828== LEAK SUMMARY:
==82828==    definitely lost: 0 bytes in 0 blocks
==82828==    indirectly lost: 0 bytes in 0 blocks
==82828==      possibly lost: 0 bytes in 0 blocks
==82828==    still reachable: 4,836 bytes in 187 blocks
==82828==         suppressed: 0 bytes in 0 blocks
==82828== Reachable blocks (those to which a pointer was found) are not shown.
==82828== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==82828== 
==82828== For lists of detected and suppressed errors, rerun with: -s
==82828== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-testsclean[Kd[Kawdadclearmake clean[5Pcleargdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K[6Pcleargdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b s[Kint0s[K[K-set.c:70
Breakpoint 1 at [34m0x5568[m: file [32mint-set.c[m, line 70.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:70
70	    Header *tempHead = (Header *)intSet;
(gdb) n
73	    if (isInIntSet(intSet, element) == 1)
(gdb) 
79	        Node *newNode = (Node *)malloc(sizeof(Node));
(gdb) 
80	        newNode->data = element;
(gdb) 
81	        newNode->next = tempHead->dummyNode->next;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:81
81	        newNode->next = tempHead->dummyNode->next;
(gdb) q
A debugging session is active.

	Inferior 1 [process 83011] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==83260== Memcheck, a memory error detector
==83260== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==83260== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==83260== Command: ./tests
==83260== 
Running suite(s): addIntSet
==83260== Invalid read of size 8
==83260==    at 0x10D5B3: addIntSet (int-set.c:83)
==83260==    by 0x10A6A8: addElement (tests.c:35)
==83260==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83260==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83260==    by 0x10D482: main (tests.c:567)
==83260==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==83260== 
==83260== 
==83260== Process terminating with default action of signal 11 (SIGSEGV)
==83260==  Access not within mapped region at address 0x8
==83260==    at 0x10D5B3: addIntSet (int-set.c:83)
==83260==    by 0x10A6A8: addElement (tests.c:35)
==83260==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83260==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83260==    by 0x10D482: main (tests.c:567)
==83260==  If you believe this happened as a result of a stack
==83260==  overflow in your program's main thread (unlikely but
==83260==  possible), you can try to increase the size of the
==83260==  main thread stack using the --main-stacksize= flag.
==83260==  The main thread stack size used in this run was 8388608.
==83260== 
==83260== HEAP SUMMARY:
==83260==     in use at exit: 4,852 bytes in 188 blocks
==83260==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==83260== 
==83260== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==83260==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==83260==    by 0x10D571: addIntSet (int-set.c:71)
==83260==    by 0x10A6A8: addElement (tests.c:35)
==83260==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83260==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83260==    by 0x10D482: main (tests.c:567)
==83260== 
==83260== LEAK SUMMARY:
==83260==    definitely lost: 16 bytes in 1 blocks
==83260==    indirectly lost: 0 bytes in 0 blocks
==83260==      possibly lost: 0 bytes in 0 blocks
==83260==    still reachable: 4,836 bytes in 187 blocks
==83260==         suppressed: 0 bytes in 0 blocks
==83260== Reachable blocks (those to which a pointer was found) are not shown.
==83260== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==83260== 
==83260== For lists of detected and suppressed errors, rerun with: -s
==83260== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==83339== Memcheck, a memory error detector
==83339== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==83339== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==83339== Command: ./tests
==83339== 
Running suite(s): addIntSet
==83339== Invalid read of size 8
==83339==    at 0x10D5B3: addIntSet (int-set.c:83)
==83339==    by 0x10A6A8: addElement (tests.c:35)
==83339==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83339==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83339==    by 0x10D482: main (tests.c:567)
==83339==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==83339== 
==83339== 
==83339== Process terminating with default action of signal 11 (SIGSEGV)
==83339==  Access not within mapped region at address 0x8
==83339==    at 0x10D5B3: addIntSet (int-set.c:83)
==83339==    by 0x10A6A8: addElement (tests.c:35)
==83339==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83339==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83339==    by 0x10D482: main (tests.c:567)
==83339==  If you believe this happened as a result of a stack
==83339==  overflow in your program's main thread (unlikely but
==83339==  possible), you can try to increase the size of the
==83339==  main thread stack using the --main-stacksize= flag.
==83339==  The main thread stack size used in this run was 8388608.
==83339== 
==83339== HEAP SUMMARY:
==83339==     in use at exit: 4,868 bytes in 188 blocks
==83339==   total heap usage: 211 allocs, 23 frees, 10,475 bytes allocated
==83339== 
==83339== 16 bytes in 1 blocks are definitely lost in loss record 74 of 188
==83339==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==83339==    by 0x10D571: addIntSet (int-set.c:71)
==83339==    by 0x10A6A8: addElement (tests.c:35)
==83339==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83339==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83339==    by 0x10D482: main (tests.c:567)
==83339== 
==83339== LEAK SUMMARY:
==83339==    definitely lost: 16 bytes in 1 blocks
==83339==    indirectly lost: 0 bytes in 0 blocks
==83339==      possibly lost: 0 bytes in 0 blocks
==83339==    still reachable: 4,852 bytes in 187 blocks
==83339==         suppressed: 0 bytes in 0 blocks
==83339== Reachable blocks (those to which a pointer was found) are not shown.
==83339== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==83339== 
==83339== For lists of detected and suppressed errors, rerun with: -s
==83339== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==83469== Memcheck, a memory error detector
==83469== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==83469== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==83469== Command: ./tests
==83469== 
Running suite(s): addIntSet
==83469== Invalid read of size 8
==83469==    at 0x10D5BB: addIntSet (int-set.c:83)
==83469==    by 0x10A6A8: addElement (tests.c:35)
==83469==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83469==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83469==    by 0x10D482: main (tests.c:567)
==83469==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==83469== 
==83469== 
==83469== Process terminating with default action of signal 11 (SIGSEGV)
==83469==  Access not within mapped region at address 0x8
==83469==    at 0x10D5BB: addIntSet (int-set.c:83)
==83469==    by 0x10A6A8: addElement (tests.c:35)
==83469==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83469==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83469==    by 0x10D482: main (tests.c:567)
==83469==  If you believe this happened as a result of a stack
==83469==  overflow in your program's main thread (unlikely but
==83469==  possible), you can try to increase the size of the
==83469==  main thread stack using the --main-stacksize= flag.
==83469==  The main thread stack size used in this run was 8388608.
==83469== 
==83469== HEAP SUMMARY:
==83469==     in use at exit: 4,852 bytes in 188 blocks
==83469==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==83469== 
==83469== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==83469==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==83469==    by 0x10D574: addIntSet (int-set.c:71)
==83469==    by 0x10A6A8: addElement (tests.c:35)
==83469==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83469==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83469==    by 0x10D482: main (tests.c:567)
==83469== 
==83469== LEAK SUMMARY:
==83469==    definitely lost: 16 bytes in 1 blocks
==83469==    indirectly lost: 0 bytes in 0 blocks
==83469==      possibly lost: 0 bytes in 0 blocks
==83469==    still reachable: 4,836 bytes in 187 blocks
==83469==         suppressed: 0 bytes in 0 blocks
==83469== Reachable blocks (those to which a pointer was found) are not shown.
==83469== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==83469== 
==83469== For lists of detected and suppressed errors, rerun with: -s
==83469== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==83566== Memcheck, a memory error detector
==83566== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==83566== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==83566== Command: ./tests
==83566== 
Running suite(s): addIntSet
==83566== Invalid read of size 8
==83566==    at 0x10D5B3: addIntSet (int-set.c:83)
==83566==    by 0x10A6A8: addElement (tests.c:35)
==83566==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83566==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83566==    by 0x10D482: main (tests.c:567)
==83566==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==83566== 
==83566== 
==83566== Process terminating with default action of signal 11 (SIGSEGV)
==83566==  Access not within mapped region at address 0x8
==83566==    at 0x10D5B3: addIntSet (int-set.c:83)
==83566==    by 0x10A6A8: addElement (tests.c:35)
==83566==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83566==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83566==    by 0x10D482: main (tests.c:567)
==83566==  If you believe this happened as a result of a stack
==83566==  overflow in your program's main thread (unlikely but
==83566==  possible), you can try to increase the size of the
==83566==  main thread stack using the --main-stacksize= flag.
==83566==  The main thread stack size used in this run was 8388608.
==83566== 
==83566== HEAP SUMMARY:
==83566==     in use at exit: 6,436 bytes in 188 blocks
==83566==   total heap usage: 211 allocs, 23 frees, 12,043 bytes allocated
==83566== 
==83566== 16 bytes in 1 blocks are definitely lost in loss record 74 of 188
==83566==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==83566==    by 0x10D571: addIntSet (int-set.c:71)
==83566==    by 0x10A6A8: addElement (tests.c:35)
==83566==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==83566==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==83566==    by 0x10D482: main (tests.c:567)
==83566== 
==83566== LEAK SUMMARY:
==83566==    definitely lost: 16 bytes in 1 blocks
==83566==    indirectly lost: 0 bytes in 0 blocks
==83566==      possibly lost: 0 bytes in 0 blocks
==83566==    still reachable: 6,420 bytes in 187 blocks
==83566==         suppressed: 0 bytes in 0 blocks
==83566== Reachable blocks (those to which a pointer was found) are not shown.
==83566== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==83566== 
==83566== For lists of detected and suppressed errors, rerun with: -s
==83566== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-testsclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b int-set.c:g[K10[K[K80[K1
Breakpoint 1 at [34m0x5594[m: file [32mint-set.c[m, line 81.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:81
warning: Source file is more recent than executable.
81	        Node *newNode = (Node *)malloc(sizeof(Node));
(gdb) n
82	        newNode->data = element;
(gdb) p (Node *) [KnewNode
$1 = (Node *) [34m0x5555555665f0[m
(gdb) p (Node *)newNode[1@*
$2 = {data = -136150544, next = [34m0x7ffff7e281f0[m <[33mmain_arena[m+1648>}
(gdb) Quit
(gdb) q
A debugging session is active.

	Inferior 1 [process 83880] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) c
The program is not being run.
(gdb) c[Kb int-set.c;[K;[K: [K[K[K[K[K[K[K[K[K[K[KaddIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
warning: Source file is more recent than executable.
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = (Header *)malloc(sizeof(Header));
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = (Node *)malloc(sizeof(Node));
(gdb) 
82	        newNode->data = element;
(gdb) 
83	        newNode->next = tempHead->dummyNode->next;
(gdb) n[Kp *(Node *)new[K[K[KnewNode
$1 = {data = 33, next = [34m0x7ffff7e281f0[m <[33mmain_arena[m+1648>}
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
[33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:83
83	        newNode->next = tempHead->dummyNode->next;
(gdb) np *(Node *)newNode
$2 = {data = 33, next = [34m0x7ffff7e281f0[m <[33mmain_arena[m+1648>}
(gdb) q
A debugging session is active.

	Inferior 1 [process 85187] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kmake cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==85862== Memcheck, a memory error detector
==85862== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==85862== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==85862== Command: ./tests
==85862== 
Running suite(s): addIntSet
==85862== Invalid read of size 8
==85862==    at 0x10D5BB: addIntSet (int-set.c:83)
==85862==    by 0x10A6A8: addElement (tests.c:35)
==85862==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==85862==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==85862==    by 0x10D482: main (tests.c:567)
==85862==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==85862== 
==85862== 
==85862== Process terminating with default action of signal 11 (SIGSEGV)
==85862==  Access not within mapped region at address 0x8
==85862==    at 0x10D5BB: addIntSet (int-set.c:83)
==85862==    by 0x10A6A8: addElement (tests.c:35)
==85862==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==85862==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==85862==    by 0x10D482: main (tests.c:567)
==85862==  If you believe this happened as a result of a stack
==85862==  overflow in your program's main thread (unlikely but
==85862==  possible), you can try to increase the size of the
==85862==  main thread stack using the --main-stacksize= flag.
==85862==  The main thread stack size used in this run was 8388608.
==85862== 
==85862== HEAP SUMMARY:
==85862==     in use at exit: 4,852 bytes in 188 blocks
==85862==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==85862== 
==85862== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==85862==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==85862==    by 0x10D574: addIntSet (int-set.c:71)
==85862==    by 0x10A6A8: addElement (tests.c:35)
==85862==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==85862==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==85862==    by 0x10D482: main (tests.c:567)
==85862== 
==85862== LEAK SUMMARY:
==85862==    definitely lost: 16 bytes in 1 blocks
==85862==    indirectly lost: 0 bytes in 0 blocks
==85862==      possibly lost: 0 bytes in 0 blocks
==85862==    still reachable: 4,836 bytes in 187 blocks
==85862==         suppressed: 0 bytes in 0 blocks
==85862== Reachable blocks (those to which a pointer was found) are not shown.
==85862== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==85862== 
==85862== For lists of detected and suppressed errors, rerun with: -s
==85862== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet valgrind-testsclean[Kgdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b addIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = (Header *)malloc(sizeof(Header));
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = (Node *)calloc(1, sizeof(Node));
(gdb) 
82	        newNode->data = element;
(gdb) 
83	        newNode->next = tempHead->dummyNode->next;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[33maddIntSet[m ([36mintSet[m=0x5555555665d0, [36melement[m=33) at [32mint-set.c[m:83
83	        newNode->next = tempHead->dummyNode->next;
(gdb) q
A debugging session is active.

	Inferior 1 [process 85988] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ am[K[Kmake clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
Running suite(s): addIntSet
Segmentation fault (core dumped)
make: *** [tests.make:8: do-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSetclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet valgrind-tests
==86374== Memcheck, a memory error detector
==86374== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86374== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86374== Command: ./tests
==86374== 
Running suite(s): addIntSet
==86374== Invalid read of size 8
==86374==    at 0x10D5B3: addIntSet (int-set.c:83)
==86374==    by 0x10A6A8: addElement (tests.c:35)
==86374==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86374==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86374==    by 0x10D482: main (tests.c:567)
==86374==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==86374== 
==86374== 
==86374== Process terminating with default action of signal 11 (SIGSEGV)
==86374==  Access not within mapped region at address 0x8
==86374==    at 0x10D5B3: addIntSet (int-set.c:83)
==86374==    by 0x10A6A8: addElement (tests.c:35)
==86374==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86374==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86374==    by 0x10D482: main (tests.c:567)
==86374==  If you believe this happened as a result of a stack
==86374==  overflow in your program's main thread (unlikely but
==86374==  possible), you can try to increase the size of the
==86374==  main thread stack using the --main-stacksize= flag.
==86374==  The main thread stack size used in this run was 8388608.
==86374== 
==86374== HEAP SUMMARY:
==86374==     in use at exit: 4,852 bytes in 188 blocks
==86374==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==86374== 
==86374== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==86374==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86374==    by 0x10D571: addIntSet (int-set.c:71)
==86374==    by 0x10A6A8: addElement (tests.c:35)
==86374==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86374==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86374==    by 0x10D482: main (tests.c:567)
==86374== 
==86374== LEAK SUMMARY:
==86374==    definitely lost: 16 bytes in 1 blocks
==86374==    indirectly lost: 0 bytes in 0 blocks
==86374==      possibly lost: 0 bytes in 0 blocks
==86374==    still reachable: 4,836 bytes in 187 blocks
==86374==         suppressed: 0 bytes in 0 blocks
==86374== Reachable blocks (those to which a pointer was found) are not shown.
==86374== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==86374== 
==86374== For lists of detected and suppressed errors, rerun with: -s
==86374== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet valgrind-tests[C[C[C[C[C[C[K valgrind-tests[1P[1P[1P[1@n[1@e[1@w
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==86527== Memcheck, a memory error detector
==86527== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86527== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86527== Command: ./tests
==86527== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==86527== 
==86527== HEAP SUMMARY:
==86527==     in use at exit: 16 bytes in 1 blocks
==86527==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==86527== 
==86527== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86527==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86527==    by 0x10D776: freeIntSet (int-set.c:136)
==86527==    by 0x10A578: newIntSetAndFree (tests.c:15)
==86527==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86527==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86527==    by 0x10D482: main (tests.c:567)
==86527== 
==86527== LEAK SUMMARY:
==86527==    definitely lost: 16 bytes in 1 blocks
==86527==    indirectly lost: 0 bytes in 0 blocks
==86527==      possibly lost: 0 bytes in 0 blocks
==86527==    still reachable: 0 bytes in 0 blocks
==86527==         suppressed: 0 bytes in 0 blocks
==86527== 
==86527== For lists of detected and suppressed errors, rerun with: -s
==86527== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=addIntSet valgrind-tests[K valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kmake -f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==86634== Memcheck, a memory error detector
==86634== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86634== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86634== Command: ./tests
==86634== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==86634== 
==86634== HEAP SUMMARY:
==86634==     in use at exit: 16 bytes in 1 blocks
==86634==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==86634== 
==86634== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86634==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86634==    by 0x10D776: freeIntSet (int-set.c:136)
==86634==    by 0x10A578: newIntSetAndFree (tests.c:15)
==86634==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86634==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86634==    by 0x10D482: main (tests.c:567)
==86634== 
==86634== LEAK SUMMARY:
==86634==    definitely lost: 16 bytes in 1 blocks
==86634==    indirectly lost: 0 bytes in 0 blocks
==86634==      possibly lost: 0 bytes in 0 blocks
==86634==    still reachable: 0 bytes in 0 blocks
==86634==         suppressed: 0 bytes in 0 blocks
==86634== 
==86634== For lists of detected and suppressed errors, rerun with: -s
==86634== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==86759== Memcheck, a memory error detector
==86759== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86759== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86759== Command: ./tests
==86759== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==86759== 
==86759== HEAP SUMMARY:
==86759==     in use at exit: 16 bytes in 1 blocks
==86759==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==86759== 
==86759== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86759==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86759==    by 0x10D776: freeIntSet (int-set.c:136)
==86759==    by 0x10A578: newIntSetAndFree (tests.c:15)
==86759==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86759==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86759==    by 0x10D482: main (tests.c:567)
==86759== 
==86759== LEAK SUMMARY:
==86759==    definitely lost: 16 bytes in 1 blocks
==86759==    indirectly lost: 0 bytes in 0 blocks
==86759==      possibly lost: 0 bytes in 0 blocks
==86759==    still reachable: 0 bytes in 0 blocks
==86759==         suppressed: 0 bytes in 0 blocks
==86759== 
==86759== For lists of detected and suppressed errors, rerun with: -s
==86759== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==86826== Memcheck, a memory error detector
==86826== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86826== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86826== Command: ./tests
==86826== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==86826== 
==86826== HEAP SUMMARY:
==86826==     in use at exit: 16 bytes in 1 blocks
==86826==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==86826== 
==86826== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86826==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86826==    by 0x10D776: freeIntSet (int-set.c:136)
==86826==    by 0x10A578: newIntSetAndFree (tests.c:15)
==86826==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86826==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86826==    by 0x10D482: main (tests.c:567)
==86826== 
==86826== LEAK SUMMARY:
==86826==    definitely lost: 16 bytes in 1 blocks
==86826==    indirectly lost: 0 bytes in 0 blocks
==86826==      possibly lost: 0 bytes in 0 blocks
==86826==    still reachable: 0 bytes in 0 blocks
==86826==         suppressed: 0 bytes in 0 blocks
==86826== 
==86826== For lists of detected and suppressed errors, rerun with: -s
==86826== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==86906== Memcheck, a memory error detector
==86906== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86906== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86906== Command: ./tests
==86906== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==86906== 
==86906== HEAP SUMMARY:
==86906==     in use at exit: 16 bytes in 1 blocks
==86906==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==86906== 
==86906== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86906==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86906==    by 0x10D776: freeIntSet (int-set.c:136)
==86906==    by 0x10A578: newIntSetAndFree (tests.c:15)
==86906==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86906==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86906==    by 0x10D482: main (tests.c:567)
==86906== 
==86906== LEAK SUMMARY:
==86906==    definitely lost: 16 bytes in 1 blocks
==86906==    indirectly lost: 0 bytes in 0 blocks
==86906==      possibly lost: 0 bytes in 0 blocks
==86906==    still reachable: 0 bytes in 0 blocks
==86906==         suppressed: 0 bytes in 0 blocks
==86906== 
==86906== For lists of detected and suppressed errors, rerun with: -s
==86906== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==86983== Memcheck, a memory error detector
==86983== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==86983== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==86983== Command: ./tests
==86983== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==86983== 
==86983== HEAP SUMMARY:
==86983==     in use at exit: 16 bytes in 1 blocks
==86983==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==86983== 
==86983== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86983==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86983==    by 0x10D776: freeIntSet (int-set.c:136)
==86983==    by 0x10A578: newIntSetAndFree (tests.c:15)
==86983==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==86983==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==86983==    by 0x10D482: main (tests.c:567)
==86983== 
==86983== LEAK SUMMARY:
==86983==    definitely lost: 16 bytes in 1 blocks
==86983==    indirectly lost: 0 bytes in 0 blocks
==86983==      possibly lost: 0 bytes in 0 blocks
==86983==    still reachable: 0 bytes in 0 blocks
==86983==         suppressed: 0 bytes in 0 blocks
==86983== 
==86983== For lists of detected and suppressed errors, rerun with: -s
==86983== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==87086== Memcheck, a memory error detector
==87086== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87086== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87086== Command: ./tests
==87086== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87086== 
==87086== HEAP SUMMARY:
==87086==     in use at exit: 16 bytes in 1 blocks
==87086==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==87086== 
==87086== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==87086==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==87086==    by 0x10D776: freeIntSet (int-set.c:136)
==87086==    by 0x10A578: newIntSetAndFree (tests.c:15)
==87086==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==87086==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==87086==    by 0x10D482: main (tests.c:567)
==87086== 
==87086== LEAK SUMMARY:
==87086==    definitely lost: 16 bytes in 1 blocks
==87086==    indirectly lost: 0 bytes in 0 blocks
==87086==      possibly lost: 0 bytes in 0 blocks
==87086==    still reachable: 0 bytes in 0 blocks
==87086==         suppressed: 0 bytes in 0 blocks
==87086== 
==87086== For lists of detected and suppressed errors, rerun with: -s
==87086== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==87150== Memcheck, a memory error detector
==87150== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87150== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87150== Command: ./tests
==87150== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87150== 
==87150== HEAP SUMMARY:
==87150==     in use at exit: 16 bytes in 1 blocks
==87150==   total heap usage: 223 allocs, 222 frees, 19,485 bytes allocated
==87150== 
==87150== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==87150==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==87150==    by 0x10D776: freeIntSet (int-set.c:136)
==87150==    by 0x10A578: newIntSetAndFree (tests.c:15)
==87150==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==87150==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==87150==    by 0x10D482: main (tests.c:567)
==87150== 
==87150== LEAK SUMMARY:
==87150==    definitely lost: 16 bytes in 1 blocks
==87150==    indirectly lost: 0 bytes in 0 blocks
==87150==      possibly lost: 0 bytes in 0 blocks
==87150==    still reachable: 0 bytes in 0 blocks
==87150==         suppressed: 0 bytes in 0 blocks
==87150== 
==87150== For lists of detected and suppressed errors, rerun with: -s
==87150== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==87225== Memcheck, a memory error detector
==87225== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87225== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87225== Command: ./tests
==87225== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87225== 
==87225== HEAP SUMMARY:
==87225==     in use at exit: 0 bytes in 0 blocks
==87225==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==87225== 
==87225== All heap blocks were freed -- no leaks are possible
==87225== 
==87225== For lists of detected and suppressed errors, rerun with: -s
==87225== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==87314== Memcheck, a memory error detector
==87314== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87314== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87314== Command: ./tests
==87314== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87314== 
==87314== HEAP SUMMARY:
==87314==     in use at exit: 0 bytes in 0 blocks
==87314==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==87314== 
==87314== All heap blocks were freed -- no leaks are possible
==87314== 
==87314== For lists of detected and suppressed errors, rerun with: -s
==87314== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==87377== Memcheck, a memory error detector
==87377== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87377== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87377== Command: ./tests
==87377== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87377== 
==87377== HEAP SUMMARY:
==87377==     in use at exit: 16 bytes in 1 blocks
==87377==   total heap usage: 222 allocs, 221 frees, 19,469 bytes allocated
==87377== 
==87377== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==87377==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==87377==    by 0x10D4C0: newIntSet (int-set.c:24)
==87377==    by 0x10A559: newIntSetAndFree (tests.c:13)
==87377==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==87377==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==87377==    by 0x10D482: main (tests.c:567)
==87377== 
==87377== LEAK SUMMARY:
==87377==    definitely lost: 16 bytes in 1 blocks
==87377==    indirectly lost: 0 bytes in 0 blocks
==87377==      possibly lost: 0 bytes in 0 blocks
==87377==    still reachable: 0 bytes in 0 blocks
==87377==         suppressed: 0 bytes in 0 blocks
==87377== 
==87377== For lists of detected and suppressed errors, rerun with: -s
==87377== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-tests
cc -g -Wall -std=c18   -c -o tests.o tests.c
cc -g -Wall -std=c18   -c -o int-set.o int-set.c
cc -g -Wall -std=c18   -c -o int-set-strings.o int-set-strings.c
cc tests.o int-set.o int-set-strings.o -lcheck -lm -lrt -lpthread -lsubunit -o tests
==87456== Memcheck, a memory error detector
==87456== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87456== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87456== Command: ./tests
==87456== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87456== 
==87456== HEAP SUMMARY:
==87456==     in use at exit: 0 bytes in 0 blocks
==87456==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==87456== 
==87456== All heap blocks were freed -- no leaks are possible
==87456== 
==87456== For lists of detected and suppressed errors, rerun with: -s
==87456== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet valgrind-tests[C -s
==87524== Memcheck, a memory error detector
==87524== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87524== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87524== Command: ./tests
==87524== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87524== 
==87524== HEAP SUMMARY:
==87524==     in use at exit: 0 bytes in 0 blocks
==87524==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==87524== 
==87524== All heap blocks were freed -- no leaks are possible
==87524== 
==87524== For lists of detected and suppressed errors, rerun with: -s
==87524== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet valgrind-tests -s[K[K[K-valgrind-testssvalgrind-tests valgrind-tests
==87611== Memcheck, a memory error detector
==87611== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87611== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87611== Command: ./tests
==87611== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==87611== 
==87611== HEAP SUMMARY:
==87611==     in use at exit: 0 bytes in 0 blocks
==87611==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==87611== 
==87611== All heap blocks were freed -- no leaks are possible
==87611== 
==87611== For lists of detected and suppressed errors, rerun with: -s
==87611== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ valgrin [Kd tests
valgrind: tests: command not found
josh@machine:~/Documents/CS220/prj2-sol$ valgrind tests[1Ptests-tests
valgrind-tests: command not found
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleanvalgrind-tests testsmake -f tests.make CK_SUITE=newIntSet -s valgrind-tests[1P[1P[1P[1@a[1@d[1@d
==87831== Memcheck, a memory error detector
==87831== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==87831== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==87831== Command: ./tests
==87831== 
Running suite(s): addIntSet
==87831== Invalid read of size 8
==87831==    at 0x10D5B3: addIntSet (int-set.c:83)
==87831==    by 0x10A6A8: addElement (tests.c:35)
==87831==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==87831==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==87831==    by 0x10D482: main (tests.c:567)
==87831==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==87831== 
==87831== 
==87831== Process terminating with default action of signal 11 (SIGSEGV)
==87831==  Access not within mapped region at address 0x8
==87831==    at 0x10D5B3: addIntSet (int-set.c:83)
==87831==    by 0x10A6A8: addElement (tests.c:35)
==87831==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==87831==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==87831==    by 0x10D482: main (tests.c:567)
==87831==  If you believe this happened as a result of a stack
==87831==  overflow in your program's main thread (unlikely but
==87831==  possible), you can try to increase the size of the
==87831==  main thread stack using the --main-stacksize= flag.
==87831==  The main thread stack size used in this run was 8388608.
==87831== 
==87831== HEAP SUMMARY:
==87831==     in use at exit: 4,852 bytes in 188 blocks
==87831==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==87831== 
==87831== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==87831==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==87831==    by 0x10D571: addIntSet (int-set.c:71)
==87831==    by 0x10A6A8: addElement (tests.c:35)
==87831==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==87831==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==87831==    by 0x10D482: main (tests.c:567)
==87831== 
==87831== LEAK SUMMARY:
==87831==    definitely lost: 16 bytes in 1 blocks
==87831==    indirectly lost: 0 bytes in 0 blocks
==87831==      possibly lost: 0 bytes in 0 blocks
==87831==    still reachable: 4,836 bytes in 187 blocks
==87831==         suppressed: 0 bytes in 0 blocks
==87831== Reachable blocks (those to which a pointer was found) are not shown.
==87831== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==87831== 
==87831== For lists of detected and suppressed errors, rerun with: -s
==87831== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==88175== Memcheck, a memory error detector
==88175== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==88175== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==88175== Command: ./tests
==88175== 
Running suite(s): addIntSet
==88175== Invalid read of size 8
==88175==    at 0x10D5B3: addIntSet (int-set.c:83)
==88175==    by 0x10A6A8: addElement (tests.c:35)
==88175==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88175==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88175==    by 0x10D482: main (tests.c:567)
==88175==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==88175== 
==88175== 
==88175== Process terminating with default action of signal 11 (SIGSEGV)
==88175==  Access not within mapped region at address 0x8
==88175==    at 0x10D5B3: addIntSet (int-set.c:83)
==88175==    by 0x10A6A8: addElement (tests.c:35)
==88175==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88175==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88175==    by 0x10D482: main (tests.c:567)
==88175==  If you believe this happened as a result of a stack
==88175==  overflow in your program's main thread (unlikely but
==88175==  possible), you can try to increase the size of the
==88175==  main thread stack using the --main-stacksize= flag.
==88175==  The main thread stack size used in this run was 8388608.
==88175== 
==88175== HEAP SUMMARY:
==88175==     in use at exit: 4,852 bytes in 188 blocks
==88175==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==88175== 
==88175== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==88175==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==88175==    by 0x10D571: addIntSet (int-set.c:71)
==88175==    by 0x10A6A8: addElement (tests.c:35)
==88175==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88175==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88175==    by 0x10D482: main (tests.c:567)
==88175== 
==88175== LEAK SUMMARY:
==88175==    definitely lost: 16 bytes in 1 blocks
==88175==    indirectly lost: 0 bytes in 0 blocks
==88175==      possibly lost: 0 bytes in 0 blocks
==88175==    still reachable: 4,836 bytes in 187 blocks
==88175==         suppressed: 0 bytes in 0 blocks
==88175== Reachable blocks (those to which a pointer was found) are not shown.
==88175== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==88175== 
==88175== For lists of detected and suppressed errors, rerun with: -s
==88175== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[Kvalgrind-tests testsmake -f tests.make CK_SUITE=newIntSet -s valgrind-testsvalgrind-tests -s[Kclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-testsclean[K-f tests.make CK_SUITE=newIntSet valgrind-tests -s-s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvalgrind tests[K-tests[4Pmake clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kgdv [K[Kv[Kb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b addint[K[K[Kintset
Function "addintset" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) addIntSetbaddIntSet[C[C[C[C[C[C[C addIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = malloc(sizeof *tempHead);
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
82	        newNode->data = element;
(gdb) 
83	        newNode->next = tempHead->dummyNode->next;
(gdb) newNode
Undefined command: "newNode".  Try "help".
(gdb) p newNode
$1 = (Node *) [34m0x555555566590[m
(gdb) p newNode*newNode(newNodeNnewNodeonewNodednewNodeenewNode newNode(newNode[1PnewNode*newNode)newNode
$2 = {data = 33, next = [34m0x0[m}
(gdb) p *(Node *)newNode->new[Kxr[Kt
Cannot access memory at address 0x0
(gdb) 
[1]+  Stopped                 gdb ./tests
josh@machine:~/Documents/CS220/prj2-sol$ fg
gdb ./tests
q
q
A debugging session is active.

	Inferior 1 [process 88319] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleanfg[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==88712== Memcheck, a memory error detector
==88712== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==88712== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==88712== Command: ./tests
==88712== 
Running suite(s): addIntSet
==88712== Invalid read of size 8
==88712==    at 0x10D5B3: addIntSet (int-set.c:83)
==88712==    by 0x10A6A8: addElement (tests.c:35)
==88712==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88712==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88712==    by 0x10D482: main (tests.c:567)
==88712==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==88712== 
==88712== 
==88712== Process terminating with default action of signal 11 (SIGSEGV)
==88712==  Access not within mapped region at address 0x8
==88712==    at 0x10D5B3: addIntSet (int-set.c:83)
==88712==    by 0x10A6A8: addElement (tests.c:35)
==88712==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88712==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88712==    by 0x10D482: main (tests.c:567)
==88712==  If you believe this happened as a result of a stack
==88712==  overflow in your program's main thread (unlikely but
==88712==  possible), you can try to increase the size of the
==88712==  main thread stack using the --main-stacksize= flag.
==88712==  The main thread stack size used in this run was 8388608.
==88712== 
==88712== HEAP SUMMARY:
==88712==     in use at exit: 4,868 bytes in 188 blocks
==88712==   total heap usage: 211 allocs, 23 frees, 10,475 bytes allocated
==88712== 
==88712== 16 bytes in 1 blocks are definitely lost in loss record 74 of 188
==88712==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==88712==    by 0x10D571: addIntSet (int-set.c:71)
==88712==    by 0x10A6A8: addElement (tests.c:35)
==88712==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88712==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88712==    by 0x10D482: main (tests.c:567)
==88712== 
==88712== LEAK SUMMARY:
==88712==    definitely lost: 16 bytes in 1 blocks
==88712==    indirectly lost: 0 bytes in 0 blocks
==88712==      possibly lost: 0 bytes in 0 blocks
==88712==    still reachable: 4,852 bytes in 187 blocks
==88712==         suppressed: 0 bytes in 0 blocks
==88712== Reachable blocks (those to which a pointer was found) are not shown.
==88712== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==88712== 
==88712== For lists of detected and suppressed errors, rerun with: -s
==88712== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==88804== Memcheck, a memory error detector
==88804== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==88804== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==88804== Command: ./tests
==88804== 
Running suite(s): addIntSet
==88804== Invalid read of size 8
==88804==    at 0x10D5B3: addIntSet (int-set.c:83)
==88804==    by 0x10A6A8: addElement (tests.c:35)
==88804==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88804==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88804==    by 0x10D482: main (tests.c:567)
==88804==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==88804== 
==88804== 
==88804== Process terminating with default action of signal 11 (SIGSEGV)
==88804==  Access not within mapped region at address 0x8
==88804==    at 0x10D5B3: addIntSet (int-set.c:83)
==88804==    by 0x10A6A8: addElement (tests.c:35)
==88804==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88804==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88804==    by 0x10D482: main (tests.c:567)
==88804==  If you believe this happened as a result of a stack
==88804==  overflow in your program's main thread (unlikely but
==88804==  possible), you can try to increase the size of the
==88804==  main thread stack using the --main-stacksize= flag.
==88804==  The main thread stack size used in this run was 8388608.
==88804== 
==88804== HEAP SUMMARY:
==88804==     in use at exit: 4,868 bytes in 188 blocks
==88804==   total heap usage: 211 allocs, 23 frees, 10,475 bytes allocated
==88804== 
==88804== 16 bytes in 1 blocks are definitely lost in loss record 74 of 188
==88804==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==88804==    by 0x10D571: addIntSet (int-set.c:71)
==88804==    by 0x10A6A8: addElement (tests.c:35)
==88804==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88804==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88804==    by 0x10D482: main (tests.c:567)
==88804== 
==88804== LEAK SUMMARY:
==88804==    definitely lost: 16 bytes in 1 blocks
==88804==    indirectly lost: 0 bytes in 0 blocks
==88804==      possibly lost: 0 bytes in 0 blocks
==88804==    still reachable: 4,852 bytes in 187 blocks
==88804==         suppressed: 0 bytes in 0 blocks
==88804== Reachable blocks (those to which a pointer was found) are not shown.
==88804== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==88804== 
==88804== For lists of detected and suppressed errors, rerun with: -s
==88804== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==88864== Memcheck, a memory error detector
==88864== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==88864== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==88864== Command: ./tests
==88864== 
Running suite(s): addIntSet
==88864== Invalid read of size 8
==88864==    at 0x10D5B3: addIntSet (int-set.c:83)
==88864==    by 0x10A6A8: addElement (tests.c:35)
==88864==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88864==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88864==    by 0x10D482: main (tests.c:567)
==88864==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==88864== 
==88864== 
==88864== Process terminating with default action of signal 11 (SIGSEGV)
==88864==  Access not within mapped region at address 0x8
==88864==    at 0x10D5B3: addIntSet (int-set.c:83)
==88864==    by 0x10A6A8: addElement (tests.c:35)
==88864==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88864==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88864==    by 0x10D482: main (tests.c:567)
==88864==  If you believe this happened as a result of a stack
==88864==  overflow in your program's main thread (unlikely but
==88864==  possible), you can try to increase the size of the
==88864==  main thread stack using the --main-stacksize= flag.
==88864==  The main thread stack size used in this run was 8388608.
==88864== 
==88864== HEAP SUMMARY:
==88864==     in use at exit: 4,852 bytes in 188 blocks
==88864==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==88864== 
==88864== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==88864==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==88864==    by 0x10D571: addIntSet (int-set.c:71)
==88864==    by 0x10A6A8: addElement (tests.c:35)
==88864==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88864==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88864==    by 0x10D482: main (tests.c:567)
==88864== 
==88864== LEAK SUMMARY:
==88864==    definitely lost: 16 bytes in 1 blocks
==88864==    indirectly lost: 0 bytes in 0 blocks
==88864==      possibly lost: 0 bytes in 0 blocks
==88864==    still reachable: 4,836 bytes in 187 blocks
==88864==         suppressed: 0 bytes in 0 blocks
==88864== Reachable blocks (those to which a pointer was found) are not shown.
==88864== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==88864== 
==88864== For lists of detected and suppressed errors, rerun with: -s
==88864== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==88989== Memcheck, a memory error detector
==88989== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==88989== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==88989== Command: ./tests
==88989== 
Running suite(s): addIntSet
==88989== Invalid write of size 8
==88989==    at 0x10D5B7: addIntSet (int-set.c:83)
==88989==    by 0x10A6A8: addElement (tests.c:35)
==88989==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88989==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88989==    by 0x10D482: main (tests.c:567)
==88989==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==88989== 
==88989== 
==88989== Process terminating with default action of signal 11 (SIGSEGV)
==88989==  Access not within mapped region at address 0x8
==88989==    at 0x10D5B7: addIntSet (int-set.c:83)
==88989==    by 0x10A6A8: addElement (tests.c:35)
==88989==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88989==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88989==    by 0x10D482: main (tests.c:567)
==88989==  If you believe this happened as a result of a stack
==88989==  overflow in your program's main thread (unlikely but
==88989==  possible), you can try to increase the size of the
==88989==  main thread stack using the --main-stacksize= flag.
==88989==  The main thread stack size used in this run was 8388608.
==88989== 
==88989== HEAP SUMMARY:
==88989==     in use at exit: 4,852 bytes in 188 blocks
==88989==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==88989== 
==88989== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==88989==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==88989==    by 0x10D571: addIntSet (int-set.c:71)
==88989==    by 0x10A6A8: addElement (tests.c:35)
==88989==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==88989==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==88989==    by 0x10D482: main (tests.c:567)
==88989== 
==88989== LEAK SUMMARY:
==88989==    definitely lost: 16 bytes in 1 blocks
==88989==    indirectly lost: 0 bytes in 0 blocks
==88989==      possibly lost: 0 bytes in 0 blocks
==88989==    still reachable: 4,836 bytes in 187 blocks
==88989==         suppressed: 0 bytes in 0 blocks
==88989== Reachable blocks (those to which a pointer was found) are not shown.
==88989== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==88989== 
==88989== For lists of detected and suppressed errors, rerun with: -s
==88989== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[1P[1P[1P[1@n[1@e[1@w
==89037== Memcheck, a memory error detector
==89037== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==89037== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==89037== Command: ./tests
==89037== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==89037== 
==89037== HEAP SUMMARY:
==89037==     in use at exit: 0 bytes in 0 blocks
==89037==   total heap usage: 222 allocs, 222 frees, 19,469 bytes allocated
==89037== 
==89037== All heap blocks were freed -- no leaks are possible
==89037== 
==89037== For lists of detected and suppressed errors, rerun with: -s
==89037== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet -s valgrind-testsadd[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==89058== Memcheck, a memory error detector
==89058== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==89058== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==89058== Command: ./tests
==89058== 
Running suite(s): addIntSet
==89058== Invalid write of size 8
==89058==    at 0x10D5B7: addIntSet (int-set.c:83)
==89058==    by 0x10A6A8: addElement (tests.c:35)
==89058==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89058==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89058==    by 0x10D482: main (tests.c:567)
==89058==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==89058== 
==89058== 
==89058== Process terminating with default action of signal 11 (SIGSEGV)
==89058==  Access not within mapped region at address 0x8
==89058==    at 0x10D5B7: addIntSet (int-set.c:83)
==89058==    by 0x10A6A8: addElement (tests.c:35)
==89058==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89058==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89058==    by 0x10D482: main (tests.c:567)
==89058==  If you believe this happened as a result of a stack
==89058==  overflow in your program's main thread (unlikely but
==89058==  possible), you can try to increase the size of the
==89058==  main thread stack using the --main-stacksize= flag.
==89058==  The main thread stack size used in this run was 8388608.
==89058== 
==89058== HEAP SUMMARY:
==89058==     in use at exit: 4,852 bytes in 188 blocks
==89058==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==89058== 
==89058== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==89058==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==89058==    by 0x10D571: addIntSet (int-set.c:71)
==89058==    by 0x10A6A8: addElement (tests.c:35)
==89058==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89058==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89058==    by 0x10D482: main (tests.c:567)
==89058== 
==89058== LEAK SUMMARY:
==89058==    definitely lost: 16 bytes in 1 blocks
==89058==    indirectly lost: 0 bytes in 0 blocks
==89058==      possibly lost: 0 bytes in 0 blocks
==89058==    still reachable: 4,836 bytes in 187 blocks
==89058==         suppressed: 0 bytes in 0 blocks
==89058== Reachable blocks (those to which a pointer was found) are not shown.
==89058== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==89058== 
==89058== For lists of detected and suppressed errors, rerun with: -s
==89058== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==89137== Memcheck, a memory error detector
==89137== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==89137== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==89137== Command: ./tests
==89137== 
Running suite(s): addIntSet
==89137== Invalid write of size 8
==89137==    at 0x10D5B7: addIntSet (int-set.c:83)
==89137==    by 0x10A6A8: addElement (tests.c:35)
==89137==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89137==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89137==    by 0x10D482: main (tests.c:567)
==89137==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==89137== 
==89137== 
==89137== Process terminating with default action of signal 11 (SIGSEGV)
==89137==  Access not within mapped region at address 0x8
==89137==    at 0x10D5B7: addIntSet (int-set.c:83)
==89137==    by 0x10A6A8: addElement (tests.c:35)
==89137==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89137==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89137==    by 0x10D482: main (tests.c:567)
==89137==  If you believe this happened as a result of a stack
==89137==  overflow in your program's main thread (unlikely but
==89137==  possible), you can try to increase the size of the
==89137==  main thread stack using the --main-stacksize= flag.
==89137==  The main thread stack size used in this run was 8388608.
==89137== 
==89137== HEAP SUMMARY:
==89137==     in use at exit: 4,852 bytes in 188 blocks
==89137==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==89137== 
==89137== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==89137==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==89137==    by 0x10D571: addIntSet (int-set.c:71)
==89137==    by 0x10A6A8: addElement (tests.c:35)
==89137==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89137==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89137==    by 0x10D482: main (tests.c:567)
==89137== 
==89137== LEAK SUMMARY:
==89137==    definitely lost: 16 bytes in 1 blocks
==89137==    indirectly lost: 0 bytes in 0 blocks
==89137==      possibly lost: 0 bytes in 0 blocks
==89137==    still reachable: 4,836 bytes in 187 blocks
==89137==         suppressed: 0 bytes in 0 blocks
==89137== Reachable blocks (those to which a pointer was found) are not shown.
==89137== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==89137== 
==89137== For lists of detected and suppressed errors, rerun with: -s
==89137== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-testsnew[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cadd[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[Kfg[Kgdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b addIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
warning: Source file is more recent than executable.
64	{
(gdb) 
[1]+  Stopped                 gdb ./tests
josh@machine:~/Documents/CS220/prj2-sol$ gdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==89462== Memcheck, a memory error detector
==89462== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==89462== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==89462== Command: ./tests
==89462== 
Running suite(s): addIntSet
==89462== Invalid write of size 8
==89462==    at 0x10D5B7: addIntSet (int-set.c:83)
==89462==    by 0x10A6A8: addElement (tests.c:35)
==89462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89462==    by 0x10D482: main (tests.c:567)
==89462==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==89462== 
==89462== 
==89462== Process terminating with default action of signal 11 (SIGSEGV)
==89462==  Access not within mapped region at address 0x8
==89462==    at 0x10D5B7: addIntSet (int-set.c:83)
==89462==    by 0x10A6A8: addElement (tests.c:35)
==89462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89462==    by 0x10D482: main (tests.c:567)
==89462==  If you believe this happened as a result of a stack
==89462==  overflow in your program's main thread (unlikely but
==89462==  possible), you can try to increase the size of the
==89462==  main thread stack using the --main-stacksize= flag.
==89462==  The main thread stack size used in this run was 8388608.
==89462== 
==89462== HEAP SUMMARY:
==89462==     in use at exit: 4,852 bytes in 188 blocks
==89462==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==89462== 
==89462== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==89462==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==89462==    by 0x10D571: addIntSet (int-set.c:71)
==89462==    by 0x10A6A8: addElement (tests.c:35)
==89462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89462==    by 0x10D482: main (tests.c:567)
==89462== 
==89462== LEAK SUMMARY:
==89462==    definitely lost: 16 bytes in 1 blocks
==89462==    indirectly lost: 0 bytes in 0 blocks
==89462==      possibly lost: 0 bytes in 0 blocks
==89462==    still reachable: 4,836 bytes in 187 blocks
==89462==         suppressed: 0 bytes in 0 blocks
==89462== Reachable blocks (those to which a pointer was found) are not shown.
==89462== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==89462== 
==89462== For lists of detected and suppressed errors, rerun with: -s
==89462== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b in[K[K[K addint[K[K[KIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = malloc(sizeof *tempHead);
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
82	        newNode->data = element;
(gdb) 
83	        tempHead->dummyNode->next = newNode;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[34m0x00005555555595b7[m in [33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:83
83	        tempHead->dummyNode->next = newNode;
(gdb) f[Kq
A debugging session is active.

	Inferior 1 [process 89568] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ mak [Ke clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==89977== Memcheck, a memory error detector
==89977== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==89977== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==89977== Command: ./tests
==89977== 
Running suite(s): addIntSet
==89977== Invalid write of size 8
==89977==    at 0x10D5C8: addIntSet (int-set.c:85)
==89977==    by 0x10A6A8: addElement (tests.c:35)
==89977==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x10D482: main (tests.c:567)
==89977==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==89977== 
==89977== 
==89977== Process terminating with default action of signal 11 (SIGSEGV)
==89977==  Access not within mapped region at address 0x8
==89977==    at 0x10D5C8: addIntSet (int-set.c:85)
==89977==    by 0x10A6A8: addElement (tests.c:35)
==89977==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x10D482: main (tests.c:567)
==89977==  If you believe this happened as a result of a stack
==89977==  overflow in your program's main thread (unlikely but
==89977==  possible), you can try to increase the size of the
==89977==  main thread stack using the --main-stacksize= flag.
==89977==  The main thread stack size used in this run was 8388608.
==89977== 
==89977== HEAP SUMMARY:
==89977==     in use at exit: 4,860 bytes in 189 blocks
==89977==   total heap usage: 212 allocs, 23 frees, 10,467 bytes allocated
==89977== 
==89977== 8 bytes in 1 blocks are definitely lost in loss record 58 of 189
==89977==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==89977==    by 0x10D5C7: addIntSet (int-set.c:85)
==89977==    by 0x10A6A8: addElement (tests.c:35)
==89977==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x10D482: main (tests.c:567)
==89977== 
==89977== 16 bytes in 1 blocks are definitely lost in loss record 76 of 189
==89977==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==89977==    by 0x10D572: addIntSet (int-set.c:71)
==89977==    by 0x10A6A8: addElement (tests.c:35)
==89977==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==89977==    by 0x10D482: main (tests.c:567)
==89977== 
==89977== LEAK SUMMARY:
==89977==    definitely lost: 24 bytes in 2 blocks
==89977==    indirectly lost: 0 bytes in 0 blocks
==89977==      possibly lost: 0 bytes in 0 blocks
==89977==    still reachable: 4,836 bytes in 187 blocks
==89977==         suppressed: 0 bytes in 0 blocks
==89977== Reachable blocks (those to which a pointer was found) are not shown.
==89977== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==89977== 
==89977== For lists of detected and suppressed errors, rerun with: -s
==89977== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kmaek c[K[K[K[Ke[Kke clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==90155== Memcheck, a memory error detector
==90155== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90155== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90155== Command: ./tests
==90155== 
Running suite(s): addIntSet
==90155== Invalid write of size 8
==90155==    at 0x10D5C8: addIntSet (int-set.c:85)
==90155==    by 0x10A6A8: addElement (tests.c:35)
==90155==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x10D482: main (tests.c:567)
==90155==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90155== 
==90155== 
==90155== Process terminating with default action of signal 11 (SIGSEGV)
==90155==  Access not within mapped region at address 0x8
==90155==    at 0x10D5C8: addIntSet (int-set.c:85)
==90155==    by 0x10A6A8: addElement (tests.c:35)
==90155==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x10D482: main (tests.c:567)
==90155==  If you believe this happened as a result of a stack
==90155==  overflow in your program's main thread (unlikely but
==90155==  possible), you can try to increase the size of the
==90155==  main thread stack using the --main-stacksize= flag.
==90155==  The main thread stack size used in this run was 8388608.
==90155== 
==90155== HEAP SUMMARY:
==90155==     in use at exit: 4,868 bytes in 189 blocks
==90155==   total heap usage: 212 allocs, 23 frees, 10,475 bytes allocated
==90155== 
==90155== 16 bytes in 1 blocks are definitely lost in loss record 75 of 189
==90155==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90155==    by 0x10D572: addIntSet (int-set.c:71)
==90155==    by 0x10A6A8: addElement (tests.c:35)
==90155==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x10D482: main (tests.c:567)
==90155== 
==90155== 16 bytes in 1 blocks are definitely lost in loss record 76 of 189
==90155==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90155==    by 0x10D5C7: addIntSet (int-set.c:85)
==90155==    by 0x10A6A8: addElement (tests.c:35)
==90155==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90155==    by 0x10D482: main (tests.c:567)
==90155== 
==90155== LEAK SUMMARY:
==90155==    definitely lost: 32 bytes in 2 blocks
==90155==    indirectly lost: 0 bytes in 0 blocks
==90155==      possibly lost: 0 bytes in 0 blocks
==90155==    still reachable: 4,836 bytes in 187 blocks
==90155==         suppressed: 0 bytes in 0 blocks
==90155== Reachable blocks (those to which a pointer was found) are not shown.
==90155== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90155== 
==90155== For lists of detected and suppressed errors, rerun with: -s
==90155== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==90338== Memcheck, a memory error detector
==90338== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90338== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90338== Command: ./tests
==90338== 
Running suite(s): addIntSet
==90338== Invalid write of size 8
==90338==    at 0x10D5C1: addIntSet (int-set.c:85)
==90338==    by 0x10A6A8: addElement (tests.c:35)
==90338==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90338==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90338==    by 0x10D482: main (tests.c:567)
==90338==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90338== 
==90338== 
==90338== Process terminating with default action of signal 11 (SIGSEGV)
==90338==  Access not within mapped region at address 0x8
==90338==    at 0x10D5C1: addIntSet (int-set.c:85)
==90338==    by 0x10A6A8: addElement (tests.c:35)
==90338==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90338==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90338==    by 0x10D482: main (tests.c:567)
==90338==  If you believe this happened as a result of a stack
==90338==  overflow in your program's main thread (unlikely but
==90338==  possible), you can try to increase the size of the
==90338==  main thread stack using the --main-stacksize= flag.
==90338==  The main thread stack size used in this run was 8388608.
==90338== 
==90338== HEAP SUMMARY:
==90338==     in use at exit: 4,852 bytes in 188 blocks
==90338==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==90338== 
==90338== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==90338==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90338==    by 0x10D571: addIntSet (int-set.c:71)
==90338==    by 0x10A6A8: addElement (tests.c:35)
==90338==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90338==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90338==    by 0x10D482: main (tests.c:567)
==90338== 
==90338== LEAK SUMMARY:
==90338==    definitely lost: 16 bytes in 1 blocks
==90338==    indirectly lost: 0 bytes in 0 blocks
==90338==      possibly lost: 0 bytes in 0 blocks
==90338==    still reachable: 4,836 bytes in 187 blocks
==90338==         suppressed: 0 bytes in 0 blocks
==90338== Reachable blocks (those to which a pointer was found) are not shown.
==90338== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90338== 
==90338== For lists of detected and suppressed errors, rerun with: -s
==90338== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[1P[1P[1P[1@n[1@E[1@l[1@e[1@m[1@e[1@n[1@t[1@s
==90573== Memcheck, a memory error detector
==90573== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90573== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90573== Command: ./tests
==90573== 
Running suite(s): nElementsIntSet
==90573== Invalid write of size 8
==90573==    at 0x10D5C8: addIntSet (int-set.c:85)
==90573==    by 0x10A96B: nElements (tests.c:63)
==90573==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x10D482: main (tests.c:567)
==90573==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90573== 
==90573== 
==90573== Process terminating with default action of signal 11 (SIGSEGV)
==90573==  Access not within mapped region at address 0x8
==90573==    at 0x10D5C8: addIntSet (int-set.c:85)
==90573==    by 0x10A96B: nElements (tests.c:63)
==90573==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x10D482: main (tests.c:567)
==90573==  If you believe this happened as a result of a stack
==90573==  overflow in your program's main thread (unlikely but
==90573==  possible), you can try to increase the size of the
==90573==  main thread stack using the --main-stacksize= flag.
==90573==  The main thread stack size used in this run was 8388608.
==90573== 
==90573== HEAP SUMMARY:
==90573==     in use at exit: 4,868 bytes in 189 blocks
==90573==   total heap usage: 212 allocs, 23 frees, 10,475 bytes allocated
==90573== 
==90573== 16 bytes in 1 blocks are definitely lost in loss record 75 of 189
==90573==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90573==    by 0x10D572: addIntSet (int-set.c:71)
==90573==    by 0x10A96B: nElements (tests.c:63)
==90573==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x10D482: main (tests.c:567)
==90573== 
==90573== 16 bytes in 1 blocks are definitely lost in loss record 76 of 189
==90573==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90573==    by 0x10D5C7: addIntSet (int-set.c:85)
==90573==    by 0x10A96B: nElements (tests.c:63)
==90573==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90573==    by 0x10D482: main (tests.c:567)
==90573== 
==90573== LEAK SUMMARY:
==90573==    definitely lost: 32 bytes in 2 blocks
==90573==    indirectly lost: 0 bytes in 0 blocks
==90573==      possibly lost: 0 bytes in 0 blocks
==90573==    still reachable: 4,836 bytes in 187 blocks
==90573==         suppressed: 0 bytes in 0 blocks
==90573== Reachable blocks (those to which a pointer was found) are not shown.
==90573== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90573== 
==90573== For lists of detected and suppressed errors, rerun with: -s
==90573== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==90634== Memcheck, a memory error detector
==90634== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90634== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90634== Command: ./tests
==90634== 
Running suite(s): addIntSet
==90634== Invalid write of size 8
==90634==    at 0x10D5C8: addIntSet (int-set.c:85)
==90634==    by 0x10A6A8: addElement (tests.c:35)
==90634==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x10D482: main (tests.c:567)
==90634==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90634== 
==90634== 
==90634== Process terminating with default action of signal 11 (SIGSEGV)
==90634==  Access not within mapped region at address 0x8
==90634==    at 0x10D5C8: addIntSet (int-set.c:85)
==90634==    by 0x10A6A8: addElement (tests.c:35)
==90634==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x10D482: main (tests.c:567)
==90634==  If you believe this happened as a result of a stack
==90634==  overflow in your program's main thread (unlikely but
==90634==  possible), you can try to increase the size of the
==90634==  main thread stack using the --main-stacksize= flag.
==90634==  The main thread stack size used in this run was 8388608.
==90634== 
==90634== HEAP SUMMARY:
==90634==     in use at exit: 4,868 bytes in 189 blocks
==90634==   total heap usage: 212 allocs, 23 frees, 10,475 bytes allocated
==90634== 
==90634== 16 bytes in 1 blocks are definitely lost in loss record 75 of 189
==90634==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90634==    by 0x10D572: addIntSet (int-set.c:71)
==90634==    by 0x10A6A8: addElement (tests.c:35)
==90634==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x10D482: main (tests.c:567)
==90634== 
==90634== 16 bytes in 1 blocks are definitely lost in loss record 76 of 189
==90634==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90634==    by 0x10D5C7: addIntSet (int-set.c:85)
==90634==    by 0x10A6A8: addElement (tests.c:35)
==90634==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90634==    by 0x10D482: main (tests.c:567)
==90634== 
==90634== LEAK SUMMARY:
==90634==    definitely lost: 32 bytes in 2 blocks
==90634==    indirectly lost: 0 bytes in 0 blocks
==90634==      possibly lost: 0 bytes in 0 blocks
==90634==    still reachable: 4,836 bytes in 187 blocks
==90634==         suppressed: 0 bytes in 0 blocks
==90634== Reachable blocks (those to which a pointer was found) are not shown.
==90634== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90634== 
==90634== For lists of detected and suppressed errors, rerun with: -s
==90634== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ c[Kmake clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==90709== Memcheck, a memory error detector
==90709== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90709== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90709== Command: ./tests
==90709== 
Running suite(s): addIntSet
==90709== Invalid write of size 8
==90709==    at 0x10D5C8: addIntSet (int-set.c:85)
==90709==    by 0x10A6A8: addElement (tests.c:35)
==90709==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x10D482: main (tests.c:567)
==90709==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90709== 
==90709== 
==90709== Process terminating with default action of signal 11 (SIGSEGV)
==90709==  Access not within mapped region at address 0x8
==90709==    at 0x10D5C8: addIntSet (int-set.c:85)
==90709==    by 0x10A6A8: addElement (tests.c:35)
==90709==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x10D482: main (tests.c:567)
==90709==  If you believe this happened as a result of a stack
==90709==  overflow in your program's main thread (unlikely but
==90709==  possible), you can try to increase the size of the
==90709==  main thread stack using the --main-stacksize= flag.
==90709==  The main thread stack size used in this run was 8388608.
==90709== 
==90709== HEAP SUMMARY:
==90709==     in use at exit: 4,868 bytes in 189 blocks
==90709==   total heap usage: 212 allocs, 23 frees, 10,475 bytes allocated
==90709== 
==90709== 16 bytes in 1 blocks are definitely lost in loss record 75 of 189
==90709==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90709==    by 0x10D572: addIntSet (int-set.c:71)
==90709==    by 0x10A6A8: addElement (tests.c:35)
==90709==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x10D482: main (tests.c:567)
==90709== 
==90709== 16 bytes in 1 blocks are definitely lost in loss record 76 of 189
==90709==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90709==    by 0x10D5C7: addIntSet (int-set.c:85)
==90709==    by 0x10A6A8: addElement (tests.c:35)
==90709==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90709==    by 0x10D482: main (tests.c:567)
==90709== 
==90709== LEAK SUMMARY:
==90709==    definitely lost: 32 bytes in 2 blocks
==90709==    indirectly lost: 0 bytes in 0 blocks
==90709==      possibly lost: 0 bytes in 0 blocks
==90709==    still reachable: 4,836 bytes in 187 blocks
==90709==         suppressed: 0 bytes in 0 blocks
==90709== Reachable blocks (those to which a pointer was found) are not shown.
==90709== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90709== 
==90709== For lists of detected and suppressed errors, rerun with: -s
==90709== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
[01m[Kint-set.c:[m[K In function â€˜[01m[KaddIntSet[m[Kâ€™:
[01m[Kint-set.c:85:39:[m[K [01;35m[Kwarning: [m[Kassignment to â€˜[01m[Kstruct NodeStruct *[m[Kâ€™ from incompatible pointer type â€˜[01m[KNode **[m[Kâ€™ {aka â€˜[01m[Kstruct NodeStruct **[m[Kâ€™} [[01;35m[K-Wincompatible-pointer-types[m[K]
   85 |             tempHead->dummyNode->next [01;35m[K=[m[K &newNode;
      |                                       [01;35m[K^[m[K
==90796== Memcheck, a memory error detector
==90796== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90796== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90796== Command: ./tests
==90796== 
Running suite(s): addIntSet
==90796== Invalid write of size 8
==90796==    at 0x10D5D0: addIntSet (int-set.c:85)
==90796==    by 0x10A6A8: addElement (tests.c:35)
==90796==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90796==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90796==    by 0x10D482: main (tests.c:567)
==90796==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90796== 
==90796== 
==90796== Process terminating with default action of signal 11 (SIGSEGV)
==90796==  Access not within mapped region at address 0x8
==90796==    at 0x10D5D0: addIntSet (int-set.c:85)
==90796==    by 0x10A6A8: addElement (tests.c:35)
==90796==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90796==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90796==    by 0x10D482: main (tests.c:567)
==90796==  If you believe this happened as a result of a stack
==90796==  overflow in your program's main thread (unlikely but
==90796==  possible), you can try to increase the size of the
==90796==  main thread stack using the --main-stacksize= flag.
==90796==  The main thread stack size used in this run was 8388608.
==90796== 
==90796== HEAP SUMMARY:
==90796==     in use at exit: 4,852 bytes in 188 blocks
==90796==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==90796== 
==90796== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==90796==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90796==    by 0x10D580: addIntSet (int-set.c:71)
==90796==    by 0x10A6A8: addElement (tests.c:35)
==90796==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90796==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90796==    by 0x10D482: main (tests.c:567)
==90796== 
==90796== LEAK SUMMARY:
==90796==    definitely lost: 16 bytes in 1 blocks
==90796==    indirectly lost: 0 bytes in 0 blocks
==90796==      possibly lost: 0 bytes in 0 blocks
==90796==    still reachable: 4,836 bytes in 187 blocks
==90796==         suppressed: 0 bytes in 0 blocks
==90796== Reachable blocks (those to which a pointer was found) are not shown.
==90796== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90796== 
==90796== For lists of detected and suppressed errors, rerun with: -s
==90796== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==90927== Memcheck, a memory error detector
==90927== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==90927== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==90927== Command: ./tests
==90927== 
Running suite(s): addIntSet
==90927== Invalid write of size 8
==90927==    at 0x10D5C1: addIntSet (int-set.c:85)
==90927==    by 0x10A6A8: addElement (tests.c:35)
==90927==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90927==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90927==    by 0x10D482: main (tests.c:567)
==90927==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==90927== 
==90927== 
==90927== Process terminating with default action of signal 11 (SIGSEGV)
==90927==  Access not within mapped region at address 0x8
==90927==    at 0x10D5C1: addIntSet (int-set.c:85)
==90927==    by 0x10A6A8: addElement (tests.c:35)
==90927==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90927==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90927==    by 0x10D482: main (tests.c:567)
==90927==  If you believe this happened as a result of a stack
==90927==  overflow in your program's main thread (unlikely but
==90927==  possible), you can try to increase the size of the
==90927==  main thread stack using the --main-stacksize= flag.
==90927==  The main thread stack size used in this run was 8388608.
==90927== 
==90927== HEAP SUMMARY:
==90927==     in use at exit: 4,852 bytes in 188 blocks
==90927==   total heap usage: 211 allocs, 23 frees, 10,459 bytes allocated
==90927== 
==90927== 16 bytes in 1 blocks are definitely lost in loss record 75 of 188
==90927==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==90927==    by 0x10D571: addIntSet (int-set.c:71)
==90927==    by 0x10A6A8: addElement (tests.c:35)
==90927==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==90927==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==90927==    by 0x10D482: main (tests.c:567)
==90927== 
==90927== LEAK SUMMARY:
==90927==    definitely lost: 16 bytes in 1 blocks
==90927==    indirectly lost: 0 bytes in 0 blocks
==90927==      possibly lost: 0 bytes in 0 blocks
==90927==    still reachable: 4,836 bytes in 187 blocks
==90927==         suppressed: 0 bytes in 0 blocks
==90927== Reachable blocks (those to which a pointer was found) are not shown.
==90927== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==90927== 
==90927== For lists of detected and suppressed errors, rerun with: -s
==90927== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[6@nElements[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b makeClea[K[K[K[K[K[K[K[K[K[Kb [K[Kb [K[Kb [K[Kb addIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = malloc(sizeof *tempHead);
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
82	        newNode->data = element;
(gdb) 
84	        if(tempHead->nElements == 0){
(gdb) p newNode
$1 = (Node *) [34m0x555555566590[m
(gdb) p newNode(newNodeNnewNodeonewNodednewNodeenewNode newNode*newNode)newNode
$2 = (Node *) [34m0x555555566590[m
(gdb) p (Node *)newNode[1@*
$3 = {data = 33, next = [34m0x0[m}
(gdb) p *(Node *)newNode[C[C[C[C[C[C[Kn
85	            tempHead->dummyNode->next = newNode;
(gdb) p *(Head *([K)tempHead
No symbol "Head" in current context.
(gdb) ddddddddd[K[K[K[K[K[K[K[K[Kn[Kp *(Head *)tempHeade *)tempHeadr *)tempHead
$4 = {nElements = 0, dummyNode = [34m0x0[m}
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
[34m0x00005555555595c1[m in [33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:85
85	            tempHead->dummyNode->next = newNode;
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x0, [36melement[m=32767) at [32mint-set.c[m:64
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = malloc(sizeof *tempHead);
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
82	        newNode->data = element;
(gdb) 
84	        if(tempHead->nElements == 0){
(gdb) 
85	            tempHead->dummyNode->next = newNode;
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[34m0x00005555555595c1[m in [33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:85
85	            tempHead->dummyNode->next = newNode;
(gdb) q
A debugging session is active.

	Inferior 1 [process 92392] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==92710== Memcheck, a memory error detector
==92710== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==92710== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==92710== Command: ./tests
==92710== 
Running suite(s): addIntSet
==92710== Invalid write of size 8
==92710==    at 0x10D5CB: addIntSet (int-set.c:85)
==92710==    by 0x10A6A8: addElement (tests.c:35)
==92710==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x10D482: main (tests.c:567)
==92710==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==92710== 
==92710== 
==92710== Process terminating with default action of signal 11 (SIGSEGV)
==92710==  Access not within mapped region at address 0x8
==92710==    at 0x10D5CB: addIntSet (int-set.c:85)
==92710==    by 0x10A6A8: addElement (tests.c:35)
==92710==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x10D482: main (tests.c:567)
==92710==  If you believe this happened as a result of a stack
==92710==  overflow in your program's main thread (unlikely but
==92710==  possible), you can try to increase the size of the
==92710==  main thread stack using the --main-stacksize= flag.
==92710==  The main thread stack size used in this run was 8388608.
==92710== 
==92710== HEAP SUMMARY:
==92710==     in use at exit: 4,868 bytes in 189 blocks
==92710==   total heap usage: 212 allocs, 23 frees, 10,475 bytes allocated
==92710== 
==92710== 16 bytes in 1 blocks are definitely lost in loss record 75 of 189
==92710==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==92710==    by 0x10D575: addIntSet (int-set.c:71)
==92710==    by 0x10A6A8: addElement (tests.c:35)
==92710==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x10D482: main (tests.c:567)
==92710== 
==92710== 16 bytes in 1 blocks are definitely lost in loss record 76 of 189
==92710==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==92710==    by 0x10D5CA: addIntSet (int-set.c:85)
==92710==    by 0x10A6A8: addElement (tests.c:35)
==92710==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==92710==    by 0x10D482: main (tests.c:567)
==92710== 
==92710== LEAK SUMMARY:
==92710==    definitely lost: 32 bytes in 2 blocks
==92710==    indirectly lost: 0 bytes in 0 blocks
==92710==      possibly lost: 0 bytes in 0 blocks
==92710==    still reachable: 4,836 bytes in 187 blocks
==92710==         suppressed: 0 bytes in 0 blocks
==92710== Reachable blocks (those to which a pointer was found) are not shown.
==92710== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==92710== 
==92710== For lists of detected and suppressed errors, rerun with: -s
==92710== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[Kgdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b addIntSet
Breakpoint 1 at [34m0x5547[m: file [32mint-set.c[m, line 64.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33maddIntSet[m ([36mintSet[m=0x55555555e096, [36melement[m=21845) at [32mint-set.c[m:64
64	{
(gdb) n
66	    if (intSet == NULL)
(gdb) 
71	    Header *tempHead = malloc(sizeof *tempHead);
(gdb) 
72	    tempHead = (Header *)intSet;
(gdb) 
75	    if (isInIntSet(intSet, element) == 1)
(gdb) 
81	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
82	        newNode->data = element;
(gdb) 
84	        if(tempHead->nElements == 0){
(gdb) 
85	            tempHead->dummyNode->next = malloc(sizeof(Node));
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
[33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:85
85	            tempHead->dummyNode->next = malloc(sizeof(Node));
(gdb) make clean
rm -f *~ *.o tests
clear
[H[2J[3J(gdb) qq'q
Undefined command: "qq".  Try "help".
(gdb) q
A debugging session is active.

	Inferior 1 [process 92829] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==93313== Memcheck, a memory error detector
==93313== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==93313== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==93313== Command: ./tests
==93313== 
Running suite(s): addIntSet
==93313== Conditional jump or move depends on uninitialised value(s)
==93313==    at 0x10D53E: isInIntSet (int-set.c:46)
==93313==    by 0x10D58E: addIntSet (int-set.c:75)
==93313==    by 0x10A6BC: addElement (tests.c:36)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== Conditional jump or move depends on uninitialised value(s)
==93313==    at 0x10D53E: isInIntSet (int-set.c:46)
==93313==    by 0x10D58E: addIntSet (int-set.c:75)
==93313==    by 0x10A6D0: addElement (tests.c:37)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==93313== 
==93313== HEAP SUMMARY:
==93313==     in use at exit: 144 bytes in 7 blocks
==93313==   total heap usage: 240 allocs, 233 frees, 19,999 bytes allocated
==93313== 
==93313== 16 bytes in 1 blocks are definitely lost in loss record 2 of 7
==93313==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93313==    by 0x10D59D: addIntSet (int-set.c:81)
==93313==    by 0x10A6BC: addElement (tests.c:36)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== 16 bytes in 1 blocks are definitely lost in loss record 3 of 7
==93313==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93313==    by 0x10D59D: addIntSet (int-set.c:81)
==93313==    by 0x10A6D0: addElement (tests.c:37)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== 24 bytes in 1 blocks are definitely lost in loss record 4 of 7
==93313==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93313==    by 0x10D571: addIntSet (int-set.c:71)
==93313==    by 0x10A6A8: addElement (tests.c:35)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== 24 bytes in 1 blocks are definitely lost in loss record 5 of 7
==93313==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93313==    by 0x10D571: addIntSet (int-set.c:71)
==93313==    by 0x10A6BC: addElement (tests.c:36)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== 24 bytes in 1 blocks are definitely lost in loss record 6 of 7
==93313==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93313==    by 0x10D571: addIntSet (int-set.c:71)
==93313==    by 0x10A6D0: addElement (tests.c:37)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==93313==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93313==    by 0x10D4C0: newIntSet (int-set.c:24)
==93313==    by 0x10A693: addElement (tests.c:34)
==93313==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93313==    by 0x10D482: main (tests.c:567)
==93313== 
==93313== LEAK SUMMARY:
==93313==    definitely lost: 128 bytes in 6 blocks
==93313==    indirectly lost: 16 bytes in 1 blocks
==93313==      possibly lost: 0 bytes in 0 blocks
==93313==    still reachable: 0 bytes in 0 blocks
==93313==         suppressed: 0 bytes in 0 blocks
==93313== 
==93313== Use --track-origins=yes to see where uninitialised values come from
==93313== For lists of detected and suppressed errors, rerun with: -s
==93313== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:44:22:[m[K [01;35m[Kwarning: [m[Kinitialization of â€˜[01m[KNode *[m[Kâ€™ {aka â€˜[01m[Kstruct NodeStruct *[m[Kâ€™} from incompatible pointer type â€˜[01m[KHeader *[m[Kâ€™ {aka â€˜[01m[Kstruct <anonymous> *[m[Kâ€™} [[01;35m[K-Wincompatible-pointer-types[m[K]
   44 |     Node *currNode = [01;35m[KtempHead[m[K;
      |                      [01;35m[K^~~~~~~~[m[K
==93462== Memcheck, a memory error detector
==93462== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==93462== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==93462== Command: ./tests
==93462== 
Running suite(s): addIntSet
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==93462== 
==93462== HEAP SUMMARY:
==93462==     in use at exit: 144 bytes in 7 blocks
==93462==   total heap usage: 240 allocs, 233 frees, 19,999 bytes allocated
==93462== 
==93462== 16 bytes in 1 blocks are definitely lost in loss record 2 of 7
==93462==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93462==    by 0x10D599: addIntSet (int-set.c:81)
==93462==    by 0x10A6BC: addElement (tests.c:36)
==93462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x10D482: main (tests.c:567)
==93462== 
==93462== 16 bytes in 1 blocks are definitely lost in loss record 3 of 7
==93462==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93462==    by 0x10D599: addIntSet (int-set.c:81)
==93462==    by 0x10A6D0: addElement (tests.c:37)
==93462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x10D482: main (tests.c:567)
==93462== 
==93462== 24 bytes in 1 blocks are definitely lost in loss record 4 of 7
==93462==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93462==    by 0x10D56D: addIntSet (int-set.c:71)
==93462==    by 0x10A6A8: addElement (tests.c:35)
==93462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x10D482: main (tests.c:567)
==93462== 
==93462== 24 bytes in 1 blocks are definitely lost in loss record 5 of 7
==93462==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93462==    by 0x10D56D: addIntSet (int-set.c:71)
==93462==    by 0x10A6BC: addElement (tests.c:36)
==93462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x10D482: main (tests.c:567)
==93462== 
==93462== 24 bytes in 1 blocks are definitely lost in loss record 6 of 7
==93462==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93462==    by 0x10D56D: addIntSet (int-set.c:71)
==93462==    by 0x10A6D0: addElement (tests.c:37)
==93462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x10D482: main (tests.c:567)
==93462== 
==93462== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==93462==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93462==    by 0x10D4C0: newIntSet (int-set.c:24)
==93462==    by 0x10A693: addElement (tests.c:34)
==93462==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93462==    by 0x10D482: main (tests.c:567)
==93462== 
==93462== LEAK SUMMARY:
==93462==    definitely lost: 128 bytes in 6 blocks
==93462==    indirectly lost: 16 bytes in 1 blocks
==93462==      possibly lost: 0 bytes in 0 blocks
==93462==    still reachable: 0 bytes in 0 blocks
==93462==         suppressed: 0 bytes in 0 blocks
==93462== 
==93462== For lists of detected and suppressed errors, rerun with: -s
==93462== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==93608== Memcheck, a memory error detector
==93608== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==93608== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==93608== Command: ./tests
==93608== 
Running suite(s): addIntSet
==93608== Conditional jump or move depends on uninitialised value(s)
==93608==    at 0x10D53E: isInIntSet (int-set.c:46)
==93608==    by 0x10D58E: addIntSet (int-set.c:75)
==93608==    by 0x10A6BC: addElement (tests.c:36)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== Conditional jump or move depends on uninitialised value(s)
==93608==    at 0x10D53E: isInIntSet (int-set.c:46)
==93608==    by 0x10D58E: addIntSet (int-set.c:75)
==93608==    by 0x10A6D0: addElement (tests.c:37)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==93608== 
==93608== HEAP SUMMARY:
==93608==     in use at exit: 144 bytes in 7 blocks
==93608==   total heap usage: 240 allocs, 233 frees, 19,999 bytes allocated
==93608== 
==93608== 16 bytes in 1 blocks are definitely lost in loss record 2 of 7
==93608==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93608==    by 0x10D59D: addIntSet (int-set.c:81)
==93608==    by 0x10A6BC: addElement (tests.c:36)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== 16 bytes in 1 blocks are definitely lost in loss record 3 of 7
==93608==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93608==    by 0x10D59D: addIntSet (int-set.c:81)
==93608==    by 0x10A6D0: addElement (tests.c:37)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== 24 bytes in 1 blocks are definitely lost in loss record 4 of 7
==93608==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93608==    by 0x10D571: addIntSet (int-set.c:71)
==93608==    by 0x10A6A8: addElement (tests.c:35)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== 24 bytes in 1 blocks are definitely lost in loss record 5 of 7
==93608==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93608==    by 0x10D571: addIntSet (int-set.c:71)
==93608==    by 0x10A6BC: addElement (tests.c:36)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== 24 bytes in 1 blocks are definitely lost in loss record 6 of 7
==93608==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93608==    by 0x10D571: addIntSet (int-set.c:71)
==93608==    by 0x10A6D0: addElement (tests.c:37)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==93608==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93608==    by 0x10D4C0: newIntSet (int-set.c:24)
==93608==    by 0x10A693: addElement (tests.c:34)
==93608==    by 0x10FE9A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x110286: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93608==    by 0x10D482: main (tests.c:567)
==93608== 
==93608== LEAK SUMMARY:
==93608==    definitely lost: 128 bytes in 6 blocks
==93608==    indirectly lost: 16 bytes in 1 blocks
==93608==      possibly lost: 0 bytes in 0 blocks
==93608==    still reachable: 0 bytes in 0 blocks
==93608==         suppressed: 0 bytes in 0 blocks
==93608== 
==93608== Use --track-origins=yes to see where uninitialised values come from
==93608== For lists of detected and suppressed errors, rerun with: -s
==93608== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make ned[Kxt[K[K[K[Kclean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==93981== Memcheck, a memory error detector
==93981== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==93981== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==93981== Command: ./tests
==93981== 
Running suite(s): addIntSet
==93981== Conditional jump or move depends on uninitialised value(s)
==93981==    at 0x10D555: isInIntSet (int-set.c:47)
==93981==    by 0x10D5A5: addIntSet (int-set.c:76)
==93981==    by 0x10A6BC: addElement (tests.c:36)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== Conditional jump or move depends on uninitialised value(s)
==93981==    at 0x10D555: isInIntSet (int-set.c:47)
==93981==    by 0x10D5A5: addIntSet (int-set.c:76)
==93981==    by 0x10A6D0: addElement (tests.c:37)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==93981== 
==93981== HEAP SUMMARY:
==93981==     in use at exit: 176 bytes in 9 blocks
==93981==   total heap usage: 242 allocs, 233 frees, 20,031 bytes allocated
==93981== 
==93981== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==93981==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D519: isInIntSet (int-set.c:44)
==93981==    by 0x10D5A5: addIntSet (int-set.c:76)
==93981==    by 0x10A6BC: addElement (tests.c:36)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==93981==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D5B4: addIntSet (int-set.c:82)
==93981==    by 0x10A6BC: addElement (tests.c:36)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 16 bytes in 1 blocks are definitely lost in loss record 4 of 9
==93981==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D519: isInIntSet (int-set.c:44)
==93981==    by 0x10D5A5: addIntSet (int-set.c:76)
==93981==    by 0x10A6D0: addElement (tests.c:37)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 16 bytes in 1 blocks are definitely lost in loss record 5 of 9
==93981==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D5B4: addIntSet (int-set.c:82)
==93981==    by 0x10A6D0: addElement (tests.c:37)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==93981==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D588: addIntSet (int-set.c:72)
==93981==    by 0x10A6A8: addElement (tests.c:35)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 24 bytes in 1 blocks are definitely lost in loss record 7 of 9
==93981==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D588: addIntSet (int-set.c:72)
==93981==    by 0x10A6BC: addElement (tests.c:36)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 24 bytes in 1 blocks are definitely lost in loss record 8 of 9
==93981==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D588: addIntSet (int-set.c:72)
==93981==    by 0x10A6D0: addElement (tests.c:37)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==93981==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==93981==    by 0x10D4C0: newIntSet (int-set.c:24)
==93981==    by 0x10A693: addElement (tests.c:34)
==93981==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==93981==    by 0x10D482: main (tests.c:567)
==93981== 
==93981== LEAK SUMMARY:
==93981==    definitely lost: 160 bytes in 8 blocks
==93981==    indirectly lost: 16 bytes in 1 blocks
==93981==      possibly lost: 0 bytes in 0 blocks
==93981==    still reachable: 0 bytes in 0 blocks
==93981==         suppressed: 0 bytes in 0 blocks
==93981== 
==93981== Use --track-origins=yes to see where uninitialised values come from
==93981== For lists of detected and suppressed errors, rerun with: -s
==93981== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94052== Memcheck, a memory error detector
==94052== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94052== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94052== Command: ./tests
==94052== 
Running suite(s): addIntSet
==94052== Conditional jump or move depends on uninitialised value(s)
==94052==    at 0x10D555: isInIntSet (int-set.c:47)
==94052==    by 0x10D5A5: addIntSet (int-set.c:76)
==94052==    by 0x10A6BC: addElement (tests.c:36)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== Conditional jump or move depends on uninitialised value(s)
==94052==    at 0x10D555: isInIntSet (int-set.c:47)
==94052==    by 0x10D5A5: addIntSet (int-set.c:76)
==94052==    by 0x10A6D0: addElement (tests.c:37)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==94052== 
==94052== HEAP SUMMARY:
==94052==     in use at exit: 208 bytes in 9 blocks
==94052==   total heap usage: 242 allocs, 233 frees, 20,063 bytes allocated
==94052== 
==94052== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==94052==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D5B4: addIntSet (int-set.c:82)
==94052==    by 0x10A6BC: addElement (tests.c:36)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==94052==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D5B4: addIntSet (int-set.c:82)
==94052==    by 0x10A6D0: addElement (tests.c:37)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 24 bytes in 1 blocks are definitely lost in loss record 4 of 9
==94052==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D588: addIntSet (int-set.c:72)
==94052==    by 0x10A6A8: addElement (tests.c:35)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 24 bytes in 1 blocks are definitely lost in loss record 5 of 9
==94052==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D588: addIntSet (int-set.c:72)
==94052==    by 0x10A6BC: addElement (tests.c:36)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==94052==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D588: addIntSet (int-set.c:72)
==94052==    by 0x10A6D0: addElement (tests.c:37)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 32 bytes in 1 blocks are definitely lost in loss record 7 of 9
==94052==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D519: isInIntSet (int-set.c:44)
==94052==    by 0x10D5A5: addIntSet (int-set.c:76)
==94052==    by 0x10A6BC: addElement (tests.c:36)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 32 bytes in 1 blocks are definitely lost in loss record 8 of 9
==94052==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D519: isInIntSet (int-set.c:44)
==94052==    by 0x10D5A5: addIntSet (int-set.c:76)
==94052==    by 0x10A6D0: addElement (tests.c:37)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==94052==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94052==    by 0x10D4C0: newIntSet (int-set.c:24)
==94052==    by 0x10A693: addElement (tests.c:34)
==94052==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94052==    by 0x10D482: main (tests.c:567)
==94052== 
==94052== LEAK SUMMARY:
==94052==    definitely lost: 192 bytes in 8 blocks
==94052==    indirectly lost: 16 bytes in 1 blocks
==94052==      possibly lost: 0 bytes in 0 blocks
==94052==    still reachable: 0 bytes in 0 blocks
==94052==         suppressed: 0 bytes in 0 blocks
==94052== 
==94052== Use --track-origins=yes to see where uninitialised values come from
==94052== For lists of detected and suppressed errors, rerun with: -s
==94052== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make cl[K[K[K[K[K[K[Kc[Kmake al[K[Kclean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94151== Memcheck, a memory error detector
==94151== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94151== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94151== Command: ./tests
==94151== 
Running suite(s): addIntSet
==94151== Conditional jump or move depends on uninitialised value(s)
==94151==    at 0x10D555: isInIntSet (int-set.c:47)
==94151==    by 0x10D5A5: addIntSet (int-set.c:76)
==94151==    by 0x10A6BC: addElement (tests.c:36)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== Conditional jump or move depends on uninitialised value(s)
==94151==    at 0x10D555: isInIntSet (int-set.c:47)
==94151==    by 0x10D5A5: addIntSet (int-set.c:76)
==94151==    by 0x10A6D0: addElement (tests.c:37)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==94151== 
==94151== HEAP SUMMARY:
==94151==     in use at exit: 208 bytes in 9 blocks
==94151==   total heap usage: 242 allocs, 233 frees, 20,063 bytes allocated
==94151== 
==94151== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==94151==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D5B4: addIntSet (int-set.c:82)
==94151==    by 0x10A6BC: addElement (tests.c:36)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==94151==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D5B4: addIntSet (int-set.c:82)
==94151==    by 0x10A6D0: addElement (tests.c:37)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 24 bytes in 1 blocks are definitely lost in loss record 4 of 9
==94151==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D588: addIntSet (int-set.c:72)
==94151==    by 0x10A6A8: addElement (tests.c:35)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 24 bytes in 1 blocks are definitely lost in loss record 5 of 9
==94151==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D588: addIntSet (int-set.c:72)
==94151==    by 0x10A6BC: addElement (tests.c:36)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==94151==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D588: addIntSet (int-set.c:72)
==94151==    by 0x10A6D0: addElement (tests.c:37)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 32 bytes in 1 blocks are definitely lost in loss record 7 of 9
==94151==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D519: isInIntSet (int-set.c:44)
==94151==    by 0x10D5A5: addIntSet (int-set.c:76)
==94151==    by 0x10A6BC: addElement (tests.c:36)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 32 bytes in 1 blocks are definitely lost in loss record 8 of 9
==94151==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D519: isInIntSet (int-set.c:44)
==94151==    by 0x10D5A5: addIntSet (int-set.c:76)
==94151==    by 0x10A6D0: addElement (tests.c:37)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==94151==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94151==    by 0x10D4C0: newIntSet (int-set.c:24)
==94151==    by 0x10A693: addElement (tests.c:34)
==94151==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94151==    by 0x10D482: main (tests.c:567)
==94151== 
==94151== LEAK SUMMARY:
==94151==    definitely lost: 192 bytes in 8 blocks
==94151==    indirectly lost: 16 bytes in 1 blocks
==94151==      possibly lost: 0 bytes in 0 blocks
==94151==    still reachable: 0 bytes in 0 blocks
==94151==         suppressed: 0 bytes in 0 blocks
==94151== 
==94151== Use --track-origins=yes to see where uninitialised values come from
==94151== For lists of detected and suppressed errors, rerun with: -s
==94151== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94291== Memcheck, a memory error detector
==94291== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94291== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94291== Command: ./tests
==94291== 
Running suite(s): addIntSet
==94291== Conditional jump or move depends on uninitialised value(s)
==94291==    at 0x10D56F: isInIntSet (int-set.c:48)
==94291==    by 0x10D5BF: addIntSet (int-set.c:77)
==94291==    by 0x10A6BC: addElement (tests.c:36)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== Conditional jump or move depends on uninitialised value(s)
==94291==    at 0x10D56F: isInIntSet (int-set.c:48)
==94291==    by 0x10D5BF: addIntSet (int-set.c:77)
==94291==    by 0x10A6D0: addElement (tests.c:37)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==94291== 
==94291== HEAP SUMMARY:
==94291==     in use at exit: 208 bytes in 11 blocks
==94291==   total heap usage: 244 allocs, 233 frees, 20,063 bytes allocated
==94291== 
==94291== 16 bytes in 1 blocks are definitely lost in loss record 4 of 11
==94291==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D5CE: addIntSet (int-set.c:83)
==94291==    by 0x10A6BC: addElement (tests.c:36)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 16 bytes in 1 blocks are definitely lost in loss record 5 of 11
==94291==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D5CE: addIntSet (int-set.c:83)
==94291==    by 0x10A6D0: addElement (tests.c:37)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 24 bytes in 1 blocks are definitely lost in loss record 6 of 11
==94291==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D5A2: addIntSet (int-set.c:73)
==94291==    by 0x10A6A8: addElement (tests.c:35)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 24 bytes in 1 blocks are definitely lost in loss record 7 of 11
==94291==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D5A2: addIntSet (int-set.c:73)
==94291==    by 0x10A6BC: addElement (tests.c:36)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 24 bytes in 1 blocks are definitely lost in loss record 8 of 11
==94291==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D5A2: addIntSet (int-set.c:73)
==94291==    by 0x10A6D0: addElement (tests.c:37)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 11
==94291==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D519: isInIntSet (int-set.c:44)
==94291==    by 0x10D5BF: addIntSet (int-set.c:77)
==94291==    by 0x10A6BC: addElement (tests.c:36)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 10 of 11
==94291==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D519: isInIntSet (int-set.c:44)
==94291==    by 0x10D5BF: addIntSet (int-set.c:77)
==94291==    by 0x10A6D0: addElement (tests.c:37)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 11 of 11
==94291==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94291==    by 0x10D4C0: newIntSet (int-set.c:24)
==94291==    by 0x10A693: addElement (tests.c:34)
==94291==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94291==    by 0x10D482: main (tests.c:567)
==94291== 
==94291== LEAK SUMMARY:
==94291==    definitely lost: 160 bytes in 8 blocks
==94291==    indirectly lost: 48 bytes in 3 blocks
==94291==      possibly lost: 0 bytes in 0 blocks
==94291==    still reachable: 0 bytes in 0 blocks
==94291==         suppressed: 0 bytes in 0 blocks
==94291== 
==94291== Use --track-origins=yes to see where uninitialised values come from
==94291== For lists of detected and suppressed errors, rerun with: -s
==94291== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94335== Memcheck, a memory error detector
==94335== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94335== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94335== Command: ./tests
==94335== 
Running suite(s): addIntSet
==94335== Conditional jump or move depends on uninitialised value(s)
==94335==    at 0x10D56F: isInIntSet (int-set.c:48)
==94335==    by 0x10D5BF: addIntSet (int-set.c:77)
==94335==    by 0x10A6BC: addElement (tests.c:36)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== Conditional jump or move depends on uninitialised value(s)
==94335==    at 0x10D56F: isInIntSet (int-set.c:48)
==94335==    by 0x10D5BF: addIntSet (int-set.c:77)
==94335==    by 0x10A6D0: addElement (tests.c:37)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==94335== 
==94335== HEAP SUMMARY:
==94335==     in use at exit: 208 bytes in 11 blocks
==94335==   total heap usage: 244 allocs, 233 frees, 20,063 bytes allocated
==94335== 
==94335== 16 bytes in 1 blocks are definitely lost in loss record 4 of 11
==94335==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D5CE: addIntSet (int-set.c:83)
==94335==    by 0x10A6BC: addElement (tests.c:36)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 16 bytes in 1 blocks are definitely lost in loss record 5 of 11
==94335==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D5CE: addIntSet (int-set.c:83)
==94335==    by 0x10A6D0: addElement (tests.c:37)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 24 bytes in 1 blocks are definitely lost in loss record 6 of 11
==94335==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D5A2: addIntSet (int-set.c:73)
==94335==    by 0x10A6A8: addElement (tests.c:35)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 24 bytes in 1 blocks are definitely lost in loss record 7 of 11
==94335==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D5A2: addIntSet (int-set.c:73)
==94335==    by 0x10A6BC: addElement (tests.c:36)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 24 bytes in 1 blocks are definitely lost in loss record 8 of 11
==94335==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D5A2: addIntSet (int-set.c:73)
==94335==    by 0x10A6D0: addElement (tests.c:37)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 11
==94335==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D519: isInIntSet (int-set.c:44)
==94335==    by 0x10D5BF: addIntSet (int-set.c:77)
==94335==    by 0x10A6BC: addElement (tests.c:36)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 10 of 11
==94335==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D519: isInIntSet (int-set.c:44)
==94335==    by 0x10D5BF: addIntSet (int-set.c:77)
==94335==    by 0x10A6D0: addElement (tests.c:37)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 11 of 11
==94335==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94335==    by 0x10D4C0: newIntSet (int-set.c:24)
==94335==    by 0x10A693: addElement (tests.c:34)
==94335==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94335==    by 0x10D482: main (tests.c:567)
==94335== 
==94335== LEAK SUMMARY:
==94335==    definitely lost: 160 bytes in 8 blocks
==94335==    indirectly lost: 48 bytes in 3 blocks
==94335==      possibly lost: 0 bytes in 0 blocks
==94335==    still reachable: 0 bytes in 0 blocks
==94335==         suppressed: 0 bytes in 0 blocks
==94335== 
==94335== Use --track-origins=yes to see where uninitialised values come from
==94335== For lists of detected and suppressed errors, rerun with: -s
==94335== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94409== Memcheck, a memory error detector
==94409== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94409== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94409== Command: ./tests
==94409== 
Running suite(s): addIntSet
==94409== Conditional jump or move depends on uninitialised value(s)
==94409==    at 0x10D56F: isInIntSet (int-set.c:48)
==94409==    by 0x10D5BF: addIntSet (int-set.c:77)
==94409==    by 0x10A6BC: addElement (tests.c:36)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== Conditional jump or move depends on uninitialised value(s)
==94409==    at 0x10D56F: isInIntSet (int-set.c:48)
==94409==    by 0x10D5BF: addIntSet (int-set.c:77)
==94409==    by 0x10A6D0: addElement (tests.c:37)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==94409== 
==94409== HEAP SUMMARY:
==94409==     in use at exit: 208 bytes in 11 blocks
==94409==   total heap usage: 244 allocs, 233 frees, 20,063 bytes allocated
==94409== 
==94409== 16 bytes in 1 blocks are definitely lost in loss record 4 of 11
==94409==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D5CE: addIntSet (int-set.c:83)
==94409==    by 0x10A6BC: addElement (tests.c:36)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 16 bytes in 1 blocks are definitely lost in loss record 5 of 11
==94409==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D5CE: addIntSet (int-set.c:83)
==94409==    by 0x10A6D0: addElement (tests.c:37)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 24 bytes in 1 blocks are definitely lost in loss record 6 of 11
==94409==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D5A2: addIntSet (int-set.c:73)
==94409==    by 0x10A6A8: addElement (tests.c:35)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 24 bytes in 1 blocks are definitely lost in loss record 7 of 11
==94409==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D5A2: addIntSet (int-set.c:73)
==94409==    by 0x10A6BC: addElement (tests.c:36)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 24 bytes in 1 blocks are definitely lost in loss record 8 of 11
==94409==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D5A2: addIntSet (int-set.c:73)
==94409==    by 0x10A6D0: addElement (tests.c:37)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 11
==94409==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D519: isInIntSet (int-set.c:44)
==94409==    by 0x10D5BF: addIntSet (int-set.c:77)
==94409==    by 0x10A6BC: addElement (tests.c:36)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 10 of 11
==94409==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D519: isInIntSet (int-set.c:44)
==94409==    by 0x10D5BF: addIntSet (int-set.c:77)
==94409==    by 0x10A6D0: addElement (tests.c:37)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 11 of 11
==94409==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94409==    by 0x10D4C0: newIntSet (int-set.c:24)
==94409==    by 0x10A693: addElement (tests.c:34)
==94409==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94409==    by 0x10D482: main (tests.c:567)
==94409== 
==94409== LEAK SUMMARY:
==94409==    definitely lost: 160 bytes in 8 blocks
==94409==    indirectly lost: 48 bytes in 3 blocks
==94409==      possibly lost: 0 bytes in 0 blocks
==94409==    still reachable: 0 bytes in 0 blocks
==94409==         suppressed: 0 bytes in 0 blocks
==94409== 
==94409== Use --track-origins=yes to see where uninitialised values come from
==94409== For lists of detected and suppressed errors, rerun with: -s
==94409== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94465== Memcheck, a memory error detector
==94465== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94465== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94465== Command: ./tests
==94465== 
Running suite(s): addIntSet
==94465== Conditional jump or move depends on uninitialised value(s)
==94465==    at 0x10D56F: isInIntSet (int-set.c:48)
==94465==    by 0x10D5BF: addIntSet (int-set.c:77)
==94465==    by 0x10A6BC: addElement (tests.c:36)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== Conditional jump or move depends on uninitialised value(s)
==94465==    at 0x10D56F: isInIntSet (int-set.c:48)
==94465==    by 0x10D5BF: addIntSet (int-set.c:77)
==94465==    by 0x10A6D0: addElement (tests.c:37)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==94465== 
==94465== HEAP SUMMARY:
==94465==     in use at exit: 208 bytes in 11 blocks
==94465==   total heap usage: 244 allocs, 233 frees, 20,063 bytes allocated
==94465== 
==94465== 16 bytes in 1 blocks are definitely lost in loss record 4 of 11
==94465==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D5CE: addIntSet (int-set.c:83)
==94465==    by 0x10A6BC: addElement (tests.c:36)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 16 bytes in 1 blocks are definitely lost in loss record 5 of 11
==94465==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D5CE: addIntSet (int-set.c:83)
==94465==    by 0x10A6D0: addElement (tests.c:37)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 24 bytes in 1 blocks are definitely lost in loss record 6 of 11
==94465==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D5A2: addIntSet (int-set.c:73)
==94465==    by 0x10A6A8: addElement (tests.c:35)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 24 bytes in 1 blocks are definitely lost in loss record 7 of 11
==94465==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D5A2: addIntSet (int-set.c:73)
==94465==    by 0x10A6BC: addElement (tests.c:36)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 24 bytes in 1 blocks are definitely lost in loss record 8 of 11
==94465==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D5A2: addIntSet (int-set.c:73)
==94465==    by 0x10A6D0: addElement (tests.c:37)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 11
==94465==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D519: isInIntSet (int-set.c:44)
==94465==    by 0x10D5BF: addIntSet (int-set.c:77)
==94465==    by 0x10A6BC: addElement (tests.c:36)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 10 of 11
==94465==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D519: isInIntSet (int-set.c:44)
==94465==    by 0x10D5BF: addIntSet (int-set.c:77)
==94465==    by 0x10A6D0: addElement (tests.c:37)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 11 of 11
==94465==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94465==    by 0x10D4C0: newIntSet (int-set.c:24)
==94465==    by 0x10A693: addElement (tests.c:34)
==94465==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94465==    by 0x10D482: main (tests.c:567)
==94465== 
==94465== LEAK SUMMARY:
==94465==    definitely lost: 160 bytes in 8 blocks
==94465==    indirectly lost: 48 bytes in 3 blocks
==94465==      possibly lost: 0 bytes in 0 blocks
==94465==    still reachable: 0 bytes in 0 blocks
==94465==         suppressed: 0 bytes in 0 blocks
==94465== 
==94465== Use --track-origins=yes to see where uninitialised values come from
==94465== For lists of detected and suppressed errors, rerun with: -s
==94465== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==94716== Memcheck, a memory error detector
==94716== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==94716== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==94716== Command: ./tests
==94716== 
Running suite(s): addIntSet
==94716== Conditional jump or move depends on uninitialised value(s)
==94716==    at 0x10D54F: isInIntSet (int-set.c:48)
==94716==    by 0x10D59F: addIntSet (int-set.c:77)
==94716==    by 0x10A6BC: addElement (tests.c:36)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== Conditional jump or move depends on uninitialised value(s)
==94716==    at 0x10D7AC: freeIntSet (int-set.c:143)
==94716==    by 0x10A8A8: addElement (tests.c:42)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== Conditional jump or move depends on uninitialised value(s)
==94716==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D7D2: freeIntSet (int-set.c:152)
==94716==    by 0x10A8A8: addElement (tests.c:42)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== Conditional jump or move depends on uninitialised value(s)
==94716==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D7E8: freeIntSet (int-set.c:154)
==94716==    by 0x10A8A8: addElement (tests.c:42)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
100%: Checks: 1, Failures: 0, Errors: 0
==94716== 
==94716== HEAP SUMMARY:
==94716==     in use at exit: 120 bytes in 6 blocks
==94716==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==94716== 
==94716== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==94716==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D519: isInIntSet (int-set.c:44)
==94716==    by 0x10D59F: addIntSet (int-set.c:77)
==94716==    by 0x10A6BC: addElement (tests.c:36)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==94716==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D5AE: addIntSet (int-set.c:83)
==94716==    by 0x10A6BC: addElement (tests.c:36)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==94716==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D519: isInIntSet (int-set.c:44)
==94716==    by 0x10D59F: addIntSet (int-set.c:77)
==94716==    by 0x10A6D0: addElement (tests.c:37)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==94716==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D582: addIntSet (int-set.c:73)
==94716==    by 0x10A6A8: addElement (tests.c:35)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==94716==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D582: addIntSet (int-set.c:73)
==94716==    by 0x10A6BC: addElement (tests.c:36)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==94716==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==94716==    by 0x10D582: addIntSet (int-set.c:73)
==94716==    by 0x10A6D0: addElement (tests.c:37)
==94716==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==94716==    by 0x10D482: main (tests.c:567)
==94716== 
==94716== LEAK SUMMARY:
==94716==    definitely lost: 120 bytes in 6 blocks
==94716==    indirectly lost: 0 bytes in 0 blocks
==94716==      possibly lost: 0 bytes in 0 blocks
==94716==    still reachable: 0 bytes in 0 blocks
==94716==         suppressed: 0 bytes in 0 blocks
==94716== 
==94716== Use --track-origins=yes to see where uninitialised values come from
==94716== For lists of detected and suppressed errors, rerun with: -s
==94716== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclear[Kmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[K
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b isIN[KnIntSet
Breakpoint 1 at [34m0x54df[m: file [32mint-set.c[m, line 36.
(gdb) r
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x555555564300, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
42	        return -1;
(gdb) 
59	}
(gdb) 
[33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:77
77	    if (isInIntSet(intSet, element) == 1)
(gdb) 
83	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
84	        newNode->data = element;
(gdb) 
86	        if(tempHead->nElements == 0){
(gdb) 
87	            tempHead->dummyNode.next = newNode;
(gdb) 
89	        tempHead->nElements = tempHead->nElements + 1;
(gdb) 
92	    return tempHead->nElements;
(gdb) c
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) 
48	    while (currNode != NULL)
(gdb) currNodepcurrNode currNode(currNodeNcurrNodeocurrNodedcurrNodeecurrNode currNode*currNode)currNode
$1 = (Node *) [34m0x5555555665b8[m
(gdb) p (Node *)currNode[1@*
$2 = {data = 0, next = [34m0x555555566590[m}
(gdb) p *(Node *)currNode->next
$3 = {data = 33, next = [34m0x0[m}
(gdb) p *(Node *)currNode->next->next
Cannot access memory at address 0x0
(gdb) q
A debugging session is active.

	Inferior 1 [process 94929] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleangdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:46:14:[m[K [01;35m[Kwarning: [m[Kassignment to â€˜[01m[KNode *[m[Kâ€™ {aka â€˜[01m[Kstruct NodeStruct *[m[Kâ€™} from incompatible pointer type â€˜[01m[Kstruct NodeStruct **[m[Kâ€™ [[01;35m[K-Wincompatible-pointer-types[m[K]
   46 |     currNode [01;35m[K=[m[K &tempHead->dummyNode.next;
      |              [01;35m[K^[m[K
==95717== Memcheck, a memory error detector
==95717== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==95717== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==95717== Command: ./tests
==95717== 
Running suite(s): addIntSet
==95717== Invalid read of size 8
==95717==    at 0x10D542: isInIntSet (int-set.c:55)
==95717==    by 0x10D59F: addIntSet (int-set.c:77)
==95717==    by 0x10A6BC: addElement (tests.c:36)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717==  Address 0x4be0148 is 0 bytes after a block of size 24 alloc'd
==95717==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D4C0: newIntSet (int-set.c:24)
==95717==    by 0x10A693: addElement (tests.c:34)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== Invalid read of size 8
==95717==    at 0x10D542: isInIntSet (int-set.c:55)
==95717==    by 0x10D59F: addIntSet (int-set.c:77)
==95717==    by 0x10A6D0: addElement (tests.c:37)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717==  Address 0x4be0148 is 0 bytes after a block of size 24 alloc'd
==95717==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D4C0: newIntSet (int-set.c:24)
==95717==    by 0x10A693: addElement (tests.c:34)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==95717== 
==95717== HEAP SUMMARY:
==95717==     in use at exit: 176 bytes in 9 blocks
==95717==   total heap usage: 242 allocs, 233 frees, 20,031 bytes allocated
==95717== 
==95717== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==95717==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D519: isInIntSet (int-set.c:44)
==95717==    by 0x10D59F: addIntSet (int-set.c:77)
==95717==    by 0x10A6BC: addElement (tests.c:36)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==95717==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D5AE: addIntSet (int-set.c:83)
==95717==    by 0x10A6BC: addElement (tests.c:36)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 16 bytes in 1 blocks are definitely lost in loss record 4 of 9
==95717==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D519: isInIntSet (int-set.c:44)
==95717==    by 0x10D59F: addIntSet (int-set.c:77)
==95717==    by 0x10A6D0: addElement (tests.c:37)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 16 bytes in 1 blocks are definitely lost in loss record 5 of 9
==95717==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D5AE: addIntSet (int-set.c:83)
==95717==    by 0x10A6D0: addElement (tests.c:37)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==95717==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D582: addIntSet (int-set.c:73)
==95717==    by 0x10A6A8: addElement (tests.c:35)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 24 bytes in 1 blocks are definitely lost in loss record 7 of 9
==95717==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D582: addIntSet (int-set.c:73)
==95717==    by 0x10A6BC: addElement (tests.c:36)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 24 bytes in 1 blocks are definitely lost in loss record 8 of 9
==95717==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D582: addIntSet (int-set.c:73)
==95717==    by 0x10A6D0: addElement (tests.c:37)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==95717==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95717==    by 0x10D4C0: newIntSet (int-set.c:24)
==95717==    by 0x10A693: addElement (tests.c:34)
==95717==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95717==    by 0x10D482: main (tests.c:567)
==95717== 
==95717== LEAK SUMMARY:
==95717==    definitely lost: 160 bytes in 8 blocks
==95717==    indirectly lost: 16 bytes in 1 blocks
==95717==      possibly lost: 0 bytes in 0 blocks
==95717==    still reachable: 0 bytes in 0 blocks
==95717==         suppressed: 0 bytes in 0 blocks
==95717== 
==95717== For lists of detected and suppressed errors, rerun with: -s
==95717== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==95796== Memcheck, a memory error detector
==95796== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==95796== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==95796== Command: ./tests
==95796== 
Running suite(s): addIntSet
==95796== Conditional jump or move depends on uninitialised value(s)
==95796==    at 0x10D54F: isInIntSet (int-set.c:48)
==95796==    by 0x10D59F: addIntSet (int-set.c:77)
==95796==    by 0x10A6BC: addElement (tests.c:36)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== Conditional jump or move depends on uninitialised value(s)
==95796==    at 0x10D7AC: freeIntSet (int-set.c:143)
==95796==    by 0x10A8A8: addElement (tests.c:42)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== Conditional jump or move depends on uninitialised value(s)
==95796==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D7D2: freeIntSet (int-set.c:152)
==95796==    by 0x10A8A8: addElement (tests.c:42)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== Conditional jump or move depends on uninitialised value(s)
==95796==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D7E8: freeIntSet (int-set.c:154)
==95796==    by 0x10A8A8: addElement (tests.c:42)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
100%: Checks: 1, Failures: 0, Errors: 0
==95796== 
==95796== HEAP SUMMARY:
==95796==     in use at exit: 120 bytes in 6 blocks
==95796==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==95796== 
==95796== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==95796==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D519: isInIntSet (int-set.c:44)
==95796==    by 0x10D59F: addIntSet (int-set.c:77)
==95796==    by 0x10A6BC: addElement (tests.c:36)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==95796==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D5AE: addIntSet (int-set.c:83)
==95796==    by 0x10A6BC: addElement (tests.c:36)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==95796==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D519: isInIntSet (int-set.c:44)
==95796==    by 0x10D59F: addIntSet (int-set.c:77)
==95796==    by 0x10A6D0: addElement (tests.c:37)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==95796==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D582: addIntSet (int-set.c:73)
==95796==    by 0x10A6A8: addElement (tests.c:35)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==95796==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D582: addIntSet (int-set.c:73)
==95796==    by 0x10A6BC: addElement (tests.c:36)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==95796==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==95796==    by 0x10D582: addIntSet (int-set.c:73)
==95796==    by 0x10A6D0: addElement (tests.c:37)
==95796==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==95796==    by 0x10D482: main (tests.c:567)
==95796== 
==95796== LEAK SUMMARY:
==95796==    definitely lost: 120 bytes in 6 blocks
==95796==    indirectly lost: 0 bytes in 0 blocks
==95796==      possibly lost: 0 bytes in 0 blocks
==95796==    still reachable: 0 bytes in 0 blocks
==95796==         suppressed: 0 bytes in 0 blocks
==95796== 
==95796== Use --track-origins=yes to see where uninitialised values come from
==95796== For lists of detected and suppressed errors, rerun with: -s
==95796== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==96772== Memcheck, a memory error detector
==96772== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==96772== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==96772== Command: ./tests
==96772== 
Running suite(s): addIntSet
==96772== Conditional jump or move depends on uninitialised value(s)
==96772==    at 0x10D54F: isInIntSet (int-set.c:48)
==96772==    by 0x10D59F: addIntSet (int-set.c:77)
==96772==    by 0x10A6BC: addElement (tests.c:36)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== Conditional jump or move depends on uninitialised value(s)
==96772==    at 0x10D7AC: freeIntSet (int-set.c:143)
==96772==    by 0x10A8A8: addElement (tests.c:42)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== Conditional jump or move depends on uninitialised value(s)
==96772==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D7D2: freeIntSet (int-set.c:152)
==96772==    by 0x10A8A8: addElement (tests.c:42)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== Conditional jump or move depends on uninitialised value(s)
==96772==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D7E8: freeIntSet (int-set.c:154)
==96772==    by 0x10A8A8: addElement (tests.c:42)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
100%: Checks: 1, Failures: 0, Errors: 0
==96772== 
==96772== HEAP SUMMARY:
==96772==     in use at exit: 120 bytes in 6 blocks
==96772==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==96772== 
==96772== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==96772==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D519: isInIntSet (int-set.c:44)
==96772==    by 0x10D59F: addIntSet (int-set.c:77)
==96772==    by 0x10A6BC: addElement (tests.c:36)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==96772==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D5AE: addIntSet (int-set.c:83)
==96772==    by 0x10A6BC: addElement (tests.c:36)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==96772==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D519: isInIntSet (int-set.c:44)
==96772==    by 0x10D59F: addIntSet (int-set.c:77)
==96772==    by 0x10A6D0: addElement (tests.c:37)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==96772==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D582: addIntSet (int-set.c:73)
==96772==    by 0x10A6A8: addElement (tests.c:35)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==96772==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D582: addIntSet (int-set.c:73)
==96772==    by 0x10A6BC: addElement (tests.c:36)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==96772==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96772==    by 0x10D582: addIntSet (int-set.c:73)
==96772==    by 0x10A6D0: addElement (tests.c:37)
==96772==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96772==    by 0x10D482: main (tests.c:567)
==96772== 
==96772== LEAK SUMMARY:
==96772==    definitely lost: 120 bytes in 6 blocks
==96772==    indirectly lost: 0 bytes in 0 blocks
==96772==      possibly lost: 0 bytes in 0 blocks
==96772==    still reachable: 0 bytes in 0 blocks
==96772==         suppressed: 0 bytes in 0 blocks
==96772== 
==96772== Use --track-origins=yes to see where uninitialised values come from
==96772== For lists of detected and suppressed errors, rerun with: -s
==96772== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==96901== Memcheck, a memory error detector
==96901== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==96901== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==96901== Command: ./tests
==96901== 
Running suite(s): addIntSet
==96901== Conditional jump or move depends on uninitialised value(s)
==96901==    at 0x10D54F: isInIntSet (int-set.c:49)
==96901==    by 0x10D59F: addIntSet (int-set.c:78)
==96901==    by 0x10A6BC: addElement (tests.c:36)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== Conditional jump or move depends on uninitialised value(s)
==96901==    at 0x10D7AC: freeIntSet (int-set.c:144)
==96901==    by 0x10A8A8: addElement (tests.c:42)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== Conditional jump or move depends on uninitialised value(s)
==96901==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D7D2: freeIntSet (int-set.c:153)
==96901==    by 0x10A8A8: addElement (tests.c:42)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== Conditional jump or move depends on uninitialised value(s)
==96901==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D7E8: freeIntSet (int-set.c:155)
==96901==    by 0x10A8A8: addElement (tests.c:42)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
100%: Checks: 1, Failures: 0, Errors: 0
==96901== 
==96901== HEAP SUMMARY:
==96901==     in use at exit: 120 bytes in 6 blocks
==96901==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==96901== 
==96901== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==96901==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D519: isInIntSet (int-set.c:45)
==96901==    by 0x10D59F: addIntSet (int-set.c:78)
==96901==    by 0x10A6BC: addElement (tests.c:36)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==96901==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D5AE: addIntSet (int-set.c:84)
==96901==    by 0x10A6BC: addElement (tests.c:36)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==96901==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D519: isInIntSet (int-set.c:45)
==96901==    by 0x10D59F: addIntSet (int-set.c:78)
==96901==    by 0x10A6D0: addElement (tests.c:37)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==96901==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D582: addIntSet (int-set.c:74)
==96901==    by 0x10A6A8: addElement (tests.c:35)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==96901==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D582: addIntSet (int-set.c:74)
==96901==    by 0x10A6BC: addElement (tests.c:36)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==96901==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==96901==    by 0x10D582: addIntSet (int-set.c:74)
==96901==    by 0x10A6D0: addElement (tests.c:37)
==96901==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==96901==    by 0x10D482: main (tests.c:567)
==96901== 
==96901== LEAK SUMMARY:
==96901==    definitely lost: 120 bytes in 6 blocks
==96901==    indirectly lost: 0 bytes in 0 blocks
==96901==      possibly lost: 0 bytes in 0 blocks
==96901==    still reachable: 0 bytes in 0 blocks
==96901==         suppressed: 0 bytes in 0 blocks
==96901== 
==96901== Use --track-origins=yes to see where uninitialised values come from
==96901== For lists of detected and suppressed errors, rerun with: -s
==96901== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ [Kjosh@machine:~/Documents/CS220/prj2-sol$ [Kjosh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clearmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==97267== Memcheck, a memory error detector
==97267== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==97267== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==97267== Command: ./tests
==97267== 
Running suite(s): addIntSet
==97267== Conditional jump or move depends on uninitialised value(s)
==97267==    at 0x10D54F: isInIntSet (int-set.c:48)
==97267==    by 0x10D59F: addIntSet (int-set.c:77)
==97267==    by 0x10A6BC: addElement (tests.c:36)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== Conditional jump or move depends on uninitialised value(s)
==97267==    at 0x10D7AC: freeIntSet (int-set.c:143)
==97267==    by 0x10A8A8: addElement (tests.c:42)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== Conditional jump or move depends on uninitialised value(s)
==97267==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D7D2: freeIntSet (int-set.c:152)
==97267==    by 0x10A8A8: addElement (tests.c:42)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== Conditional jump or move depends on uninitialised value(s)
==97267==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D7E8: freeIntSet (int-set.c:154)
==97267==    by 0x10A8A8: addElement (tests.c:42)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
100%: Checks: 1, Failures: 0, Errors: 0
==97267== 
==97267== HEAP SUMMARY:
==97267==     in use at exit: 120 bytes in 6 blocks
==97267==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==97267== 
==97267== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==97267==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D519: isInIntSet (int-set.c:44)
==97267==    by 0x10D59F: addIntSet (int-set.c:77)
==97267==    by 0x10A6BC: addElement (tests.c:36)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==97267==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D5AE: addIntSet (int-set.c:83)
==97267==    by 0x10A6BC: addElement (tests.c:36)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==97267==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D519: isInIntSet (int-set.c:44)
==97267==    by 0x10D59F: addIntSet (int-set.c:77)
==97267==    by 0x10A6D0: addElement (tests.c:37)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==97267==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D582: addIntSet (int-set.c:73)
==97267==    by 0x10A6A8: addElement (tests.c:35)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==97267==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D582: addIntSet (int-set.c:73)
==97267==    by 0x10A6BC: addElement (tests.c:36)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==97267==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97267==    by 0x10D582: addIntSet (int-set.c:73)
==97267==    by 0x10A6D0: addElement (tests.c:37)
==97267==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97267==    by 0x10D482: main (tests.c:567)
==97267== 
==97267== LEAK SUMMARY:
==97267==    definitely lost: 120 bytes in 6 blocks
==97267==    indirectly lost: 0 bytes in 0 blocks
==97267==      possibly lost: 0 bytes in 0 blocks
==97267==    still reachable: 0 bytes in 0 blocks
==97267==         suppressed: 0 bytes in 0 blocks
==97267== 
==97267== Use --track-origins=yes to see where uninitialised values come from
==97267== For lists of detected and suppressed errors, rerun with: -s
==97267== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:48:27:[m[K [01;35m[Kwarning: [m[Kcomparison between pointer and integer
   48 |     while (currNode->data [01;35m[K!=[m[K NULL)
      |                           [01;35m[K^~[m[K
==97379== Memcheck, a memory error detector
==97379== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==97379== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==97379== Command: ./tests
==97379== 
Running suite(s): addIntSet
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==97379== 
==97379== HEAP SUMMARY:
==97379==     in use at exit: 176 bytes in 9 blocks
==97379==   total heap usage: 242 allocs, 233 frees, 20,031 bytes allocated
==97379== 
==97379== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==97379==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D519: isInIntSet (int-set.c:44)
==97379==    by 0x10D5A2: addIntSet (int-set.c:77)
==97379==    by 0x10A6BC: addElement (tests.c:36)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==97379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D5B1: addIntSet (int-set.c:83)
==97379==    by 0x10A6BC: addElement (tests.c:36)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 16 bytes in 1 blocks are definitely lost in loss record 4 of 9
==97379==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D519: isInIntSet (int-set.c:44)
==97379==    by 0x10D5A2: addIntSet (int-set.c:77)
==97379==    by 0x10A6D0: addElement (tests.c:37)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 16 bytes in 1 blocks are definitely lost in loss record 5 of 9
==97379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D5B1: addIntSet (int-set.c:83)
==97379==    by 0x10A6D0: addElement (tests.c:37)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==97379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D585: addIntSet (int-set.c:73)
==97379==    by 0x10A6A8: addElement (tests.c:35)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 24 bytes in 1 blocks are definitely lost in loss record 7 of 9
==97379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D585: addIntSet (int-set.c:73)
==97379==    by 0x10A6BC: addElement (tests.c:36)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 24 bytes in 1 blocks are definitely lost in loss record 8 of 9
==97379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D585: addIntSet (int-set.c:73)
==97379==    by 0x10A6D0: addElement (tests.c:37)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==97379==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==97379==    by 0x10D4C0: newIntSet (int-set.c:24)
==97379==    by 0x10A693: addElement (tests.c:34)
==97379==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==97379==    by 0x10D482: main (tests.c:567)
==97379== 
==97379== LEAK SUMMARY:
==97379==    definitely lost: 160 bytes in 8 blocks
==97379==    indirectly lost: 16 bytes in 1 blocks
==97379==      possibly lost: 0 bytes in 0 blocks
==97379==    still reachable: 0 bytes in 0 blocks
==97379==         suppressed: 0 bytes in 0 blocks
==97379== 
==97379== For lists of detected and suppressed errors, rerun with: -s
==97379== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ d=[K[Kgdb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) m[Kb isInt[KIntSet
Breakpoint 1 at [34m0x54df[m: file [32mint-set.c[m, line 36.
(gdb) l[Kr
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x555555564300, [36melement[m=21845) at [32mint-set.c[m:36
warning: Source file is more recent than executable.
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
42	        return -1;
(gdb) 
59	}
(gdb) 
[33maddIntSet[m ([36mintSet[m=0x5555555665b0, [36melement[m=33) at [32mint-set.c[m:77
77	    if (isInIntSet(intSet, element) == 1)
(gdb) 
83	        Node *newNode = malloc(sizeof *newNode);
(gdb) c
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) 
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) 
48	    while (currNode != NULL)
(gdb) p currNode
$1 = (Node *) [34m0x5555555665b8[m
(gdb) p *(Node *)currNode
$2 = {data = 0, next = [34m0x555555566590[m}
(gdb) n
58	    return -1;
(gdb) 
59	}
(gdb) 
[2]+  Stopped                 gdb ./tests
josh@machine:~/Documents/CS220/prj2-sol$ fg
gdb ./tests
q
q
A debugging session is active.

	Inferior 1 [process 97593] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make cleanfg[Kgdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
[01m[Kint-set.c:[m[K In function â€˜[01m[KisInIntSet[m[Kâ€™:
[01m[Kint-set.c:46:14:[m[K [01;35m[Kwarning: [m[Kassignment to â€˜[01m[KNode *[m[Kâ€™ {aka â€˜[01m[Kstruct NodeStruct *[m[Kâ€™} from incompatible pointer type â€˜[01m[Kstruct NodeStruct **[m[Kâ€™ [[01;35m[K-Wincompatible-pointer-types[m[K]
   46 |     currNode [01;35m[K=[m[K &tempHead->dummyNode.next;
      |              [01;35m[K^[m[K
==98103== Memcheck, a memory error detector
==98103== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==98103== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==98103== Command: ./tests
==98103== 
Running suite(s): addIntSet
==98103== Invalid read of size 8
==98103==    at 0x10D542: isInIntSet (int-set.c:55)
==98103==    by 0x10D59F: addIntSet (int-set.c:77)
==98103==    by 0x10A6BC: addElement (tests.c:36)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103==  Address 0x4be0148 is 0 bytes after a block of size 24 alloc'd
==98103==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D4C0: newIntSet (int-set.c:24)
==98103==    by 0x10A693: addElement (tests.c:34)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== Invalid read of size 8
==98103==    at 0x10D542: isInIntSet (int-set.c:55)
==98103==    by 0x10D59F: addIntSet (int-set.c:77)
==98103==    by 0x10A6D0: addElement (tests.c:37)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103==  Address 0x4be0148 is 0 bytes after a block of size 24 alloc'd
==98103==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D4C0: newIntSet (int-set.c:24)
==98103==    by 0x10A693: addElement (tests.c:34)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==98103== 
==98103== HEAP SUMMARY:
==98103==     in use at exit: 176 bytes in 9 blocks
==98103==   total heap usage: 242 allocs, 233 frees, 20,031 bytes allocated
==98103== 
==98103== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==98103==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D519: isInIntSet (int-set.c:44)
==98103==    by 0x10D59F: addIntSet (int-set.c:77)
==98103==    by 0x10A6BC: addElement (tests.c:36)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==98103==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D5AE: addIntSet (int-set.c:83)
==98103==    by 0x10A6BC: addElement (tests.c:36)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 16 bytes in 1 blocks are definitely lost in loss record 4 of 9
==98103==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D519: isInIntSet (int-set.c:44)
==98103==    by 0x10D59F: addIntSet (int-set.c:77)
==98103==    by 0x10A6D0: addElement (tests.c:37)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 16 bytes in 1 blocks are definitely lost in loss record 5 of 9
==98103==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D5AE: addIntSet (int-set.c:83)
==98103==    by 0x10A6D0: addElement (tests.c:37)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==98103==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D582: addIntSet (int-set.c:73)
==98103==    by 0x10A6A8: addElement (tests.c:35)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 24 bytes in 1 blocks are definitely lost in loss record 7 of 9
==98103==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D582: addIntSet (int-set.c:73)
==98103==    by 0x10A6BC: addElement (tests.c:36)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 24 bytes in 1 blocks are definitely lost in loss record 8 of 9
==98103==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D582: addIntSet (int-set.c:73)
==98103==    by 0x10A6D0: addElement (tests.c:37)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==98103==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98103==    by 0x10D4C0: newIntSet (int-set.c:24)
==98103==    by 0x10A693: addElement (tests.c:34)
==98103==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98103==    by 0x10D482: main (tests.c:567)
==98103== 
==98103== LEAK SUMMARY:
==98103==    definitely lost: 160 bytes in 8 blocks
==98103==    indirectly lost: 16 bytes in 1 blocks
==98103==      possibly lost: 0 bytes in 0 blocks
==98103==    still reachable: 0 bytes in 0 blocks
==98103==         suppressed: 0 bytes in 0 blocks
==98103== 
==98103== For lists of detected and suppressed errors, rerun with: -s
==98103== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==98184== Memcheck, a memory error detector
==98184== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==98184== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==98184== Command: ./tests
==98184== 
Running suite(s): addIntSet
==98184== Conditional jump or move depends on uninitialised value(s)
==98184==    at 0x10D54F: isInIntSet (int-set.c:48)
==98184==    by 0x10D59F: addIntSet (int-set.c:77)
==98184==    by 0x10A6BC: addElement (tests.c:36)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== Conditional jump or move depends on uninitialised value(s)
==98184==    at 0x10D7AC: freeIntSet (int-set.c:143)
==98184==    by 0x10A8A8: addElement (tests.c:42)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== Conditional jump or move depends on uninitialised value(s)
==98184==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D7D2: freeIntSet (int-set.c:152)
==98184==    by 0x10A8A8: addElement (tests.c:42)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== Conditional jump or move depends on uninitialised value(s)
==98184==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D7E8: freeIntSet (int-set.c:154)
==98184==    by 0x10A8A8: addElement (tests.c:42)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
100%: Checks: 1, Failures: 0, Errors: 0
==98184== 
==98184== HEAP SUMMARY:
==98184==     in use at exit: 120 bytes in 6 blocks
==98184==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==98184== 
==98184== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==98184==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D519: isInIntSet (int-set.c:44)
==98184==    by 0x10D59F: addIntSet (int-set.c:77)
==98184==    by 0x10A6BC: addElement (tests.c:36)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==98184==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D5AE: addIntSet (int-set.c:83)
==98184==    by 0x10A6BC: addElement (tests.c:36)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==98184==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D519: isInIntSet (int-set.c:44)
==98184==    by 0x10D59F: addIntSet (int-set.c:77)
==98184==    by 0x10A6D0: addElement (tests.c:37)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==98184==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D582: addIntSet (int-set.c:73)
==98184==    by 0x10A6A8: addElement (tests.c:35)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==98184==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D582: addIntSet (int-set.c:73)
==98184==    by 0x10A6BC: addElement (tests.c:36)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==98184==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98184==    by 0x10D582: addIntSet (int-set.c:73)
==98184==    by 0x10A6D0: addElement (tests.c:37)
==98184==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98184==    by 0x10D482: main (tests.c:567)
==98184== 
==98184== LEAK SUMMARY:
==98184==    definitely lost: 120 bytes in 6 blocks
==98184==    indirectly lost: 0 bytes in 0 blocks
==98184==      possibly lost: 0 bytes in 0 blocks
==98184==    still reachable: 0 bytes in 0 blocks
==98184==         suppressed: 0 bytes in 0 blocks
==98184== 
==98184== Use --track-origins=yes to see where uninitialised values come from
==98184== For lists of detected and suppressed errors, rerun with: -s
==98184== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==98262== Memcheck, a memory error detector
==98262== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==98262== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==98262== Command: ./tests
==98262== 
Running suite(s): addIntSet
==98262== Conditional jump or move depends on uninitialised value(s)
==98262==    at 0x10D54F: isInIntSet (int-set.c:48)
==98262==    by 0x10D59F: addIntSet (int-set.c:77)
==98262==    by 0x10A6BC: addElement (tests.c:36)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== Conditional jump or move depends on uninitialised value(s)
==98262==    at 0x10D7AC: freeIntSet (int-set.c:143)
==98262==    by 0x10A8A8: addElement (tests.c:42)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== Conditional jump or move depends on uninitialised value(s)
==98262==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D7D2: freeIntSet (int-set.c:152)
==98262==    by 0x10A8A8: addElement (tests.c:42)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== Conditional jump or move depends on uninitialised value(s)
==98262==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D7E8: freeIntSet (int-set.c:154)
==98262==    by 0x10A8A8: addElement (tests.c:42)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
100%: Checks: 1, Failures: 0, Errors: 0
==98262== 
==98262== HEAP SUMMARY:
==98262==     in use at exit: 120 bytes in 6 blocks
==98262==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==98262== 
==98262== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==98262==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D519: isInIntSet (int-set.c:44)
==98262==    by 0x10D59F: addIntSet (int-set.c:77)
==98262==    by 0x10A6BC: addElement (tests.c:36)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==98262==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D5AE: addIntSet (int-set.c:83)
==98262==    by 0x10A6BC: addElement (tests.c:36)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==98262==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D519: isInIntSet (int-set.c:44)
==98262==    by 0x10D59F: addIntSet (int-set.c:77)
==98262==    by 0x10A6D0: addElement (tests.c:37)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==98262==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D582: addIntSet (int-set.c:73)
==98262==    by 0x10A6A8: addElement (tests.c:35)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==98262==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D582: addIntSet (int-set.c:73)
==98262==    by 0x10A6BC: addElement (tests.c:36)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==98262==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98262==    by 0x10D582: addIntSet (int-set.c:73)
==98262==    by 0x10A6D0: addElement (tests.c:37)
==98262==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98262==    by 0x10D482: main (tests.c:567)
==98262== 
==98262== LEAK SUMMARY:
==98262==    definitely lost: 120 bytes in 6 blocks
==98262==    indirectly lost: 0 bytes in 0 blocks
==98262==      possibly lost: 0 bytes in 0 blocks
==98262==    still reachable: 0 bytes in 0 blocks
==98262==         suppressed: 0 bytes in 0 blocks
==98262== 
==98262== Use --track-origins=yes to see where uninitialised values come from
==98262== For lists of detected and suppressed errors, rerun with: -s
==98262== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make cel[K[Klean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==98388== Memcheck, a memory error detector
==98388== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==98388== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==98388== Command: ./tests
==98388== 
Running suite(s): addIntSet
==98388== Conditional jump or move depends on uninitialised value(s)
==98388==    at 0x10D555: isInIntSet (int-set.c:48)
==98388==    by 0x10D5A5: addIntSet (int-set.c:77)
==98388==    by 0x10A6BC: addElement (tests.c:36)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== Conditional jump or move depends on uninitialised value(s)
==98388==    at 0x10D555: isInIntSet (int-set.c:48)
==98388==    by 0x10D5A5: addIntSet (int-set.c:77)
==98388==    by 0x10A6D0: addElement (tests.c:37)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
0%: Checks: 1, Failures: 1, Errors: 0
tests.c:40:F:addElement:addElement:0: Assertion 'result3 == 2' failed: result3 == 3, 2 == 2
==98388== 
==98388== HEAP SUMMARY:
==98388==     in use at exit: 176 bytes in 9 blocks
==98388==   total heap usage: 242 allocs, 233 frees, 20,031 bytes allocated
==98388== 
==98388== 16 bytes in 1 blocks are definitely lost in loss record 2 of 9
==98388==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D519: isInIntSet (int-set.c:44)
==98388==    by 0x10D5A5: addIntSet (int-set.c:77)
==98388==    by 0x10A6BC: addElement (tests.c:36)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 16 bytes in 1 blocks are definitely lost in loss record 3 of 9
==98388==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D5B4: addIntSet (int-set.c:83)
==98388==    by 0x10A6BC: addElement (tests.c:36)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 16 bytes in 1 blocks are definitely lost in loss record 4 of 9
==98388==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D519: isInIntSet (int-set.c:44)
==98388==    by 0x10D5A5: addIntSet (int-set.c:77)
==98388==    by 0x10A6D0: addElement (tests.c:37)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 16 bytes in 1 blocks are definitely lost in loss record 5 of 9
==98388==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D5B4: addIntSet (int-set.c:83)
==98388==    by 0x10A6D0: addElement (tests.c:37)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 24 bytes in 1 blocks are definitely lost in loss record 6 of 9
==98388==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D588: addIntSet (int-set.c:73)
==98388==    by 0x10A6A8: addElement (tests.c:35)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 24 bytes in 1 blocks are definitely lost in loss record 7 of 9
==98388==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D588: addIntSet (int-set.c:73)
==98388==    by 0x10A6BC: addElement (tests.c:36)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 24 bytes in 1 blocks are definitely lost in loss record 8 of 9
==98388==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D588: addIntSet (int-set.c:73)
==98388==    by 0x10A6D0: addElement (tests.c:37)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== 40 (24 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==98388==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==98388==    by 0x10D4C0: newIntSet (int-set.c:24)
==98388==    by 0x10A693: addElement (tests.c:34)
==98388==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==98388==    by 0x10D482: main (tests.c:567)
==98388== 
==98388== LEAK SUMMARY:
==98388==    definitely lost: 160 bytes in 8 blocks
==98388==    indirectly lost: 16 bytes in 1 blocks
==98388==      possibly lost: 0 bytes in 0 blocks
==98388==    still reachable: 0 bytes in 0 blocks
==98388==         suppressed: 0 bytes in 0 blocks
==98388== 
==98388== Use --track-origins=yes to see where uninitialised values come from
==98388== For lists of detected and suppressed errors, rerun with: -s
==98388== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
make: *** [tests.make:16: valgrind-tests] Error 1
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kg[Kgdv[Kb ./tests
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
[m--Type <RET> for more, q to quit, c to continue without paging--c
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./tests[m...
(gdb) b isINI[K[KnIntSet
Breakpoint 1 at [34m0x54df[m: file [32mint-set.c[m, line 36.
(gdb) c
The program is not being run.
(gdb) b[Kr
Starting program: /home/josh/Documents/CS220/prj2-sol/tests 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib/x86_64-linux-gnu/libthread_db.so.1[m".
Running suite(s): IntSet Tests
 newIntSet
 addIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x555555564300, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) c
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) 
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) 
Continuing.
 nElementsIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x555555564300, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
42	        return -1;
(gdb) 
59	}
(gdb) 
[33maddIntSet[m ([36mintSet[m=0x5555555667c0, [36melement[m=-33) at [32mint-set.c[m:77
77	    if (isInIntSet(intSet, element) == 1)
(gdb) 
83	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
84	        newNode->data = element;
(gdb) c
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) 
50	        if (currNode->data == element)
(gdb) 
55	        currNode = currNode->next;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) 
58	    return -1;
(gdb) currNodepcurrNode currNode*currNode(currNodeNcurrNodeocurrNodedcurrNodeecurrNode currNode*currNode)currNode
$1 = {data = -33, next = [34m0x0[m}
(gdb) n[Kc
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) 
50	        if (currNode->data == element)
(gdb) 
55	        currNode = currNode->next;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) 
58	    return -1;
(gdb) c c[K[K[Kncp *(Node *)currNode
$2 = {data = -33, next = [34m0x0[m}
(gdb) 
$3 = {data = -33, next = [34m0x0[m}
(gdb) n
59	}
(gdb) 
[33maddIntSet[m ([36mintSet[m=0x5555555667c0, [36melement[m=66) at [32mint-set.c[m:77
77	    if (isInIntSet(intSet, element) == 1)
(gdb) 
83	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
84	        newNode->data = element;
(gdb) 
86	        if(tempHead->nElements == 0){
(gdb) 
89	        tempHead->nElements = tempHead->nElements + 1;
(gdb) 
92	    return tempHead->nElements;
(gdb) 
93	}
(gdb) 
[33mnElements[m ([36m_i[m=0) at [32mtests.c[m:66
66	  int n = nElementsIntSet(set);
(gdb) 
67	  freeIntSet(set);
(gdb) 
68	  ck_assert_int_eq(result1, 1);
(gdb) 
69	  ck_assert_int_eq(result2, 2);
(gdb) 
70	  ck_assert_int_eq(result3, 3);
(gdb) 
71	  ck_assert_int_eq(n, 3);
(gdb) 
73	END_TEST
(gdb) 
[34m0x000055555555beab[m in [33mtcase_run_tfun_nofork.isra[m ()
(gdb) 
Single stepping until exit from function tcase_run_tfun_nofork.isra.9,
which has no line number information.
[34m0x000055555555c297[m in [33msrunner_run[m ()
(gdb) 
Single stepping until exit from function srunner_run,
which has no line number information.
 addMultipleIntSet

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x770000007c, [36melement[m=0) at [32mint-set.c[m:36
36	{
(gdb) 
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
42	        return -1;
(gdb) 
59	}
(gdb) 
[33maddIntSet[m ([36mintSet[m=0x555555566930, [36melement[m=33) at [32mint-set.c[m:77
77	    if (isInIntSet(intSet, element) == 1)
(gdb) 
83	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
84	        newNode->data = element;
(gdb) 
86	        if(tempHead->nElements == 0){
(gdb) 
87	            tempHead->dummyNode.next = newNode;
(gdb) 
89	        tempHead->nElements = tempHead->nElements + 1;
(gdb) 
92	    return tempHead->nElements;
(gdb) 
93	}
(gdb) 
[33maddMultipleIntSet[m ([36mintSet[m=0x555555566930, [36melements[m=0x7fffffffe080, [36mnElements[m=6) at [32mint-set.c[m:107
107	    for (int i = 0; i < nElements; ++i)
(gdb) 
109	        addIntSet(intSet, elements[i]);
(gdb) 

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) 
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) 
50	        if (currNode->data == element)
(gdb) 
55	        currNode = currNode->next;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) 
58	    return -1;
(gdb) 
59	}
(gdb) 
[33maddIntSet[m ([36mintSet[m=0x555555566930, [36melement[m=-53) at [32mint-set.c[m:77
77	    if (isInIntSet(intSet, element) == 1)
(gdb) np *(Node *)currNode
No symbol "currNode" in current context.
(gdb) 
No symbol "currNode" in current context.
(gdb) b[Kn
83	        Node *newNode = malloc(sizeof *newNode);
(gdb) 
84	        newNode->data = element;
(gdb) 
86	        if(tempHead->nElements == 0){
(gdb) np *(Node *)currNode[C[C[C[C[C[Cn[K
89	        tempHead->nElements = tempHead->nElements + 1;
(gdb) 
92	    return tempHead->nElements;
(gdb) 
93	}
(gdb) 
[33maddMultipleIntSet[m ([36mintSet[m=0x555555566930, [36melements[m=0x7fffffffe080, [36mnElements[m=6) at [32mint-set.c[m:107
107	    for (int i = 0; i < nElements; ++i)
(gdb) 
109	        addIntSet(intSet, elements[i]);
(gdb) 

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) c
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) b[Kn
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) p tempHead->nElements
$4 = 3
(gdb) p tempHead->nElements[C[K[K[K[K[K[K[K[K[Knext
There is no member named next.
(gdb) p tempHead->nextElements[5Pext[C[K[K[K[Kdumm[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kn
48	    while (currNode->next != NULL)
(gdb) 
50	        if (currNode->data == element)
(gdb) np tempHead->nextElements[C[C[C[C[C[Cn[Kcnp *(Node *)currNode
$5 = {data = 0, next = [34m0x555555566910[m}
(gdb) n
55	        currNode = currNode->next;
(gdb) 
48	    while (currNode->next != NULL)
(gdb) np *(Node *)currNode
$6 = {data = 33, next = [34m0x0[m}
(gdb) c
Continuing.

Breakpoint 1, [33misInIntSet[m ([36mintSet[m=0x7ffff7cd92d4 <__GI___libc_malloc+116>, [36melement[m=21845) at [32mint-set.c[m:36
36	{
(gdb) n
38	    Header *tempHead = (Header *)intSet;
(gdb) 
40	    if (tempHead->nElements == 0)
(gdb) 
44	    Node *currNode = calloc(1, sizeof *currNode);
(gdb) 
46	    currNode = &tempHead->dummyNode;
(gdb) q
A debugging session is active.

	Inferior 1 [process 98591] will be killed.

Quit anyway? (y or n) y
josh@machine:~/Documents/CS220/prj2-sol$ make clan
make: *** No rule to make target 'clan'.  Stop.
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean[1Pangdb ./testsmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgdb ./tests[Kmake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==100183== Memcheck, a memory error detector
==100183== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==100183== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==100183== Command: ./tests
==100183== 
Running suite(s): addIntSet
==100183== Conditional jump or move depends on uninitialised value(s)
==100183==    at 0x10D564: isInIntSet (int-set.c:48)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== Invalid read of size 8
==100183==    at 0x10D55D: isInIntSet (int-set.c:48)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6D0: addElement (tests.c:37)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Address 0x4be01f8 is 8 bytes inside a block of size 16 free'd
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D58F: isInIntSet (int-set.c:64)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Block was alloc'd at
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== Invalid read of size 4
==100183==    at 0x10D56A: isInIntSet (int-set.c:60)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6D0: addElement (tests.c:37)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Address 0x4be01f0 is 0 bytes inside a block of size 16 free'd
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D58F: isInIntSet (int-set.c:64)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Block was alloc'd at
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== Invalid free() / delete / delete[] / realloc()
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D57C: isInIntSet (int-set.c:61)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6D0: addElement (tests.c:37)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Address 0x4be01f0 is 0 bytes inside a block of size 16 free'd
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D58F: isInIntSet (int-set.c:64)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Block was alloc'd at
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== Invalid read of size 8
==100183==    at 0x10D7DA: freeIntSet (int-set.c:153)
==100183==    by 0x10A8A8: addElement (tests.c:42)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Address 0x4be01f8 is 8 bytes inside a block of size 16 free'd
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D58F: isInIntSet (int-set.c:64)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Block was alloc'd at
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== Invalid read of size 8
==100183==    at 0x10D806: freeIntSet (int-set.c:159)
==100183==    by 0x10A8A8: addElement (tests.c:42)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Address 0x4be01f8 is 8 bytes inside a block of size 16 free'd
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D58F: isInIntSet (int-set.c:64)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Block was alloc'd at
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== Invalid free() / delete / delete[] / realloc()
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D811: freeIntSet (int-set.c:159)
==100183==    by 0x10A8A8: addElement (tests.c:42)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Address 0x4be01f0 is 0 bytes inside a block of size 16 free'd
==100183==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D58F: isInIntSet (int-set.c:64)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183==  Block was alloc'd at
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
100%: Checks: 1, Failures: 0, Errors: 0
==100183== 
==100183== HEAP SUMMARY:
==100183==     in use at exit: 120 bytes in 6 blocks
==100183==   total heap usage: 241 allocs, 237 frees, 19,742 bytes allocated
==100183== 
==100183== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==100183==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D51C: isInIntSet (int-set.c:44)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5ED: addIntSet (int-set.c:90)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==100183==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D51C: isInIntSet (int-set.c:44)
==100183==    by 0x10D5DE: addIntSet (int-set.c:84)
==100183==    by 0x10A6D0: addElement (tests.c:37)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5C1: addIntSet (int-set.c:80)
==100183==    by 0x10A6A8: addElement (tests.c:35)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5C1: addIntSet (int-set.c:80)
==100183==    by 0x10A6BC: addElement (tests.c:36)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==100183==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100183==    by 0x10D5C1: addIntSet (int-set.c:80)
==100183==    by 0x10A6D0: addElement (tests.c:37)
==100183==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100183==    by 0x10D482: main (tests.c:567)
==100183== 
==100183== LEAK SUMMARY:
==100183==    definitely lost: 120 bytes in 6 blocks
==100183==    indirectly lost: 0 bytes in 0 blocks
==100183==      possibly lost: 0 bytes in 0 blocks
==100183==    still reachable: 0 bytes in 0 blocks
==100183==         suppressed: 0 bytes in 0 blocks
==100183== 
==100183== Use --track-origins=yes to see where uninitialised values come from
==100183== For lists of detected and suppressed errors, rerun with: -s
==100183== ERROR SUMMARY: 13 errors from 13 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ clear[K[K[K[K[Kmake clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==100413== Memcheck, a memory error detector
==100413== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==100413== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==100413== Command: ./tests
==100413== 
Running suite(s): addIntSet
==100413== Conditional jump or move depends on uninitialised value(s)
==100413==    at 0x10D555: isInIntSet (int-set.c:48)
==100413==    by 0x10D5B7: addIntSet (int-set.c:81)
==100413==    by 0x10A6BC: addElement (tests.c:36)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== Conditional jump or move depends on uninitialised value(s)
==100413==    at 0x10D555: isInIntSet (int-set.c:48)
==100413==    by 0x10D5B7: addIntSet (int-set.c:81)
==100413==    by 0x10A6D0: addElement (tests.c:37)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== Conditional jump or move depends on uninitialised value(s)
==100413==    at 0x10D7C4: freeIntSet (int-set.c:147)
==100413==    by 0x10A8A8: addElement (tests.c:42)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== Conditional jump or move depends on uninitialised value(s)
==100413==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D7EA: freeIntSet (int-set.c:156)
==100413==    by 0x10A8A8: addElement (tests.c:42)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== Conditional jump or move depends on uninitialised value(s)
==100413==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D800: freeIntSet (int-set.c:158)
==100413==    by 0x10A8A8: addElement (tests.c:42)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
100%: Checks: 1, Failures: 0, Errors: 0
==100413== 
==100413== HEAP SUMMARY:
==100413==     in use at exit: 120 bytes in 6 blocks
==100413==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==100413== 
==100413== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==100413==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D519: isInIntSet (int-set.c:44)
==100413==    by 0x10D5B7: addIntSet (int-set.c:81)
==100413==    by 0x10A6BC: addElement (tests.c:36)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==100413==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D5C6: addIntSet (int-set.c:87)
==100413==    by 0x10A6BC: addElement (tests.c:36)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==100413==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D519: isInIntSet (int-set.c:44)
==100413==    by 0x10D5B7: addIntSet (int-set.c:81)
==100413==    by 0x10A6D0: addElement (tests.c:37)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==100413==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D59A: addIntSet (int-set.c:77)
==100413==    by 0x10A6A8: addElement (tests.c:35)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==100413==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D59A: addIntSet (int-set.c:77)
==100413==    by 0x10A6BC: addElement (tests.c:36)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==100413==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100413==    by 0x10D59A: addIntSet (int-set.c:77)
==100413==    by 0x10A6D0: addElement (tests.c:37)
==100413==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100413==    by 0x10D482: main (tests.c:567)
==100413== 
==100413== LEAK SUMMARY:
==100413==    definitely lost: 120 bytes in 6 blocks
==100413==    indirectly lost: 0 bytes in 0 blocks
==100413==      possibly lost: 0 bytes in 0 blocks
==100413==    still reachable: 0 bytes in 0 blocks
==100413==         suppressed: 0 bytes in 0 blocks
==100413== 
==100413== Use --track-origins=yes to see where uninitialised values come from
==100413== For lists of detected and suppressed errors, rerun with: -s
==100413== ERROR SUMMARY: 11 errors from 11 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ ^C
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==100821== Memcheck, a memory error detector
==100821== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==100821== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==100821== Command: ./tests
==100821== 
Running suite(s): addIntSet
==100821== Conditional jump or move depends on uninitialised value(s)
==100821==    at 0x10D7D0: freeIntSet (int-set.c:148)
==100821==    by 0x10A8A8: addElement (tests.c:42)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== Conditional jump or move depends on uninitialised value(s)
==100821==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D7F6: freeIntSet (int-set.c:157)
==100821==    by 0x10A8A8: addElement (tests.c:42)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== Conditional jump or move depends on uninitialised value(s)
==100821==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D80C: freeIntSet (int-set.c:159)
==100821==    by 0x10A8A8: addElement (tests.c:42)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
100%: Checks: 1, Failures: 0, Errors: 0
==100821== 
==100821== HEAP SUMMARY:
==100821==     in use at exit: 120 bytes in 6 blocks
==100821==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==100821== 
==100821== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==100821==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D519: isInIntSet (int-set.c:44)
==100821==    by 0x10D5C3: addIntSet (int-set.c:82)
==100821==    by 0x10A6BC: addElement (tests.c:36)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==100821==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D5D2: addIntSet (int-set.c:88)
==100821==    by 0x10A6BC: addElement (tests.c:36)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==100821==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D519: isInIntSet (int-set.c:44)
==100821==    by 0x10D5C3: addIntSet (int-set.c:82)
==100821==    by 0x10A6D0: addElement (tests.c:37)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==100821==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D5A6: addIntSet (int-set.c:78)
==100821==    by 0x10A6A8: addElement (tests.c:35)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==100821==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D5A6: addIntSet (int-set.c:78)
==100821==    by 0x10A6BC: addElement (tests.c:36)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==100821==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==100821==    by 0x10D5A6: addIntSet (int-set.c:78)
==100821==    by 0x10A6D0: addElement (tests.c:37)
==100821==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==100821==    by 0x10D482: main (tests.c:567)
==100821== 
==100821== LEAK SUMMARY:
==100821==    definitely lost: 120 bytes in 6 blocks
==100821==    indirectly lost: 0 bytes in 0 blocks
==100821==      possibly lost: 0 bytes in 0 blocks
==100821==    still reachable: 0 bytes in 0 blocks
==100821==         suppressed: 0 bytes in 0 blocks
==100821== 
==100821== Use --track-origins=yes to see where uninitialised values come from
==100821== For lists of detected and suppressed errors, rerun with: -s
==100821== ERROR SUMMARY: 9 errors from 9 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101043== Memcheck, a memory error detector
==101043== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101043== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101043== Command: ./tests
==101043== 
Running suite(s): addIntSet
==101043== Invalid free() / delete / delete[] / realloc()
==101043==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D830: freeIntSet (int-set.c:164)
==101043==    by 0x10A8A8: addElement (tests.c:42)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043==  Address 0x4be01f0 is 0 bytes inside a block of size 16 free'd
==101043==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D81A: freeIntSet (int-set.c:162)
==101043==    by 0x10A8A8: addElement (tests.c:42)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043==  Block was alloc'd at
==101043==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D5D2: addIntSet (int-set.c:89)
==101043==    by 0x10A6A8: addElement (tests.c:35)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
100%: Checks: 1, Failures: 0, Errors: 0
==101043== 
==101043== HEAP SUMMARY:
==101043==     in use at exit: 120 bytes in 6 blocks
==101043==   total heap usage: 241 allocs, 236 frees, 19,742 bytes allocated
==101043== 
==101043== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==101043==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D519: isInIntSet (int-set.c:44)
==101043==    by 0x10D5C3: addIntSet (int-set.c:83)
==101043==    by 0x10A6BC: addElement (tests.c:36)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
==101043== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==101043==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D5D2: addIntSet (int-set.c:89)
==101043==    by 0x10A6BC: addElement (tests.c:36)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
==101043== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==101043==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D519: isInIntSet (int-set.c:44)
==101043==    by 0x10D5C3: addIntSet (int-set.c:83)
==101043==    by 0x10A6D0: addElement (tests.c:37)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
==101043== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==101043==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D5A6: addIntSet (int-set.c:79)
==101043==    by 0x10A6A8: addElement (tests.c:35)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
==101043== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==101043==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D5A6: addIntSet (int-set.c:79)
==101043==    by 0x10A6BC: addElement (tests.c:36)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
==101043== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==101043==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101043==    by 0x10D5A6: addIntSet (int-set.c:79)
==101043==    by 0x10A6D0: addElement (tests.c:37)
==101043==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101043==    by 0x10D482: main (tests.c:567)
==101043== 
==101043== LEAK SUMMARY:
==101043==    definitely lost: 120 bytes in 6 blocks
==101043==    indirectly lost: 0 bytes in 0 blocks
==101043==      possibly lost: 0 bytes in 0 blocks
==101043==    still reachable: 0 bytes in 0 blocks
==101043==         suppressed: 0 bytes in 0 blocks
==101043== 
==101043== For lists of detected and suppressed errors, rerun with: -s
==101043== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101132== Memcheck, a memory error detector
==101132== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101132== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101132== Command: ./tests
==101132== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==101132== 
==101132== HEAP SUMMARY:
==101132==     in use at exit: 120 bytes in 6 blocks
==101132==   total heap usage: 241 allocs, 235 frees, 19,742 bytes allocated
==101132== 
==101132== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==101132==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101132==    by 0x10D519: isInIntSet (int-set.c:44)
==101132==    by 0x10D5C3: addIntSet (int-set.c:83)
==101132==    by 0x10A6BC: addElement (tests.c:36)
==101132==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x10D482: main (tests.c:567)
==101132== 
==101132== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==101132==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101132==    by 0x10D5D2: addIntSet (int-set.c:89)
==101132==    by 0x10A6BC: addElement (tests.c:36)
==101132==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x10D482: main (tests.c:567)
==101132== 
==101132== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==101132==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101132==    by 0x10D519: isInIntSet (int-set.c:44)
==101132==    by 0x10D5C3: addIntSet (int-set.c:83)
==101132==    by 0x10A6D0: addElement (tests.c:37)
==101132==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x10D482: main (tests.c:567)
==101132== 
==101132== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==101132==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101132==    by 0x10D5A6: addIntSet (int-set.c:79)
==101132==    by 0x10A6A8: addElement (tests.c:35)
==101132==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x10D482: main (tests.c:567)
==101132== 
==101132== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==101132==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101132==    by 0x10D5A6: addIntSet (int-set.c:79)
==101132==    by 0x10A6BC: addElement (tests.c:36)
==101132==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x10D482: main (tests.c:567)
==101132== 
==101132== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==101132==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101132==    by 0x10D5A6: addIntSet (int-set.c:79)
==101132==    by 0x10A6D0: addElement (tests.c:37)
==101132==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101132==    by 0x10D482: main (tests.c:567)
==101132== 
==101132== LEAK SUMMARY:
==101132==    definitely lost: 120 bytes in 6 blocks
==101132==    indirectly lost: 0 bytes in 0 blocks
==101132==      possibly lost: 0 bytes in 0 blocks
==101132==    still reachable: 0 bytes in 0 blocks
==101132==         suppressed: 0 bytes in 0 blocks
==101132== 
==101132== For lists of detected and suppressed errors, rerun with: -s
==101132== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101245== Memcheck, a memory error detector
==101245== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101245== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101245== Command: ./tests
==101245== 
Running suite(s): addIntSet
==101245== Invalid free() / delete / delete[] / realloc()
==101245==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D59B: isInIntSet (int-set.c:65)
==101245==    by 0x10D5EA: addIntSet (int-set.c:85)
==101245==    by 0x10A6BC: addElement (tests.c:36)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245==  Address 0x4be0138 is 8 bytes inside a block of size 24 alloc'd
==101245==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D4C0: newIntSet (int-set.c:24)
==101245==    by 0x10A693: addElement (tests.c:34)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== Invalid free() / delete / delete[] / realloc()
==101245==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D841: freeIntSet (int-set.c:164)
==101245==    by 0x10A8A8: addElement (tests.c:42)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245==  Address 0x4be01f0 is 0 bytes inside a block of size 16 free'd
==101245==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D588: isInIntSet (int-set.c:61)
==101245==    by 0x10D5EA: addIntSet (int-set.c:85)
==101245==    by 0x10A6D0: addElement (tests.c:37)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245==  Block was alloc'd at
==101245==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D5F9: addIntSet (int-set.c:91)
==101245==    by 0x10A6A8: addElement (tests.c:35)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
100%: Checks: 1, Failures: 0, Errors: 0
==101245== 
==101245== HEAP SUMMARY:
==101245==     in use at exit: 120 bytes in 6 blocks
==101245==   total heap usage: 241 allocs, 237 frees, 19,742 bytes allocated
==101245== 
==101245== 16 bytes in 1 blocks are definitely lost in loss record 1 of 6
==101245==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D51C: isInIntSet (int-set.c:44)
==101245==    by 0x10D5EA: addIntSet (int-set.c:85)
==101245==    by 0x10A6BC: addElement (tests.c:36)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== 16 bytes in 1 blocks are definitely lost in loss record 2 of 6
==101245==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D5F9: addIntSet (int-set.c:91)
==101245==    by 0x10A6BC: addElement (tests.c:36)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== 16 bytes in 1 blocks are definitely lost in loss record 3 of 6
==101245==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D51C: isInIntSet (int-set.c:44)
==101245==    by 0x10D5EA: addIntSet (int-set.c:85)
==101245==    by 0x10A6D0: addElement (tests.c:37)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== 24 bytes in 1 blocks are definitely lost in loss record 4 of 6
==101245==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D5CD: addIntSet (int-set.c:81)
==101245==    by 0x10A6A8: addElement (tests.c:35)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== 24 bytes in 1 blocks are definitely lost in loss record 5 of 6
==101245==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D5CD: addIntSet (int-set.c:81)
==101245==    by 0x10A6BC: addElement (tests.c:36)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== 24 bytes in 1 blocks are definitely lost in loss record 6 of 6
==101245==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101245==    by 0x10D5CD: addIntSet (int-set.c:81)
==101245==    by 0x10A6D0: addElement (tests.c:37)
==101245==    by 0x10FF0A: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x1102F6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101245==    by 0x10D482: main (tests.c:567)
==101245== 
==101245== LEAK SUMMARY:
==101245==    definitely lost: 120 bytes in 6 blocks
==101245==    indirectly lost: 0 bytes in 0 blocks
==101245==      possibly lost: 0 bytes in 0 blocks
==101245==    still reachable: 0 bytes in 0 blocks
==101245==         suppressed: 0 bytes in 0 blocks
==101245== 
==101245== For lists of detected and suppressed errors, rerun with: -s
==101245== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make[K[K[K[Kmake clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101347== Memcheck, a memory error detector
==101347== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101347== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101347== Command: ./tests
==101347== 
Running suite(s): addIntSet
==101347== Invalid free() / delete / delete[] / realloc()
==101347==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D588: isInIntSet (int-set.c:65)
==101347==    by 0x10D5D7: addIntSet (int-set.c:85)
==101347==    by 0x10A6BC: addElement (tests.c:36)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347==  Address 0x4be0138 is 8 bytes inside a block of size 24 alloc'd
==101347==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D4C0: newIntSet (int-set.c:24)
==101347==    by 0x10A693: addElement (tests.c:34)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347== 
==101347== Invalid free() / delete / delete[] / realloc()
==101347==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D82E: freeIntSet (int-set.c:164)
==101347==    by 0x10A8A8: addElement (tests.c:42)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347==  Address 0x4be01f0 is 0 bytes inside a block of size 16 free'd
==101347==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D575: isInIntSet (int-set.c:61)
==101347==    by 0x10D5D7: addIntSet (int-set.c:85)
==101347==    by 0x10A6D0: addElement (tests.c:37)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347==  Block was alloc'd at
==101347==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D5E6: addIntSet (int-set.c:91)
==101347==    by 0x10A6A8: addElement (tests.c:35)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347== 
100%: Checks: 1, Failures: 0, Errors: 0
==101347== 
==101347== HEAP SUMMARY:
==101347==     in use at exit: 88 bytes in 4 blocks
==101347==   total heap usage: 239 allocs, 237 frees, 19,710 bytes allocated
==101347== 
==101347== 16 bytes in 1 blocks are definitely lost in loss record 1 of 4
==101347==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D5E6: addIntSet (int-set.c:91)
==101347==    by 0x10A6BC: addElement (tests.c:36)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347== 
==101347== 24 bytes in 1 blocks are definitely lost in loss record 2 of 4
==101347==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D5BA: addIntSet (int-set.c:81)
==101347==    by 0x10A6A8: addElement (tests.c:35)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347== 
==101347== 24 bytes in 1 blocks are definitely lost in loss record 3 of 4
==101347==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D5BA: addIntSet (int-set.c:81)
==101347==    by 0x10A6BC: addElement (tests.c:36)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347== 
==101347== 24 bytes in 1 blocks are definitely lost in loss record 4 of 4
==101347==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101347==    by 0x10D5BA: addIntSet (int-set.c:81)
==101347==    by 0x10A6D0: addElement (tests.c:37)
==101347==    by 0x10FEFA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x1102E6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101347==    by 0x10D482: main (tests.c:567)
==101347== 
==101347== LEAK SUMMARY:
==101347==    definitely lost: 88 bytes in 4 blocks
==101347==    indirectly lost: 0 bytes in 0 blocks
==101347==      possibly lost: 0 bytes in 0 blocks
==101347==    still reachable: 0 bytes in 0 blocks
==101347==         suppressed: 0 bytes in 0 blocks
==101347== 
==101347== For lists of detected and suppressed errors, rerun with: -s
==101347== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101450== Memcheck, a memory error detector
==101450== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101450== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101450== Command: ./tests
==101450== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==101450== 
==101450== HEAP SUMMARY:
==101450==     in use at exit: 88 bytes in 4 blocks
==101450==   total heap usage: 239 allocs, 235 frees, 19,710 bytes allocated
==101450== 
==101450== 16 bytes in 1 blocks are definitely lost in loss record 1 of 4
==101450==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101450==    by 0x10D5BB: addIntSet (int-set.c:88)
==101450==    by 0x10A6BC: addElement (tests.c:36)
==101450==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x10D482: main (tests.c:567)
==101450== 
==101450== 24 bytes in 1 blocks are definitely lost in loss record 2 of 4
==101450==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101450==    by 0x10D58F: addIntSet (int-set.c:78)
==101450==    by 0x10A6A8: addElement (tests.c:35)
==101450==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x10D482: main (tests.c:567)
==101450== 
==101450== 24 bytes in 1 blocks are definitely lost in loss record 3 of 4
==101450==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101450==    by 0x10D58F: addIntSet (int-set.c:78)
==101450==    by 0x10A6BC: addElement (tests.c:36)
==101450==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x10D482: main (tests.c:567)
==101450== 
==101450== 24 bytes in 1 blocks are definitely lost in loss record 4 of 4
==101450==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101450==    by 0x10D58F: addIntSet (int-set.c:78)
==101450==    by 0x10A6D0: addElement (tests.c:37)
==101450==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101450==    by 0x10D482: main (tests.c:567)
==101450== 
==101450== LEAK SUMMARY:
==101450==    definitely lost: 88 bytes in 4 blocks
==101450==    indirectly lost: 0 bytes in 0 blocks
==101450==      possibly lost: 0 bytes in 0 blocks
==101450==    still reachable: 0 bytes in 0 blocks
==101450==         suppressed: 0 bytes in 0 blocks
==101450== 
==101450== For lists of detected and suppressed errors, rerun with: -s
==101450== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101539== Memcheck, a memory error detector
==101539== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101539== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101539== Command: ./tests
==101539== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==101539== 
==101539== HEAP SUMMARY:
==101539==     in use at exit: 88 bytes in 4 blocks
==101539==   total heap usage: 239 allocs, 235 frees, 19,710 bytes allocated
==101539== 
==101539== 16 bytes in 1 blocks are definitely lost in loss record 1 of 4
==101539==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101539==    by 0x10D5BB: addIntSet (int-set.c:86)
==101539==    by 0x10A6BC: addElement (tests.c:36)
==101539==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x10D482: main (tests.c:567)
==101539== 
==101539== 24 bytes in 1 blocks are definitely lost in loss record 2 of 4
==101539==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101539==    by 0x10D58F: addIntSet (int-set.c:76)
==101539==    by 0x10A6A8: addElement (tests.c:35)
==101539==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x10D482: main (tests.c:567)
==101539== 
==101539== 24 bytes in 1 blocks are definitely lost in loss record 3 of 4
==101539==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101539==    by 0x10D58F: addIntSet (int-set.c:76)
==101539==    by 0x10A6BC: addElement (tests.c:36)
==101539==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x10D482: main (tests.c:567)
==101539== 
==101539== 24 bytes in 1 blocks are definitely lost in loss record 4 of 4
==101539==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101539==    by 0x10D58F: addIntSet (int-set.c:76)
==101539==    by 0x10A6D0: addElement (tests.c:37)
==101539==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101539==    by 0x10D482: main (tests.c:567)
==101539== 
==101539== LEAK SUMMARY:
==101539==    definitely lost: 88 bytes in 4 blocks
==101539==    indirectly lost: 0 bytes in 0 blocks
==101539==      possibly lost: 0 bytes in 0 blocks
==101539==    still reachable: 0 bytes in 0 blocks
==101539==         suppressed: 0 bytes in 0 blocks
==101539== 
==101539== For lists of detected and suppressed errors, rerun with: -s
==101539== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101719== Memcheck, a memory error detector
==101719== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101719== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101719== Command: ./tests
==101719== 
Running suite(s): addIntSet
==101719== Invalid read of size 4
==101719==    at 0x10D550: isInIntSet (int-set.c:56)
==101719==    by 0x10D59E: addIntSet (int-set.c:79)
==101719==    by 0x10A6D0: addElement (tests.c:37)
==101719==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x10D482: main (tests.c:567)
==101719==  Address 0x4be0190 is 0 bytes inside a block of size 16 free'd
==101719==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101719==    by 0x10D5EB: addIntSet (int-set.c:93)
==101719==    by 0x10A6A8: addElement (tests.c:35)
==101719==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x10D482: main (tests.c:567)
==101719==  Block was alloc'd at
==101719==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101719==    by 0x10D5AD: addIntSet (int-set.c:85)
==101719==    by 0x10A6A8: addElement (tests.c:35)
==101719==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x10D482: main (tests.c:567)
==101719== 
==101719== Invalid free() / delete / delete[] / realloc()
==101719==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101719==    by 0x10D801: freeIntSet (int-set.c:159)
==101719==    by 0x10A8A8: addElement (tests.c:42)
==101719==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x10D482: main (tests.c:567)
==101719==  Address 0x4be0190 is 0 bytes inside a block of size 16 free'd
==101719==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101719==    by 0x10D5EB: addIntSet (int-set.c:93)
==101719==    by 0x10A6A8: addElement (tests.c:35)
==101719==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x10D482: main (tests.c:567)
==101719==  Block was alloc'd at
==101719==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101719==    by 0x10D5AD: addIntSet (int-set.c:85)
==101719==    by 0x10A6A8: addElement (tests.c:35)
==101719==    by 0x10FECA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x1102B6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101719==    by 0x10D482: main (tests.c:567)
==101719== 
100%: Checks: 1, Failures: 0, Errors: 0
==101719== 
==101719== HEAP SUMMARY:
==101719==     in use at exit: 0 bytes in 0 blocks
==101719==   total heap usage: 236 allocs, 237 frees, 19,638 bytes allocated
==101719== 
==101719== All heap blocks were freed -- no leaks are possible
==101719== 
==101719== For lists of detected and suppressed errors, rerun with: -s
==101719== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101810== Memcheck, a memory error detector
==101810== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101810== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101810== Command: ./tests
==101810== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==101810== 
==101810== HEAP SUMMARY:
==101810==     in use at exit: 16 bytes in 1 blocks
==101810==   total heap usage: 236 allocs, 235 frees, 19,638 bytes allocated
==101810== 
==101810== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==101810==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101810==    by 0x10D5AD: addIntSet (int-set.c:85)
==101810==    by 0x10A6BC: addElement (tests.c:36)
==101810==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101810==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101810==    by 0x10D482: main (tests.c:567)
==101810== 
==101810== LEAK SUMMARY:
==101810==    definitely lost: 16 bytes in 1 blocks
==101810==    indirectly lost: 0 bytes in 0 blocks
==101810==      possibly lost: 0 bytes in 0 blocks
==101810==    still reachable: 0 bytes in 0 blocks
==101810==         suppressed: 0 bytes in 0 blocks
==101810== 
==101810== For lists of detected and suppressed errors, rerun with: -s
==101810== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==101861== Memcheck, a memory error detector
==101861== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==101861== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==101861== Command: ./tests
==101861== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==101861== 
==101861== HEAP SUMMARY:
==101861==     in use at exit: 16 bytes in 1 blocks
==101861==   total heap usage: 236 allocs, 235 frees, 19,638 bytes allocated
==101861== 
==101861== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==101861==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==101861==    by 0x10D5AD: addIntSet (int-set.c:85)
==101861==    by 0x10A6BC: addElement (tests.c:36)
==101861==    by 0x10FEBA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==101861==    by 0x1102A6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==101861==    by 0x10D482: main (tests.c:567)
==101861== 
==101861== LEAK SUMMARY:
==101861==    definitely lost: 16 bytes in 1 blocks
==101861==    indirectly lost: 0 bytes in 0 blocks
==101861==      possibly lost: 0 bytes in 0 blocks
==101861==    still reachable: 0 bytes in 0 blocks
==101861==         suppressed: 0 bytes in 0 blocks
==101861== 
==101861== For lists of detected and suppressed errors, rerun with: -s
==101861== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102022== Memcheck, a memory error detector
==102022== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102022== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102022== Command: ./tests
==102022== 
Running suite(s): addIntSet
==102022== Invalid write of size 4
==102022==    at 0x10D5B9: addIntSet (int-set.c:91)
==102022==    by 0x10A6A8: addElement (tests.c:35)
==102022==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102022==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102022==    by 0x10D482: main (tests.c:567)
==102022==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==102022== 
==102022== 
==102022== Process terminating with default action of signal 11 (SIGSEGV)
==102022==  Access not within mapped region at address 0x0
==102022==    at 0x10D5B9: addIntSet (int-set.c:91)
==102022==    by 0x10A6A8: addElement (tests.c:35)
==102022==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102022==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102022==    by 0x10D482: main (tests.c:567)
==102022==  If you believe this happened as a result of a stack
==102022==  overflow in your program's main thread (unlikely but
==102022==  possible), you can try to increase the size of the
==102022==  main thread stack using the --main-stacksize= flag.
==102022==  The main thread stack size used in this run was 8388608.
==102022== 
==102022== HEAP SUMMARY:
==102022==     in use at exit: 4,828 bytes in 186 blocks
==102022==   total heap usage: 209 allocs, 23 frees, 10,435 bytes allocated
==102022== 
==102022== LEAK SUMMARY:
==102022==    definitely lost: 0 bytes in 0 blocks
==102022==    indirectly lost: 0 bytes in 0 blocks
==102022==      possibly lost: 0 bytes in 0 blocks
==102022==    still reachable: 4,828 bytes in 186 blocks
==102022==         suppressed: 0 bytes in 0 blocks
==102022== Reachable blocks (those to which a pointer was found) are not shown.
==102022== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==102022== 
==102022== For lists of detected and suppressed errors, rerun with: -s
==102022== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102121== Memcheck, a memory error detector
==102121== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102121== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102121== Command: ./tests
==102121== 
Running suite(s): addIntSet
==102121== Invalid write of size 4
==102121==    at 0x10D5B9: addIntSet (int-set.c:91)
==102121==    by 0x10A6A8: addElement (tests.c:35)
==102121==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102121==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102121==    by 0x10D482: main (tests.c:567)
==102121==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==102121== 
==102121== 
==102121== Process terminating with default action of signal 11 (SIGSEGV)
==102121==  Access not within mapped region at address 0x0
==102121==    at 0x10D5B9: addIntSet (int-set.c:91)
==102121==    by 0x10A6A8: addElement (tests.c:35)
==102121==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102121==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102121==    by 0x10D482: main (tests.c:567)
==102121==  If you believe this happened as a result of a stack
==102121==  overflow in your program's main thread (unlikely but
==102121==  possible), you can try to increase the size of the
==102121==  main thread stack using the --main-stacksize= flag.
==102121==  The main thread stack size used in this run was 8388608.
==102121== 
==102121== HEAP SUMMARY:
==102121==     in use at exit: 4,828 bytes in 186 blocks
==102121==   total heap usage: 209 allocs, 23 frees, 10,435 bytes allocated
==102121== 
==102121== LEAK SUMMARY:
==102121==    definitely lost: 0 bytes in 0 blocks
==102121==    indirectly lost: 0 bytes in 0 blocks
==102121==      possibly lost: 0 bytes in 0 blocks
==102121==    still reachable: 4,828 bytes in 186 blocks
==102121==         suppressed: 0 bytes in 0 blocks
==102121== Reachable blocks (those to which a pointer was found) are not shown.
==102121== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==102121== 
==102121== For lists of detected and suppressed errors, rerun with: -s
==102121== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102319== Memcheck, a memory error detector
==102319== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102319== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102319== Command: ./tests
==102319== 
Running suite(s): addIntSet
==102319== Invalid write of size 4
==102319==    at 0x10D5B9: addIntSet (int-set.c:91)
==102319==    by 0x10A6A8: addElement (tests.c:35)
==102319==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102319==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102319==    by 0x10D482: main (tests.c:567)
==102319==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==102319== 
==102319== 
==102319== Process terminating with default action of signal 11 (SIGSEGV)
==102319==  Access not within mapped region at address 0x0
==102319==    at 0x10D5B9: addIntSet (int-set.c:91)
==102319==    by 0x10A6A8: addElement (tests.c:35)
==102319==    by 0x10FEAA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102319==    by 0x110296: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102319==    by 0x10D482: main (tests.c:567)
==102319==  If you believe this happened as a result of a stack
==102319==  overflow in your program's main thread (unlikely but
==102319==  possible), you can try to increase the size of the
==102319==  main thread stack using the --main-stacksize= flag.
==102319==  The main thread stack size used in this run was 8388608.
==102319== 
==102319== HEAP SUMMARY:
==102319==     in use at exit: 4,828 bytes in 186 blocks
==102319==   total heap usage: 209 allocs, 23 frees, 10,435 bytes allocated
==102319== 
==102319== LEAK SUMMARY:
==102319==    definitely lost: 0 bytes in 0 blocks
==102319==    indirectly lost: 0 bytes in 0 blocks
==102319==      possibly lost: 0 bytes in 0 blocks
==102319==    still reachable: 4,828 bytes in 186 blocks
==102319==         suppressed: 0 bytes in 0 blocks
==102319== Reachable blocks (those to which a pointer was found) are not shown.
==102319== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==102319== 
==102319== For lists of detected and suppressed errors, rerun with: -s
==102319== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
make: *** [tests.make:16: valgrind-tests] Error 139
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102457== Memcheck, a memory error detector
==102457== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102457== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102457== Command: ./tests
==102457== 
Running suite(s): addIntSet
==102457== Invalid read of size 4
==102457==    at 0x10D550: isInIntSet (int-set.c:56)
==102457==    by 0x10D5A1: addIntSet (int-set.c:79)
==102457==    by 0x10A6D0: addElement (tests.c:37)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457==  Address 0x4be0190 is 0 bytes inside a block of size 16 free'd
==102457==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D5F4: addIntSet (int-set.c:92)
==102457==    by 0x10A6A8: addElement (tests.c:35)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457==  Block was alloc'd at
==102457==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D5B0: addIntSet (int-set.c:85)
==102457==    by 0x10A6A8: addElement (tests.c:35)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457== 
==102457== Invalid free() / delete / delete[] / realloc()
==102457==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D819: freeIntSet (int-set.c:161)
==102457==    by 0x10A8A8: addElement (tests.c:42)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457==  Address 0x4be0190 is 0 bytes inside a block of size 16 free'd
==102457==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D5F4: addIntSet (int-set.c:92)
==102457==    by 0x10A6A8: addElement (tests.c:35)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457==  Block was alloc'd at
==102457==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D5B0: addIntSet (int-set.c:85)
==102457==    by 0x10A6A8: addElement (tests.c:35)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457== 
100%: Checks: 1, Failures: 0, Errors: 0
==102457== 
==102457== HEAP SUMMARY:
==102457==     in use at exit: 32 bytes in 2 blocks
==102457==   total heap usage: 237 allocs, 236 frees, 19,654 bytes allocated
==102457== 
==102457== 16 bytes in 1 blocks are definitely lost in loss record 1 of 2
==102457==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D5D1: addIntSet (int-set.c:90)
==102457==    by 0x10A6A8: addElement (tests.c:35)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457== 
==102457== 16 bytes in 1 blocks are definitely lost in loss record 2 of 2
==102457==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102457==    by 0x10D5B0: addIntSet (int-set.c:85)
==102457==    by 0x10A6BC: addElement (tests.c:36)
==102457==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102457==    by 0x10D482: main (tests.c:567)
==102457== 
==102457== LEAK SUMMARY:
==102457==    definitely lost: 32 bytes in 2 blocks
==102457==    indirectly lost: 0 bytes in 0 blocks
==102457==      possibly lost: 0 bytes in 0 blocks
==102457==    still reachable: 0 bytes in 0 blocks
==102457==         suppressed: 0 bytes in 0 blocks
==102457== 
==102457== For lists of detected and suppressed errors, rerun with: -s
==102457== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ tree'[K
.
â”œâ”€â”€ changes.LOG
â”œâ”€â”€ int-set.c
â”œâ”€â”€ int-set.h
â”œâ”€â”€ int-set.o
â”œâ”€â”€ int-set-strings.c
â”œâ”€â”€ int-set-strings.h
â”œâ”€â”€ int-set-strings.o
â”œâ”€â”€ main.c
â”œâ”€â”€ Makefile
â”œâ”€â”€ README
â”œâ”€â”€ tests
â”œâ”€â”€ tests.c
â”œâ”€â”€ tests.make
â””â”€â”€ tests.o

0 directories, 14 files
josh@machine:~/Documents/CS220/prj2-sol$ clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ clear[1Ptreemake -f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102538== Memcheck, a memory error detector
==102538== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102538== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102538== Command: ./tests
==102538== 
Running suite(s): addIntSet
==102538== Invalid read of size 4
==102538==    at 0x10D550: isInIntSet (int-set.c:56)
==102538==    by 0x10D5A1: addIntSet (int-set.c:79)
==102538==    by 0x10A6D0: addElement (tests.c:37)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538==  Address 0x4be0190 is 0 bytes inside a block of size 16 free'd
==102538==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D5F4: addIntSet (int-set.c:92)
==102538==    by 0x10A6A8: addElement (tests.c:35)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538==  Block was alloc'd at
==102538==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D5B0: addIntSet (int-set.c:85)
==102538==    by 0x10A6A8: addElement (tests.c:35)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538== 
==102538== Invalid free() / delete / delete[] / realloc()
==102538==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D819: freeIntSet (int-set.c:161)
==102538==    by 0x10A8A8: addElement (tests.c:42)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538==  Address 0x4be0190 is 0 bytes inside a block of size 16 free'd
==102538==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D5F4: addIntSet (int-set.c:92)
==102538==    by 0x10A6A8: addElement (tests.c:35)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538==  Block was alloc'd at
==102538==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D5B0: addIntSet (int-set.c:85)
==102538==    by 0x10A6A8: addElement (tests.c:35)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538== 
100%: Checks: 1, Failures: 0, Errors: 0
==102538== 
==102538== HEAP SUMMARY:
==102538==     in use at exit: 32 bytes in 2 blocks
==102538==   total heap usage: 237 allocs, 236 frees, 19,654 bytes allocated
==102538== 
==102538== 16 bytes in 1 blocks are definitely lost in loss record 1 of 2
==102538==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D5D1: addIntSet (int-set.c:90)
==102538==    by 0x10A6A8: addElement (tests.c:35)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538== 
==102538== 16 bytes in 1 blocks are definitely lost in loss record 2 of 2
==102538==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102538==    by 0x10D5B0: addIntSet (int-set.c:85)
==102538==    by 0x10A6BC: addElement (tests.c:36)
==102538==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102538==    by 0x10D482: main (tests.c:567)
==102538== 
==102538== LEAK SUMMARY:
==102538==    definitely lost: 32 bytes in 2 blocks
==102538==    indirectly lost: 0 bytes in 0 blocks
==102538==      possibly lost: 0 bytes in 0 blocks
==102538==    still reachable: 0 bytes in 0 blocks
==102538==         suppressed: 0 bytes in 0 blocks
==102538== 
==102538== For lists of detected and suppressed errors, rerun with: -s
==102538== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102673== Memcheck, a memory error detector
==102673== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102673== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102673== Command: ./tests
==102673== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==102673== 
==102673== HEAP SUMMARY:
==102673==     in use at exit: 16 bytes in 1 blocks
==102673==   total heap usage: 237 allocs, 236 frees, 19,654 bytes allocated
==102673== 
==102673== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==102673==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102673==    by 0x10D5B0: addIntSet (int-set.c:85)
==102673==    by 0x10A6BC: addElement (tests.c:36)
==102673==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102673==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102673==    by 0x10D482: main (tests.c:567)
==102673== 
==102673== LEAK SUMMARY:
==102673==    definitely lost: 16 bytes in 1 blocks
==102673==    indirectly lost: 0 bytes in 0 blocks
==102673==      possibly lost: 0 bytes in 0 blocks
==102673==    still reachable: 0 bytes in 0 blocks
==102673==         suppressed: 0 bytes in 0 blocks
==102673== 
==102673== For lists of detected and suppressed errors, rerun with: -s
==102673== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==102759== Memcheck, a memory error detector
==102759== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102759== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102759== Command: ./tests
==102759== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==102759== 
==102759== HEAP SUMMARY:
==102759==     in use at exit: 0 bytes in 0 blocks
==102759==   total heap usage: 237 allocs, 237 frees, 19,654 bytes allocated
==102759== 
==102759== All heap blocks were freed -- no leaks are possible
==102759== 
==102759== For lists of detected and suppressed errors, rerun with: -s
==102759== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=addIntSet -s valgrind-tests[1P[1P[1P[1@n[1@e[1@w
==102814== Memcheck, a memory error detector
==102814== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102814== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102814== Command: ./tests
==102814== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==102814== 
==102814== HEAP SUMMARY:
==102814==     in use at exit: 0 bytes in 0 blocks
==102814==   total heap usage: 222 allocs, 222 frees, 19,477 bytes allocated
==102814== 
==102814== All heap blocks were freed -- no leaks are possible
==102814== 
==102814== For lists of detected and suppressed errors, rerun with: -s
==102814== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet -s valgrind-tests[1P[1P[1P[1P[1P[1P[1P[1P[1P[1@n[1@E[1@l[1@e[1@m[1@e[1@n[1@t[1@s[1@I[1@n[1@t[1@S[1@e[1@t
==102888== Memcheck, a memory error detector
==102888== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102888== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102888== Command: ./tests
==102888== 
Running suite(s): nElementsIntSet
==102888== Conditional jump or move depends on uninitialised value(s)
==102888==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102888==    by 0x10D81A: freeIntSet (int-set.c:160)
==102888==    by 0x10A9B1: nElements (tests.c:67)
==102888==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102888==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102888==    by 0x10D482: main (tests.c:567)
==102888== 
100%: Checks: 1, Failures: 0, Errors: 0
==102888== 
==102888== HEAP SUMMARY:
==102888==     in use at exit: 0 bytes in 0 blocks
==102888==   total heap usage: 238 allocs, 238 frees, 19,670 bytes allocated
==102888== 
==102888== All heap blocks were freed -- no leaks are possible
==102888== 
==102888== Use --track-origins=yes to see where uninitialised values come from
==102888== For lists of detected and suppressed errors, rerun with: -s
==102888== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make clean-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests
==102996== Memcheck, a memory error detector
==102996== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==102996== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==102996== Command: ./tests
==102996== 
Running suite(s): nElementsIntSet
==102996== Conditional jump or move depends on uninitialised value(s)
==102996==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102996==    by 0x10D81A: freeIntSet (int-set.c:160)
==102996==    by 0x10A9B1: nElements (tests.c:67)
==102996==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102996==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102996==    by 0x10D482: main (tests.c:567)
==102996== 
100%: Checks: 1, Failures: 0, Errors: 0
==102996== 
==102996== HEAP SUMMARY:
==102996==     in use at exit: 16 bytes in 1 blocks
==102996==   total heap usage: 238 allocs, 237 frees, 19,670 bytes allocated
==102996== 
==102996== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==102996==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==102996==    by 0x10D5D1: addIntSet (int-set.c:90)
==102996==    by 0x10A96B: nElements (tests.c:63)
==102996==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==102996==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==102996==    by 0x10D482: main (tests.c:567)
==102996== 
==102996== LEAK SUMMARY:
==102996==    definitely lost: 16 bytes in 1 blocks
==102996==    indirectly lost: 0 bytes in 0 blocks
==102996==      possibly lost: 0 bytes in 0 blocks
==102996==    still reachable: 0 bytes in 0 blocks
==102996==         suppressed: 0 bytes in 0 blocks
==102996== 
==102996== Use --track-origins=yes to see where uninitialised values come from
==102996== For lists of detected and suppressed errors, rerun with: -s
==102996== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make clean
rm -f *~ *.o tests
clear
[H[2J[3Jjosh@machine:~/Documents/CS220/prj2-sol$ make [K[K[K[K[Kmake clean-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests
==103070== Memcheck, a memory error detector
==103070== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==103070== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==103070== Command: ./tests
==103070== 
Running suite(s): nElementsIntSet
==103070== Conditional jump or move depends on uninitialised value(s)
==103070==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==103070==    by 0x10D81A: freeIntSet (int-set.c:160)
==103070==    by 0x10A9B1: nElements (tests.c:67)
==103070==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==103070==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==103070==    by 0x10D482: main (tests.c:567)
==103070== 
100%: Checks: 1, Failures: 0, Errors: 0
==103070== 
==103070== HEAP SUMMARY:
==103070==     in use at exit: 0 bytes in 0 blocks
==103070==   total heap usage: 238 allocs, 238 frees, 19,670 bytes allocated
==103070== 
==103070== All heap blocks were freed -- no leaks are possible
==103070== 
==103070== Use --track-origins=yes to see where uninitialised values come from
==103070== For lists of detected and suppressed errors, rerun with: -s
==103070== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests
==103100== Memcheck, a memory error detector
==103100== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==103100== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==103100== Command: ./tests
==103100== 
Running suite(s): nElementsIntSet
==103100== Conditional jump or move depends on uninitialised value(s)
==103100==    at 0x483C9F5: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==103100==    by 0x10D81A: freeIntSet (int-set.c:160)
==103100==    by 0x10A9B1: nElements (tests.c:67)
==103100==    by 0x10FEEA: tcase_run_tfun_nofork.isra.9 (in /home/josh/Documents/CS220/prj2-sol/tests)
==103100==    by 0x1102D6: srunner_run (in /home/josh/Documents/CS220/prj2-sol/tests)
==103100==    by 0x10D482: main (tests.c:567)
==103100== 
100%: Checks: 1, Failures: 0, Errors: 0
==103100== 
==103100== HEAP SUMMARY:
==103100==     in use at exit: 0 bytes in 0 blocks
==103100==   total heap usage: 238 allocs, 238 frees, 19,670 bytes allocated
==103100== 
==103100== All heap blocks were freed -- no leaks are possible
==103100== 
==103100== Use --track-origins=yes to see where uninitialised values come from
==103100== For lists of detected and suppressed errors, rerun with: -s
==103100== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[6Pew[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==103152== Memcheck, a memory error detector
==103152== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==103152== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==103152== Command: ./tests
==103152== 
Running suite(s): newIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==103152== 
==103152== HEAP SUMMARY:
==103152==     in use at exit: 0 bytes in 0 blocks
==103152==   total heap usage: 222 allocs, 222 frees, 19,477 bytes allocated
==103152== 
==103152== All heap blocks were freed -- no leaks are possible
==103152== 
==103152== For lists of detected and suppressed errors, rerun with: -s
==103152== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ make -f tests.make CK_SUITE=newIntSet -s valgrind-tests[6@Elements[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=nElementsIntSet -s valgrind-tests[6Pew[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cadd[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cclean[K-f tests.make CK_SUITE=addIntSet -s valgrind-tests
==103181== Memcheck, a memory error detector
==103181== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==103181== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==103181== Command: ./tests
==103181== 
Running suite(s): addIntSet
100%: Checks: 1, Failures: 0, Errors: 0
==103181== 
==103181== HEAP SUMMARY:
==103181==     in use at exit: 0 bytes in 0 blocks
==103181==   total heap usage: 237 allocs, 237 frees, 19,654 bytes allocated
==103181== 
==103181== All heap blocks were freed -- no leaks are possible
==103181== 
==103181== For lists of detected and suppressed errors, rerun with: -s
==103181== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
josh@machine:~/Documents/CS220/prj2-sol$ exit
There are stopped jobs.
josh@machine:~/Documents/CS220/prj2-sol$ exit
Exception ignored in: <gdb._GdbOutputFile object at 0x7ffb00253ca0>
Traceback (most recent call last):
  File "/usr/share/gdb/python/gdb/__init__.py", line 43, in flush
    def flush(self):
KeyboardInterrupt: 

Script done on 2021-10-12 21:30:11-04:00 [COMMAND_EXIT_CODE="0"]
